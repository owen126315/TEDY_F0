
TEDY_F0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004684  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08004744  08004744  00014744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047b0  080047b0  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080047b0  080047b0  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080047b0  080047b0  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047b0  080047b0  000147b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047b4  080047b4  000147b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080047b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005e0  20000004  080047bc  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005e4  080047bc  000205e4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013624  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002b9b  00000000  00000000  00033650  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000860  00000000  00000000  000361f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000730  00000000  00000000  00036a50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000efd0  00000000  00000000  00037180  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bf90  00000000  00000000  00046150  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000443eb  00000000  00000000  000520e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000964cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ae8  00000000  00000000  00096548  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800472c 	.word	0x0800472c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	0800472c 	.word	0x0800472c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80003f8:	4b07      	ldr	r3, [pc, #28]	; (8000418 <HAL_Init+0x24>)
 80003fa:	681a      	ldr	r2, [r3, #0]
 80003fc:	4b06      	ldr	r3, [pc, #24]	; (8000418 <HAL_Init+0x24>)
 80003fe:	2110      	movs	r1, #16
 8000400:	430a      	orrs	r2, r1
 8000402:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f809 	bl	800041c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800040a:	f003 fecf 	bl	80041ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800040e:	2300      	movs	r3, #0
}
 8000410:	0018      	movs	r0, r3
 8000412:	46bd      	mov	sp, r7
 8000414:	bd80      	pop	{r7, pc}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	40022000 	.word	0x40022000

0800041c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b082      	sub	sp, #8
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000424:	f000 ff86 	bl	8001334 <HAL_RCC_GetHCLKFreq>
 8000428:	0002      	movs	r2, r0
 800042a:	23fa      	movs	r3, #250	; 0xfa
 800042c:	0099      	lsls	r1, r3, #2
 800042e:	0010      	movs	r0, r2
 8000430:	f7ff fe6a 	bl	8000108 <__udivsi3>
 8000434:	0003      	movs	r3, r0
 8000436:	0018      	movs	r0, r3
 8000438:	f000 f935 	bl	80006a6 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 800043c:	6879      	ldr	r1, [r7, #4]
 800043e:	2301      	movs	r3, #1
 8000440:	425b      	negs	r3, r3
 8000442:	2200      	movs	r2, #0
 8000444:	0018      	movs	r0, r3
 8000446:	f000 f8f9 	bl	800063c <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 800044a:	2300      	movs	r3, #0
}
 800044c:	0018      	movs	r0, r3
 800044e:	46bd      	mov	sp, r7
 8000450:	b002      	add	sp, #8
 8000452:	bd80      	pop	{r7, pc}

08000454 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
  uwTick++;
 8000458:	4b03      	ldr	r3, [pc, #12]	; (8000468 <HAL_IncTick+0x14>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	1c5a      	adds	r2, r3, #1
 800045e:	4b02      	ldr	r3, [pc, #8]	; (8000468 <HAL_IncTick+0x14>)
 8000460:	601a      	str	r2, [r3, #0]
}
 8000462:	46c0      	nop			; (mov r8, r8)
 8000464:	46bd      	mov	sp, r7
 8000466:	bd80      	pop	{r7, pc}
 8000468:	20000024 	.word	0x20000024

0800046c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
  return uwTick;
 8000470:	4b02      	ldr	r3, [pc, #8]	; (800047c <HAL_GetTick+0x10>)
 8000472:	681b      	ldr	r3, [r3, #0]
}
 8000474:	0018      	movs	r0, r3
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
 800047a:	46c0      	nop			; (mov r8, r8)
 800047c:	20000024 	.word	0x20000024

08000480 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b084      	sub	sp, #16
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000488:	f7ff fff0 	bl	800046c <HAL_GetTick>
 800048c:	0003      	movs	r3, r0
 800048e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	3301      	adds	r3, #1
 8000498:	d002      	beq.n	80004a0 <HAL_Delay+0x20>
  {
     wait++;
 800049a:	68fb      	ldr	r3, [r7, #12]
 800049c:	3301      	adds	r3, #1
 800049e:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80004a0:	46c0      	nop			; (mov r8, r8)
 80004a2:	f7ff ffe3 	bl	800046c <HAL_GetTick>
 80004a6:	0002      	movs	r2, r0
 80004a8:	68bb      	ldr	r3, [r7, #8]
 80004aa:	1ad3      	subs	r3, r2, r3
 80004ac:	68fa      	ldr	r2, [r7, #12]
 80004ae:	429a      	cmp	r2, r3
 80004b0:	d8f7      	bhi.n	80004a2 <HAL_Delay+0x22>
  {
  }
}
 80004b2:	46c0      	nop			; (mov r8, r8)
 80004b4:	46bd      	mov	sp, r7
 80004b6:	b004      	add	sp, #16
 80004b8:	bd80      	pop	{r7, pc}
	...

080004bc <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	0002      	movs	r2, r0
 80004c4:	1dfb      	adds	r3, r7, #7
 80004c6:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80004c8:	1dfb      	adds	r3, r7, #7
 80004ca:	781b      	ldrb	r3, [r3, #0]
 80004cc:	001a      	movs	r2, r3
 80004ce:	231f      	movs	r3, #31
 80004d0:	401a      	ands	r2, r3
 80004d2:	4b04      	ldr	r3, [pc, #16]	; (80004e4 <NVIC_EnableIRQ+0x28>)
 80004d4:	2101      	movs	r1, #1
 80004d6:	4091      	lsls	r1, r2
 80004d8:	000a      	movs	r2, r1
 80004da:	601a      	str	r2, [r3, #0]
}
 80004dc:	46c0      	nop			; (mov r8, r8)
 80004de:	46bd      	mov	sp, r7
 80004e0:	b002      	add	sp, #8
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	e000e100 	.word	0xe000e100

080004e8 <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	0002      	movs	r2, r0
 80004f0:	1dfb      	adds	r3, r7, #7
 80004f2:	701a      	strb	r2, [r3, #0]
  NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80004f4:	1dfb      	adds	r3, r7, #7
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	001a      	movs	r2, r3
 80004fa:	231f      	movs	r3, #31
 80004fc:	4013      	ands	r3, r2
 80004fe:	4905      	ldr	r1, [pc, #20]	; (8000514 <NVIC_DisableIRQ+0x2c>)
 8000500:	2201      	movs	r2, #1
 8000502:	409a      	lsls	r2, r3
 8000504:	0013      	movs	r3, r2
 8000506:	2280      	movs	r2, #128	; 0x80
 8000508:	508b      	str	r3, [r1, r2]
}
 800050a:	46c0      	nop			; (mov r8, r8)
 800050c:	46bd      	mov	sp, r7
 800050e:	b002      	add	sp, #8
 8000510:	bd80      	pop	{r7, pc}
 8000512:	46c0      	nop			; (mov r8, r8)
 8000514:	e000e100 	.word	0xe000e100

08000518 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000518:	b590      	push	{r4, r7, lr}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
 800051e:	0002      	movs	r2, r0
 8000520:	6039      	str	r1, [r7, #0]
 8000522:	1dfb      	adds	r3, r7, #7
 8000524:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8000526:	1dfb      	adds	r3, r7, #7
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	2b7f      	cmp	r3, #127	; 0x7f
 800052c:	d932      	bls.n	8000594 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800052e:	4a2f      	ldr	r2, [pc, #188]	; (80005ec <NVIC_SetPriority+0xd4>)
 8000530:	1dfb      	adds	r3, r7, #7
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	0019      	movs	r1, r3
 8000536:	230f      	movs	r3, #15
 8000538:	400b      	ands	r3, r1
 800053a:	3b08      	subs	r3, #8
 800053c:	089b      	lsrs	r3, r3, #2
 800053e:	3306      	adds	r3, #6
 8000540:	009b      	lsls	r3, r3, #2
 8000542:	18d3      	adds	r3, r2, r3
 8000544:	3304      	adds	r3, #4
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	1dfa      	adds	r2, r7, #7
 800054a:	7812      	ldrb	r2, [r2, #0]
 800054c:	0011      	movs	r1, r2
 800054e:	2203      	movs	r2, #3
 8000550:	400a      	ands	r2, r1
 8000552:	00d2      	lsls	r2, r2, #3
 8000554:	21ff      	movs	r1, #255	; 0xff
 8000556:	4091      	lsls	r1, r2
 8000558:	000a      	movs	r2, r1
 800055a:	43d2      	mvns	r2, r2
 800055c:	401a      	ands	r2, r3
 800055e:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000560:	683b      	ldr	r3, [r7, #0]
 8000562:	019b      	lsls	r3, r3, #6
 8000564:	22ff      	movs	r2, #255	; 0xff
 8000566:	401a      	ands	r2, r3
 8000568:	1dfb      	adds	r3, r7, #7
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	0018      	movs	r0, r3
 800056e:	2303      	movs	r3, #3
 8000570:	4003      	ands	r3, r0
 8000572:	00db      	lsls	r3, r3, #3
 8000574:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000576:	481d      	ldr	r0, [pc, #116]	; (80005ec <NVIC_SetPriority+0xd4>)
 8000578:	1dfb      	adds	r3, r7, #7
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	001c      	movs	r4, r3
 800057e:	230f      	movs	r3, #15
 8000580:	4023      	ands	r3, r4
 8000582:	3b08      	subs	r3, #8
 8000584:	089b      	lsrs	r3, r3, #2
 8000586:	430a      	orrs	r2, r1
 8000588:	3306      	adds	r3, #6
 800058a:	009b      	lsls	r3, r3, #2
 800058c:	18c3      	adds	r3, r0, r3
 800058e:	3304      	adds	r3, #4
 8000590:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000592:	e027      	b.n	80005e4 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000594:	4a16      	ldr	r2, [pc, #88]	; (80005f0 <NVIC_SetPriority+0xd8>)
 8000596:	1dfb      	adds	r3, r7, #7
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	b25b      	sxtb	r3, r3
 800059c:	089b      	lsrs	r3, r3, #2
 800059e:	33c0      	adds	r3, #192	; 0xc0
 80005a0:	009b      	lsls	r3, r3, #2
 80005a2:	589b      	ldr	r3, [r3, r2]
 80005a4:	1dfa      	adds	r2, r7, #7
 80005a6:	7812      	ldrb	r2, [r2, #0]
 80005a8:	0011      	movs	r1, r2
 80005aa:	2203      	movs	r2, #3
 80005ac:	400a      	ands	r2, r1
 80005ae:	00d2      	lsls	r2, r2, #3
 80005b0:	21ff      	movs	r1, #255	; 0xff
 80005b2:	4091      	lsls	r1, r2
 80005b4:	000a      	movs	r2, r1
 80005b6:	43d2      	mvns	r2, r2
 80005b8:	401a      	ands	r2, r3
 80005ba:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80005bc:	683b      	ldr	r3, [r7, #0]
 80005be:	019b      	lsls	r3, r3, #6
 80005c0:	22ff      	movs	r2, #255	; 0xff
 80005c2:	401a      	ands	r2, r3
 80005c4:	1dfb      	adds	r3, r7, #7
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	0018      	movs	r0, r3
 80005ca:	2303      	movs	r3, #3
 80005cc:	4003      	ands	r3, r0
 80005ce:	00db      	lsls	r3, r3, #3
 80005d0:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80005d2:	4807      	ldr	r0, [pc, #28]	; (80005f0 <NVIC_SetPriority+0xd8>)
 80005d4:	1dfb      	adds	r3, r7, #7
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	b25b      	sxtb	r3, r3
 80005da:	089b      	lsrs	r3, r3, #2
 80005dc:	430a      	orrs	r2, r1
 80005de:	33c0      	adds	r3, #192	; 0xc0
 80005e0:	009b      	lsls	r3, r3, #2
 80005e2:	501a      	str	r2, [r3, r0]
}
 80005e4:	46c0      	nop			; (mov r8, r8)
 80005e6:	46bd      	mov	sp, r7
 80005e8:	b003      	add	sp, #12
 80005ea:	bd90      	pop	{r4, r7, pc}
 80005ec:	e000ed00 	.word	0xe000ed00
 80005f0:	e000e100 	.word	0xe000e100

080005f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	3b01      	subs	r3, #1
 8000600:	4a0c      	ldr	r2, [pc, #48]	; (8000634 <SysTick_Config+0x40>)
 8000602:	4293      	cmp	r3, r2
 8000604:	d901      	bls.n	800060a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000606:	2301      	movs	r3, #1
 8000608:	e010      	b.n	800062c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800060a:	4b0b      	ldr	r3, [pc, #44]	; (8000638 <SysTick_Config+0x44>)
 800060c:	687a      	ldr	r2, [r7, #4]
 800060e:	3a01      	subs	r2, #1
 8000610:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000612:	2301      	movs	r3, #1
 8000614:	425b      	negs	r3, r3
 8000616:	2103      	movs	r1, #3
 8000618:	0018      	movs	r0, r3
 800061a:	f7ff ff7d 	bl	8000518 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800061e:	4b06      	ldr	r3, [pc, #24]	; (8000638 <SysTick_Config+0x44>)
 8000620:	2200      	movs	r2, #0
 8000622:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000624:	4b04      	ldr	r3, [pc, #16]	; (8000638 <SysTick_Config+0x44>)
 8000626:	2207      	movs	r2, #7
 8000628:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800062a:	2300      	movs	r3, #0
}
 800062c:	0018      	movs	r0, r3
 800062e:	46bd      	mov	sp, r7
 8000630:	b002      	add	sp, #8
 8000632:	bd80      	pop	{r7, pc}
 8000634:	00ffffff 	.word	0x00ffffff
 8000638:	e000e010 	.word	0xe000e010

0800063c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800063c:	b580      	push	{r7, lr}
 800063e:	b084      	sub	sp, #16
 8000640:	af00      	add	r7, sp, #0
 8000642:	60b9      	str	r1, [r7, #8]
 8000644:	607a      	str	r2, [r7, #4]
 8000646:	210f      	movs	r1, #15
 8000648:	187b      	adds	r3, r7, r1
 800064a:	1c02      	adds	r2, r0, #0
 800064c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800064e:	68ba      	ldr	r2, [r7, #8]
 8000650:	187b      	adds	r3, r7, r1
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	b25b      	sxtb	r3, r3
 8000656:	0011      	movs	r1, r2
 8000658:	0018      	movs	r0, r3
 800065a:	f7ff ff5d 	bl	8000518 <NVIC_SetPriority>
}
 800065e:	46c0      	nop			; (mov r8, r8)
 8000660:	46bd      	mov	sp, r7
 8000662:	b004      	add	sp, #16
 8000664:	bd80      	pop	{r7, pc}

08000666 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000666:	b580      	push	{r7, lr}
 8000668:	b082      	sub	sp, #8
 800066a:	af00      	add	r7, sp, #0
 800066c:	0002      	movs	r2, r0
 800066e:	1dfb      	adds	r3, r7, #7
 8000670:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000672:	1dfb      	adds	r3, r7, #7
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	b25b      	sxtb	r3, r3
 8000678:	0018      	movs	r0, r3
 800067a:	f7ff ff1f 	bl	80004bc <NVIC_EnableIRQ>
}
 800067e:	46c0      	nop			; (mov r8, r8)
 8000680:	46bd      	mov	sp, r7
 8000682:	b002      	add	sp, #8
 8000684:	bd80      	pop	{r7, pc}

08000686 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000686:	b580      	push	{r7, lr}
 8000688:	b082      	sub	sp, #8
 800068a:	af00      	add	r7, sp, #0
 800068c:	0002      	movs	r2, r0
 800068e:	1dfb      	adds	r3, r7, #7
 8000690:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8000692:	1dfb      	adds	r3, r7, #7
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	b25b      	sxtb	r3, r3
 8000698:	0018      	movs	r0, r3
 800069a:	f7ff ff25 	bl	80004e8 <NVIC_DisableIRQ>
}
 800069e:	46c0      	nop			; (mov r8, r8)
 80006a0:	46bd      	mov	sp, r7
 80006a2:	b002      	add	sp, #8
 80006a4:	bd80      	pop	{r7, pc}

080006a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80006a6:	b580      	push	{r7, lr}
 80006a8:	b082      	sub	sp, #8
 80006aa:	af00      	add	r7, sp, #0
 80006ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	0018      	movs	r0, r3
 80006b2:	f7ff ff9f 	bl	80005f4 <SysTick_Config>
 80006b6:	0003      	movs	r3, r0
}
 80006b8:	0018      	movs	r0, r3
 80006ba:	46bd      	mov	sp, r7
 80006bc:	b002      	add	sp, #8
 80006be:	bd80      	pop	{r7, pc}

080006c0 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80006c8:	230f      	movs	r3, #15
 80006ca:	18fb      	adds	r3, r7, r3
 80006cc:	2200      	movs	r2, #0
 80006ce:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	2221      	movs	r2, #33	; 0x21
 80006d4:	5c9b      	ldrb	r3, [r3, r2]
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	2b02      	cmp	r3, #2
 80006da:	d007      	beq.n	80006ec <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	2204      	movs	r2, #4
 80006e0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80006e2:	230f      	movs	r3, #15
 80006e4:	18fb      	adds	r3, r7, r3
 80006e6:	2201      	movs	r2, #1
 80006e8:	701a      	strb	r2, [r3, #0]
 80006ea:	e028      	b.n	800073e <HAL_DMA_Abort_IT+0x7e>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	681a      	ldr	r2, [r3, #0]
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	210e      	movs	r1, #14
 80006f8:	438a      	bics	r2, r1
 80006fa:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	681a      	ldr	r2, [r3, #0]
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	2101      	movs	r1, #1
 8000708:	438a      	bics	r2, r1
 800070a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000714:	2101      	movs	r1, #1
 8000716:	4091      	lsls	r1, r2
 8000718:	000a      	movs	r2, r1
 800071a:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	2221      	movs	r2, #33	; 0x21
 8000720:	2101      	movs	r1, #1
 8000722:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	2220      	movs	r2, #32
 8000728:	2100      	movs	r1, #0
 800072a:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000730:	2b00      	cmp	r3, #0
 8000732:	d004      	beq.n	800073e <HAL_DMA_Abort_IT+0x7e>
    {
      hdma->XferAbortCallback(hdma);
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000738:	687a      	ldr	r2, [r7, #4]
 800073a:	0010      	movs	r0, r2
 800073c:	4798      	blx	r3
    } 
  }
  return status;
 800073e:	230f      	movs	r3, #15
 8000740:	18fb      	adds	r3, r7, r3
 8000742:	781b      	ldrb	r3, [r3, #0]
}
 8000744:	0018      	movs	r0, r3
 8000746:	46bd      	mov	sp, r7
 8000748:	b004      	add	sp, #16
 800074a:	bd80      	pop	{r7, pc}

0800074c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 800074c:	b580      	push	{r7, lr}
 800074e:	b086      	sub	sp, #24
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
 8000754:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000756:	2300      	movs	r3, #0
 8000758:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800075a:	2300      	movs	r3, #0
 800075c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800075e:	2300      	movs	r3, #0
 8000760:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000762:	e14f      	b.n	8000a04 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000764:	683b      	ldr	r3, [r7, #0]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	2101      	movs	r1, #1
 800076a:	697a      	ldr	r2, [r7, #20]
 800076c:	4091      	lsls	r1, r2
 800076e:	000a      	movs	r2, r1
 8000770:	4013      	ands	r3, r2
 8000772:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d100      	bne.n	800077c <HAL_GPIO_Init+0x30>
 800077a:	e140      	b.n	80009fe <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	685b      	ldr	r3, [r3, #4]
 8000780:	2b02      	cmp	r3, #2
 8000782:	d003      	beq.n	800078c <HAL_GPIO_Init+0x40>
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	685b      	ldr	r3, [r3, #4]
 8000788:	2b12      	cmp	r3, #18
 800078a:	d123      	bne.n	80007d4 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 800078c:	697b      	ldr	r3, [r7, #20]
 800078e:	08da      	lsrs	r2, r3, #3
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	3208      	adds	r2, #8
 8000794:	0092      	lsls	r2, r2, #2
 8000796:	58d3      	ldr	r3, [r2, r3]
 8000798:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 800079a:	697b      	ldr	r3, [r7, #20]
 800079c:	2207      	movs	r2, #7
 800079e:	4013      	ands	r3, r2
 80007a0:	009b      	lsls	r3, r3, #2
 80007a2:	220f      	movs	r2, #15
 80007a4:	409a      	lsls	r2, r3
 80007a6:	0013      	movs	r3, r2
 80007a8:	43da      	mvns	r2, r3
 80007aa:	693b      	ldr	r3, [r7, #16]
 80007ac:	4013      	ands	r3, r2
 80007ae:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	691a      	ldr	r2, [r3, #16]
 80007b4:	697b      	ldr	r3, [r7, #20]
 80007b6:	2107      	movs	r1, #7
 80007b8:	400b      	ands	r3, r1
 80007ba:	009b      	lsls	r3, r3, #2
 80007bc:	409a      	lsls	r2, r3
 80007be:	0013      	movs	r3, r2
 80007c0:	693a      	ldr	r2, [r7, #16]
 80007c2:	4313      	orrs	r3, r2
 80007c4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80007c6:	697b      	ldr	r3, [r7, #20]
 80007c8:	08da      	lsrs	r2, r3, #3
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	3208      	adds	r2, #8
 80007ce:	0092      	lsls	r2, r2, #2
 80007d0:	6939      	ldr	r1, [r7, #16]
 80007d2:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 80007da:	697b      	ldr	r3, [r7, #20]
 80007dc:	005b      	lsls	r3, r3, #1
 80007de:	2203      	movs	r2, #3
 80007e0:	409a      	lsls	r2, r3
 80007e2:	0013      	movs	r3, r2
 80007e4:	43da      	mvns	r2, r3
 80007e6:	693b      	ldr	r3, [r7, #16]
 80007e8:	4013      	ands	r3, r2
 80007ea:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	685b      	ldr	r3, [r3, #4]
 80007f0:	2203      	movs	r2, #3
 80007f2:	401a      	ands	r2, r3
 80007f4:	697b      	ldr	r3, [r7, #20]
 80007f6:	005b      	lsls	r3, r3, #1
 80007f8:	409a      	lsls	r2, r3
 80007fa:	0013      	movs	r3, r2
 80007fc:	693a      	ldr	r2, [r7, #16]
 80007fe:	4313      	orrs	r3, r2
 8000800:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	693a      	ldr	r2, [r7, #16]
 8000806:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	685b      	ldr	r3, [r3, #4]
 800080c:	2b01      	cmp	r3, #1
 800080e:	d00b      	beq.n	8000828 <HAL_GPIO_Init+0xdc>
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	685b      	ldr	r3, [r3, #4]
 8000814:	2b02      	cmp	r3, #2
 8000816:	d007      	beq.n	8000828 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800081c:	2b11      	cmp	r3, #17
 800081e:	d003      	beq.n	8000828 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	685b      	ldr	r3, [r3, #4]
 8000824:	2b12      	cmp	r3, #18
 8000826:	d130      	bne.n	800088a <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	689b      	ldr	r3, [r3, #8]
 800082c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800082e:	697b      	ldr	r3, [r7, #20]
 8000830:	005b      	lsls	r3, r3, #1
 8000832:	2203      	movs	r2, #3
 8000834:	409a      	lsls	r2, r3
 8000836:	0013      	movs	r3, r2
 8000838:	43da      	mvns	r2, r3
 800083a:	693b      	ldr	r3, [r7, #16]
 800083c:	4013      	ands	r3, r2
 800083e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	68da      	ldr	r2, [r3, #12]
 8000844:	697b      	ldr	r3, [r7, #20]
 8000846:	005b      	lsls	r3, r3, #1
 8000848:	409a      	lsls	r2, r3
 800084a:	0013      	movs	r3, r2
 800084c:	693a      	ldr	r2, [r7, #16]
 800084e:	4313      	orrs	r3, r2
 8000850:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	693a      	ldr	r2, [r7, #16]
 8000856:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	685b      	ldr	r3, [r3, #4]
 800085c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800085e:	2201      	movs	r2, #1
 8000860:	697b      	ldr	r3, [r7, #20]
 8000862:	409a      	lsls	r2, r3
 8000864:	0013      	movs	r3, r2
 8000866:	43da      	mvns	r2, r3
 8000868:	693b      	ldr	r3, [r7, #16]
 800086a:	4013      	ands	r3, r2
 800086c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	685b      	ldr	r3, [r3, #4]
 8000872:	091b      	lsrs	r3, r3, #4
 8000874:	2201      	movs	r2, #1
 8000876:	401a      	ands	r2, r3
 8000878:	697b      	ldr	r3, [r7, #20]
 800087a:	409a      	lsls	r2, r3
 800087c:	0013      	movs	r3, r2
 800087e:	693a      	ldr	r2, [r7, #16]
 8000880:	4313      	orrs	r3, r2
 8000882:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	693a      	ldr	r2, [r7, #16]
 8000888:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	68db      	ldr	r3, [r3, #12]
 800088e:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	005b      	lsls	r3, r3, #1
 8000894:	2203      	movs	r2, #3
 8000896:	409a      	lsls	r2, r3
 8000898:	0013      	movs	r3, r2
 800089a:	43da      	mvns	r2, r3
 800089c:	693b      	ldr	r3, [r7, #16]
 800089e:	4013      	ands	r3, r2
 80008a0:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	689a      	ldr	r2, [r3, #8]
 80008a6:	697b      	ldr	r3, [r7, #20]
 80008a8:	005b      	lsls	r3, r3, #1
 80008aa:	409a      	lsls	r2, r3
 80008ac:	0013      	movs	r3, r2
 80008ae:	693a      	ldr	r2, [r7, #16]
 80008b0:	4313      	orrs	r3, r2
 80008b2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	693a      	ldr	r2, [r7, #16]
 80008b8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	685a      	ldr	r2, [r3, #4]
 80008be:	2380      	movs	r3, #128	; 0x80
 80008c0:	055b      	lsls	r3, r3, #21
 80008c2:	4013      	ands	r3, r2
 80008c4:	d100      	bne.n	80008c8 <HAL_GPIO_Init+0x17c>
 80008c6:	e09a      	b.n	80009fe <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008c8:	4b54      	ldr	r3, [pc, #336]	; (8000a1c <HAL_GPIO_Init+0x2d0>)
 80008ca:	699a      	ldr	r2, [r3, #24]
 80008cc:	4b53      	ldr	r3, [pc, #332]	; (8000a1c <HAL_GPIO_Init+0x2d0>)
 80008ce:	2101      	movs	r1, #1
 80008d0:	430a      	orrs	r2, r1
 80008d2:	619a      	str	r2, [r3, #24]
 80008d4:	4b51      	ldr	r3, [pc, #324]	; (8000a1c <HAL_GPIO_Init+0x2d0>)
 80008d6:	699b      	ldr	r3, [r3, #24]
 80008d8:	2201      	movs	r2, #1
 80008da:	4013      	ands	r3, r2
 80008dc:	60bb      	str	r3, [r7, #8]
 80008de:	68bb      	ldr	r3, [r7, #8]
  
        temp = SYSCFG->EXTICR[position >> 2];
 80008e0:	4a4f      	ldr	r2, [pc, #316]	; (8000a20 <HAL_GPIO_Init+0x2d4>)
 80008e2:	697b      	ldr	r3, [r7, #20]
 80008e4:	089b      	lsrs	r3, r3, #2
 80008e6:	3302      	adds	r3, #2
 80008e8:	009b      	lsls	r3, r3, #2
 80008ea:	589b      	ldr	r3, [r3, r2]
 80008ec:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80008ee:	697b      	ldr	r3, [r7, #20]
 80008f0:	2203      	movs	r2, #3
 80008f2:	4013      	ands	r3, r2
 80008f4:	009b      	lsls	r3, r3, #2
 80008f6:	220f      	movs	r2, #15
 80008f8:	409a      	lsls	r2, r3
 80008fa:	0013      	movs	r3, r2
 80008fc:	43da      	mvns	r2, r3
 80008fe:	693b      	ldr	r3, [r7, #16]
 8000900:	4013      	ands	r3, r2
 8000902:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000904:	687a      	ldr	r2, [r7, #4]
 8000906:	2390      	movs	r3, #144	; 0x90
 8000908:	05db      	lsls	r3, r3, #23
 800090a:	429a      	cmp	r2, r3
 800090c:	d013      	beq.n	8000936 <HAL_GPIO_Init+0x1ea>
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4a44      	ldr	r2, [pc, #272]	; (8000a24 <HAL_GPIO_Init+0x2d8>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d00d      	beq.n	8000932 <HAL_GPIO_Init+0x1e6>
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	4a43      	ldr	r2, [pc, #268]	; (8000a28 <HAL_GPIO_Init+0x2dc>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d007      	beq.n	800092e <HAL_GPIO_Init+0x1e2>
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	4a42      	ldr	r2, [pc, #264]	; (8000a2c <HAL_GPIO_Init+0x2e0>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d101      	bne.n	800092a <HAL_GPIO_Init+0x1de>
 8000926:	2303      	movs	r3, #3
 8000928:	e006      	b.n	8000938 <HAL_GPIO_Init+0x1ec>
 800092a:	2305      	movs	r3, #5
 800092c:	e004      	b.n	8000938 <HAL_GPIO_Init+0x1ec>
 800092e:	2302      	movs	r3, #2
 8000930:	e002      	b.n	8000938 <HAL_GPIO_Init+0x1ec>
 8000932:	2301      	movs	r3, #1
 8000934:	e000      	b.n	8000938 <HAL_GPIO_Init+0x1ec>
 8000936:	2300      	movs	r3, #0
 8000938:	697a      	ldr	r2, [r7, #20]
 800093a:	2103      	movs	r1, #3
 800093c:	400a      	ands	r2, r1
 800093e:	0092      	lsls	r2, r2, #2
 8000940:	4093      	lsls	r3, r2
 8000942:	693a      	ldr	r2, [r7, #16]
 8000944:	4313      	orrs	r3, r2
 8000946:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000948:	4935      	ldr	r1, [pc, #212]	; (8000a20 <HAL_GPIO_Init+0x2d4>)
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	089b      	lsrs	r3, r3, #2
 800094e:	3302      	adds	r3, #2
 8000950:	009b      	lsls	r3, r3, #2
 8000952:	693a      	ldr	r2, [r7, #16]
 8000954:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000956:	4b36      	ldr	r3, [pc, #216]	; (8000a30 <HAL_GPIO_Init+0x2e4>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	43da      	mvns	r2, r3
 8000960:	693b      	ldr	r3, [r7, #16]
 8000962:	4013      	ands	r3, r2
 8000964:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	685a      	ldr	r2, [r3, #4]
 800096a:	2380      	movs	r3, #128	; 0x80
 800096c:	025b      	lsls	r3, r3, #9
 800096e:	4013      	ands	r3, r2
 8000970:	d003      	beq.n	800097a <HAL_GPIO_Init+0x22e>
        {
          SET_BIT(temp, iocurrent); 
 8000972:	693a      	ldr	r2, [r7, #16]
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	4313      	orrs	r3, r2
 8000978:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800097a:	4b2d      	ldr	r3, [pc, #180]	; (8000a30 <HAL_GPIO_Init+0x2e4>)
 800097c:	693a      	ldr	r2, [r7, #16]
 800097e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000980:	4b2b      	ldr	r3, [pc, #172]	; (8000a30 <HAL_GPIO_Init+0x2e4>)
 8000982:	685b      	ldr	r3, [r3, #4]
 8000984:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	43da      	mvns	r2, r3
 800098a:	693b      	ldr	r3, [r7, #16]
 800098c:	4013      	ands	r3, r2
 800098e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	685a      	ldr	r2, [r3, #4]
 8000994:	2380      	movs	r3, #128	; 0x80
 8000996:	029b      	lsls	r3, r3, #10
 8000998:	4013      	ands	r3, r2
 800099a:	d003      	beq.n	80009a4 <HAL_GPIO_Init+0x258>
        { 
          SET_BIT(temp, iocurrent); 
 800099c:	693a      	ldr	r2, [r7, #16]
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	4313      	orrs	r3, r2
 80009a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80009a4:	4b22      	ldr	r3, [pc, #136]	; (8000a30 <HAL_GPIO_Init+0x2e4>)
 80009a6:	693a      	ldr	r2, [r7, #16]
 80009a8:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80009aa:	4b21      	ldr	r3, [pc, #132]	; (8000a30 <HAL_GPIO_Init+0x2e4>)
 80009ac:	689b      	ldr	r3, [r3, #8]
 80009ae:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	43da      	mvns	r2, r3
 80009b4:	693b      	ldr	r3, [r7, #16]
 80009b6:	4013      	ands	r3, r2
 80009b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	685a      	ldr	r2, [r3, #4]
 80009be:	2380      	movs	r3, #128	; 0x80
 80009c0:	035b      	lsls	r3, r3, #13
 80009c2:	4013      	ands	r3, r2
 80009c4:	d003      	beq.n	80009ce <HAL_GPIO_Init+0x282>
        {
          SET_BIT(temp, iocurrent); 
 80009c6:	693a      	ldr	r2, [r7, #16]
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	4313      	orrs	r3, r2
 80009cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80009ce:	4b18      	ldr	r3, [pc, #96]	; (8000a30 <HAL_GPIO_Init+0x2e4>)
 80009d0:	693a      	ldr	r2, [r7, #16]
 80009d2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80009d4:	4b16      	ldr	r3, [pc, #88]	; (8000a30 <HAL_GPIO_Init+0x2e4>)
 80009d6:	68db      	ldr	r3, [r3, #12]
 80009d8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	43da      	mvns	r2, r3
 80009de:	693b      	ldr	r3, [r7, #16]
 80009e0:	4013      	ands	r3, r2
 80009e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	685a      	ldr	r2, [r3, #4]
 80009e8:	2380      	movs	r3, #128	; 0x80
 80009ea:	039b      	lsls	r3, r3, #14
 80009ec:	4013      	ands	r3, r2
 80009ee:	d003      	beq.n	80009f8 <HAL_GPIO_Init+0x2ac>
        {
          SET_BIT(temp, iocurrent); 
 80009f0:	693a      	ldr	r2, [r7, #16]
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	4313      	orrs	r3, r2
 80009f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80009f8:	4b0d      	ldr	r3, [pc, #52]	; (8000a30 <HAL_GPIO_Init+0x2e4>)
 80009fa:	693a      	ldr	r2, [r7, #16]
 80009fc:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 80009fe:	697b      	ldr	r3, [r7, #20]
 8000a00:	3301      	adds	r3, #1
 8000a02:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	681a      	ldr	r2, [r3, #0]
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	40da      	lsrs	r2, r3
 8000a0c:	1e13      	subs	r3, r2, #0
 8000a0e:	d000      	beq.n	8000a12 <HAL_GPIO_Init+0x2c6>
 8000a10:	e6a8      	b.n	8000764 <HAL_GPIO_Init+0x18>
  } 
}
 8000a12:	46c0      	nop			; (mov r8, r8)
 8000a14:	46bd      	mov	sp, r7
 8000a16:	b006      	add	sp, #24
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	46c0      	nop			; (mov r8, r8)
 8000a1c:	40021000 	.word	0x40021000
 8000a20:	40010000 	.word	0x40010000
 8000a24:	48000400 	.word	0x48000400
 8000a28:	48000800 	.word	0x48000800
 8000a2c:	48000c00 	.word	0x48000c00
 8000a30:	40010400 	.word	0x40010400

08000a34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
 8000a3c:	000a      	movs	r2, r1
 8000a3e:	1cbb      	adds	r3, r7, #2
 8000a40:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	691b      	ldr	r3, [r3, #16]
 8000a46:	1cba      	adds	r2, r7, #2
 8000a48:	8812      	ldrh	r2, [r2, #0]
 8000a4a:	4013      	ands	r3, r2
 8000a4c:	d004      	beq.n	8000a58 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8000a4e:	230f      	movs	r3, #15
 8000a50:	18fb      	adds	r3, r7, r3
 8000a52:	2201      	movs	r2, #1
 8000a54:	701a      	strb	r2, [r3, #0]
 8000a56:	e003      	b.n	8000a60 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000a58:	230f      	movs	r3, #15
 8000a5a:	18fb      	adds	r3, r7, r3
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8000a60:	230f      	movs	r3, #15
 8000a62:	18fb      	adds	r3, r7, r3
 8000a64:	781b      	ldrb	r3, [r3, #0]
  }
 8000a66:	0018      	movs	r0, r3
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	b004      	add	sp, #16
 8000a6c:	bd80      	pop	{r7, pc}
	...

08000a70 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	0002      	movs	r2, r0
 8000a78:	1dbb      	adds	r3, r7, #6
 8000a7a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8000a7c:	4b09      	ldr	r3, [pc, #36]	; (8000aa4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000a7e:	695b      	ldr	r3, [r3, #20]
 8000a80:	1dba      	adds	r2, r7, #6
 8000a82:	8812      	ldrh	r2, [r2, #0]
 8000a84:	4013      	ands	r3, r2
 8000a86:	d008      	beq.n	8000a9a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000a88:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000a8a:	1dba      	adds	r2, r7, #6
 8000a8c:	8812      	ldrh	r2, [r2, #0]
 8000a8e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000a90:	1dbb      	adds	r3, r7, #6
 8000a92:	881b      	ldrh	r3, [r3, #0]
 8000a94:	0018      	movs	r0, r3
 8000a96:	f003 fa29 	bl	8003eec <HAL_GPIO_EXTI_Callback>
  }
}
 8000a9a:	46c0      	nop			; (mov r8, r8)
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	b002      	add	sp, #8
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	46c0      	nop			; (mov r8, r8)
 8000aa4:	40010400 	.word	0x40010400

08000aa8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b086      	sub	sp, #24
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	2201      	movs	r2, #1
 8000aba:	4013      	ands	r3, r2
 8000abc:	d100      	bne.n	8000ac0 <HAL_RCC_OscConfig+0x18>
 8000abe:	e08d      	b.n	8000bdc <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000ac0:	4bc5      	ldr	r3, [pc, #788]	; (8000dd8 <HAL_RCC_OscConfig+0x330>)
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	220c      	movs	r2, #12
 8000ac6:	4013      	ands	r3, r2
 8000ac8:	2b04      	cmp	r3, #4
 8000aca:	d00e      	beq.n	8000aea <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000acc:	4bc2      	ldr	r3, [pc, #776]	; (8000dd8 <HAL_RCC_OscConfig+0x330>)
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	220c      	movs	r2, #12
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	2b08      	cmp	r3, #8
 8000ad6:	d116      	bne.n	8000b06 <HAL_RCC_OscConfig+0x5e>
 8000ad8:	4bbf      	ldr	r3, [pc, #764]	; (8000dd8 <HAL_RCC_OscConfig+0x330>)
 8000ada:	685a      	ldr	r2, [r3, #4]
 8000adc:	23c0      	movs	r3, #192	; 0xc0
 8000ade:	025b      	lsls	r3, r3, #9
 8000ae0:	401a      	ands	r2, r3
 8000ae2:	2380      	movs	r3, #128	; 0x80
 8000ae4:	025b      	lsls	r3, r3, #9
 8000ae6:	429a      	cmp	r2, r3
 8000ae8:	d10d      	bne.n	8000b06 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000aea:	4bbb      	ldr	r3, [pc, #748]	; (8000dd8 <HAL_RCC_OscConfig+0x330>)
 8000aec:	681a      	ldr	r2, [r3, #0]
 8000aee:	2380      	movs	r3, #128	; 0x80
 8000af0:	029b      	lsls	r3, r3, #10
 8000af2:	4013      	ands	r3, r2
 8000af4:	d100      	bne.n	8000af8 <HAL_RCC_OscConfig+0x50>
 8000af6:	e070      	b.n	8000bda <HAL_RCC_OscConfig+0x132>
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d000      	beq.n	8000b02 <HAL_RCC_OscConfig+0x5a>
 8000b00:	e06b      	b.n	8000bda <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8000b02:	2301      	movs	r3, #1
 8000b04:	e2ba      	b.n	800107c <HAL_RCC_OscConfig+0x5d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	2b01      	cmp	r3, #1
 8000b0c:	d107      	bne.n	8000b1e <HAL_RCC_OscConfig+0x76>
 8000b0e:	4bb2      	ldr	r3, [pc, #712]	; (8000dd8 <HAL_RCC_OscConfig+0x330>)
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	4bb1      	ldr	r3, [pc, #708]	; (8000dd8 <HAL_RCC_OscConfig+0x330>)
 8000b14:	2180      	movs	r1, #128	; 0x80
 8000b16:	0249      	lsls	r1, r1, #9
 8000b18:	430a      	orrs	r2, r1
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	e02f      	b.n	8000b7e <HAL_RCC_OscConfig+0xd6>
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d10c      	bne.n	8000b40 <HAL_RCC_OscConfig+0x98>
 8000b26:	4bac      	ldr	r3, [pc, #688]	; (8000dd8 <HAL_RCC_OscConfig+0x330>)
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	4bab      	ldr	r3, [pc, #684]	; (8000dd8 <HAL_RCC_OscConfig+0x330>)
 8000b2c:	49ab      	ldr	r1, [pc, #684]	; (8000ddc <HAL_RCC_OscConfig+0x334>)
 8000b2e:	400a      	ands	r2, r1
 8000b30:	601a      	str	r2, [r3, #0]
 8000b32:	4ba9      	ldr	r3, [pc, #676]	; (8000dd8 <HAL_RCC_OscConfig+0x330>)
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	4ba8      	ldr	r3, [pc, #672]	; (8000dd8 <HAL_RCC_OscConfig+0x330>)
 8000b38:	49a9      	ldr	r1, [pc, #676]	; (8000de0 <HAL_RCC_OscConfig+0x338>)
 8000b3a:	400a      	ands	r2, r1
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	e01e      	b.n	8000b7e <HAL_RCC_OscConfig+0xd6>
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	685b      	ldr	r3, [r3, #4]
 8000b44:	2b05      	cmp	r3, #5
 8000b46:	d10e      	bne.n	8000b66 <HAL_RCC_OscConfig+0xbe>
 8000b48:	4ba3      	ldr	r3, [pc, #652]	; (8000dd8 <HAL_RCC_OscConfig+0x330>)
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	4ba2      	ldr	r3, [pc, #648]	; (8000dd8 <HAL_RCC_OscConfig+0x330>)
 8000b4e:	2180      	movs	r1, #128	; 0x80
 8000b50:	02c9      	lsls	r1, r1, #11
 8000b52:	430a      	orrs	r2, r1
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	4ba0      	ldr	r3, [pc, #640]	; (8000dd8 <HAL_RCC_OscConfig+0x330>)
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	4b9f      	ldr	r3, [pc, #636]	; (8000dd8 <HAL_RCC_OscConfig+0x330>)
 8000b5c:	2180      	movs	r1, #128	; 0x80
 8000b5e:	0249      	lsls	r1, r1, #9
 8000b60:	430a      	orrs	r2, r1
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	e00b      	b.n	8000b7e <HAL_RCC_OscConfig+0xd6>
 8000b66:	4b9c      	ldr	r3, [pc, #624]	; (8000dd8 <HAL_RCC_OscConfig+0x330>)
 8000b68:	681a      	ldr	r2, [r3, #0]
 8000b6a:	4b9b      	ldr	r3, [pc, #620]	; (8000dd8 <HAL_RCC_OscConfig+0x330>)
 8000b6c:	499b      	ldr	r1, [pc, #620]	; (8000ddc <HAL_RCC_OscConfig+0x334>)
 8000b6e:	400a      	ands	r2, r1
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	4b99      	ldr	r3, [pc, #612]	; (8000dd8 <HAL_RCC_OscConfig+0x330>)
 8000b74:	681a      	ldr	r2, [r3, #0]
 8000b76:	4b98      	ldr	r3, [pc, #608]	; (8000dd8 <HAL_RCC_OscConfig+0x330>)
 8000b78:	4999      	ldr	r1, [pc, #612]	; (8000de0 <HAL_RCC_OscConfig+0x338>)
 8000b7a:	400a      	ands	r2, r1
 8000b7c:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	685b      	ldr	r3, [r3, #4]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d014      	beq.n	8000bb0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b86:	f7ff fc71 	bl	800046c <HAL_GetTick>
 8000b8a:	0003      	movs	r3, r0
 8000b8c:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b8e:	e008      	b.n	8000ba2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b90:	f7ff fc6c 	bl	800046c <HAL_GetTick>
 8000b94:	0002      	movs	r2, r0
 8000b96:	693b      	ldr	r3, [r7, #16]
 8000b98:	1ad3      	subs	r3, r2, r3
 8000b9a:	2b64      	cmp	r3, #100	; 0x64
 8000b9c:	d901      	bls.n	8000ba2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000b9e:	2303      	movs	r3, #3
 8000ba0:	e26c      	b.n	800107c <HAL_RCC_OscConfig+0x5d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ba2:	4b8d      	ldr	r3, [pc, #564]	; (8000dd8 <HAL_RCC_OscConfig+0x330>)
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	2380      	movs	r3, #128	; 0x80
 8000ba8:	029b      	lsls	r3, r3, #10
 8000baa:	4013      	ands	r3, r2
 8000bac:	d0f0      	beq.n	8000b90 <HAL_RCC_OscConfig+0xe8>
 8000bae:	e015      	b.n	8000bdc <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bb0:	f7ff fc5c 	bl	800046c <HAL_GetTick>
 8000bb4:	0003      	movs	r3, r0
 8000bb6:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bb8:	e008      	b.n	8000bcc <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bba:	f7ff fc57 	bl	800046c <HAL_GetTick>
 8000bbe:	0002      	movs	r2, r0
 8000bc0:	693b      	ldr	r3, [r7, #16]
 8000bc2:	1ad3      	subs	r3, r2, r3
 8000bc4:	2b64      	cmp	r3, #100	; 0x64
 8000bc6:	d901      	bls.n	8000bcc <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8000bc8:	2303      	movs	r3, #3
 8000bca:	e257      	b.n	800107c <HAL_RCC_OscConfig+0x5d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bcc:	4b82      	ldr	r3, [pc, #520]	; (8000dd8 <HAL_RCC_OscConfig+0x330>)
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	2380      	movs	r3, #128	; 0x80
 8000bd2:	029b      	lsls	r3, r3, #10
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	d1f0      	bne.n	8000bba <HAL_RCC_OscConfig+0x112>
 8000bd8:	e000      	b.n	8000bdc <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bda:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	2202      	movs	r2, #2
 8000be2:	4013      	ands	r3, r2
 8000be4:	d100      	bne.n	8000be8 <HAL_RCC_OscConfig+0x140>
 8000be6:	e06c      	b.n	8000cc2 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000be8:	4b7b      	ldr	r3, [pc, #492]	; (8000dd8 <HAL_RCC_OscConfig+0x330>)
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	220c      	movs	r2, #12
 8000bee:	4013      	ands	r3, r2
 8000bf0:	d00e      	beq.n	8000c10 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000bf2:	4b79      	ldr	r3, [pc, #484]	; (8000dd8 <HAL_RCC_OscConfig+0x330>)
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	220c      	movs	r2, #12
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	2b08      	cmp	r3, #8
 8000bfc:	d11f      	bne.n	8000c3e <HAL_RCC_OscConfig+0x196>
 8000bfe:	4b76      	ldr	r3, [pc, #472]	; (8000dd8 <HAL_RCC_OscConfig+0x330>)
 8000c00:	685a      	ldr	r2, [r3, #4]
 8000c02:	23c0      	movs	r3, #192	; 0xc0
 8000c04:	025b      	lsls	r3, r3, #9
 8000c06:	401a      	ands	r2, r3
 8000c08:	2380      	movs	r3, #128	; 0x80
 8000c0a:	021b      	lsls	r3, r3, #8
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	d116      	bne.n	8000c3e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c10:	4b71      	ldr	r3, [pc, #452]	; (8000dd8 <HAL_RCC_OscConfig+0x330>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	2202      	movs	r2, #2
 8000c16:	4013      	ands	r3, r2
 8000c18:	d005      	beq.n	8000c26 <HAL_RCC_OscConfig+0x17e>
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	68db      	ldr	r3, [r3, #12]
 8000c1e:	2b01      	cmp	r3, #1
 8000c20:	d001      	beq.n	8000c26 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8000c22:	2301      	movs	r3, #1
 8000c24:	e22a      	b.n	800107c <HAL_RCC_OscConfig+0x5d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c26:	4b6c      	ldr	r3, [pc, #432]	; (8000dd8 <HAL_RCC_OscConfig+0x330>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	22f8      	movs	r2, #248	; 0xf8
 8000c2c:	4393      	bics	r3, r2
 8000c2e:	0019      	movs	r1, r3
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	691b      	ldr	r3, [r3, #16]
 8000c34:	00da      	lsls	r2, r3, #3
 8000c36:	4b68      	ldr	r3, [pc, #416]	; (8000dd8 <HAL_RCC_OscConfig+0x330>)
 8000c38:	430a      	orrs	r2, r1
 8000c3a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c3c:	e041      	b.n	8000cc2 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	68db      	ldr	r3, [r3, #12]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d024      	beq.n	8000c90 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c46:	4b64      	ldr	r3, [pc, #400]	; (8000dd8 <HAL_RCC_OscConfig+0x330>)
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	4b63      	ldr	r3, [pc, #396]	; (8000dd8 <HAL_RCC_OscConfig+0x330>)
 8000c4c:	2101      	movs	r1, #1
 8000c4e:	430a      	orrs	r2, r1
 8000c50:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c52:	f7ff fc0b 	bl	800046c <HAL_GetTick>
 8000c56:	0003      	movs	r3, r0
 8000c58:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c5a:	e008      	b.n	8000c6e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c5c:	f7ff fc06 	bl	800046c <HAL_GetTick>
 8000c60:	0002      	movs	r2, r0
 8000c62:	693b      	ldr	r3, [r7, #16]
 8000c64:	1ad3      	subs	r3, r2, r3
 8000c66:	2b02      	cmp	r3, #2
 8000c68:	d901      	bls.n	8000c6e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8000c6a:	2303      	movs	r3, #3
 8000c6c:	e206      	b.n	800107c <HAL_RCC_OscConfig+0x5d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c6e:	4b5a      	ldr	r3, [pc, #360]	; (8000dd8 <HAL_RCC_OscConfig+0x330>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	2202      	movs	r2, #2
 8000c74:	4013      	ands	r3, r2
 8000c76:	d0f1      	beq.n	8000c5c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c78:	4b57      	ldr	r3, [pc, #348]	; (8000dd8 <HAL_RCC_OscConfig+0x330>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	22f8      	movs	r2, #248	; 0xf8
 8000c7e:	4393      	bics	r3, r2
 8000c80:	0019      	movs	r1, r3
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	691b      	ldr	r3, [r3, #16]
 8000c86:	00da      	lsls	r2, r3, #3
 8000c88:	4b53      	ldr	r3, [pc, #332]	; (8000dd8 <HAL_RCC_OscConfig+0x330>)
 8000c8a:	430a      	orrs	r2, r1
 8000c8c:	601a      	str	r2, [r3, #0]
 8000c8e:	e018      	b.n	8000cc2 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000c90:	4b51      	ldr	r3, [pc, #324]	; (8000dd8 <HAL_RCC_OscConfig+0x330>)
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	4b50      	ldr	r3, [pc, #320]	; (8000dd8 <HAL_RCC_OscConfig+0x330>)
 8000c96:	2101      	movs	r1, #1
 8000c98:	438a      	bics	r2, r1
 8000c9a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c9c:	f7ff fbe6 	bl	800046c <HAL_GetTick>
 8000ca0:	0003      	movs	r3, r0
 8000ca2:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ca4:	e008      	b.n	8000cb8 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ca6:	f7ff fbe1 	bl	800046c <HAL_GetTick>
 8000caa:	0002      	movs	r2, r0
 8000cac:	693b      	ldr	r3, [r7, #16]
 8000cae:	1ad3      	subs	r3, r2, r3
 8000cb0:	2b02      	cmp	r3, #2
 8000cb2:	d901      	bls.n	8000cb8 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	e1e1      	b.n	800107c <HAL_RCC_OscConfig+0x5d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cb8:	4b47      	ldr	r3, [pc, #284]	; (8000dd8 <HAL_RCC_OscConfig+0x330>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	2202      	movs	r2, #2
 8000cbe:	4013      	ands	r3, r2
 8000cc0:	d1f1      	bne.n	8000ca6 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	2208      	movs	r2, #8
 8000cc8:	4013      	ands	r3, r2
 8000cca:	d036      	beq.n	8000d3a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	69db      	ldr	r3, [r3, #28]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d019      	beq.n	8000d08 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000cd4:	4b40      	ldr	r3, [pc, #256]	; (8000dd8 <HAL_RCC_OscConfig+0x330>)
 8000cd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000cd8:	4b3f      	ldr	r3, [pc, #252]	; (8000dd8 <HAL_RCC_OscConfig+0x330>)
 8000cda:	2101      	movs	r1, #1
 8000cdc:	430a      	orrs	r2, r1
 8000cde:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ce0:	f7ff fbc4 	bl	800046c <HAL_GetTick>
 8000ce4:	0003      	movs	r3, r0
 8000ce6:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ce8:	e008      	b.n	8000cfc <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000cea:	f7ff fbbf 	bl	800046c <HAL_GetTick>
 8000cee:	0002      	movs	r2, r0
 8000cf0:	693b      	ldr	r3, [r7, #16]
 8000cf2:	1ad3      	subs	r3, r2, r3
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	d901      	bls.n	8000cfc <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8000cf8:	2303      	movs	r3, #3
 8000cfa:	e1bf      	b.n	800107c <HAL_RCC_OscConfig+0x5d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cfc:	4b36      	ldr	r3, [pc, #216]	; (8000dd8 <HAL_RCC_OscConfig+0x330>)
 8000cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d00:	2202      	movs	r2, #2
 8000d02:	4013      	ands	r3, r2
 8000d04:	d0f1      	beq.n	8000cea <HAL_RCC_OscConfig+0x242>
 8000d06:	e018      	b.n	8000d3a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d08:	4b33      	ldr	r3, [pc, #204]	; (8000dd8 <HAL_RCC_OscConfig+0x330>)
 8000d0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d0c:	4b32      	ldr	r3, [pc, #200]	; (8000dd8 <HAL_RCC_OscConfig+0x330>)
 8000d0e:	2101      	movs	r1, #1
 8000d10:	438a      	bics	r2, r1
 8000d12:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d14:	f7ff fbaa 	bl	800046c <HAL_GetTick>
 8000d18:	0003      	movs	r3, r0
 8000d1a:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d1c:	e008      	b.n	8000d30 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d1e:	f7ff fba5 	bl	800046c <HAL_GetTick>
 8000d22:	0002      	movs	r2, r0
 8000d24:	693b      	ldr	r3, [r7, #16]
 8000d26:	1ad3      	subs	r3, r2, r3
 8000d28:	2b02      	cmp	r3, #2
 8000d2a:	d901      	bls.n	8000d30 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8000d2c:	2303      	movs	r3, #3
 8000d2e:	e1a5      	b.n	800107c <HAL_RCC_OscConfig+0x5d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d30:	4b29      	ldr	r3, [pc, #164]	; (8000dd8 <HAL_RCC_OscConfig+0x330>)
 8000d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d34:	2202      	movs	r2, #2
 8000d36:	4013      	ands	r3, r2
 8000d38:	d1f1      	bne.n	8000d1e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	2204      	movs	r2, #4
 8000d40:	4013      	ands	r3, r2
 8000d42:	d100      	bne.n	8000d46 <HAL_RCC_OscConfig+0x29e>
 8000d44:	e0b6      	b.n	8000eb4 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d46:	2317      	movs	r3, #23
 8000d48:	18fb      	adds	r3, r7, r3
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d4e:	4b22      	ldr	r3, [pc, #136]	; (8000dd8 <HAL_RCC_OscConfig+0x330>)
 8000d50:	69da      	ldr	r2, [r3, #28]
 8000d52:	2380      	movs	r3, #128	; 0x80
 8000d54:	055b      	lsls	r3, r3, #21
 8000d56:	4013      	ands	r3, r2
 8000d58:	d111      	bne.n	8000d7e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d5a:	4b1f      	ldr	r3, [pc, #124]	; (8000dd8 <HAL_RCC_OscConfig+0x330>)
 8000d5c:	69da      	ldr	r2, [r3, #28]
 8000d5e:	4b1e      	ldr	r3, [pc, #120]	; (8000dd8 <HAL_RCC_OscConfig+0x330>)
 8000d60:	2180      	movs	r1, #128	; 0x80
 8000d62:	0549      	lsls	r1, r1, #21
 8000d64:	430a      	orrs	r2, r1
 8000d66:	61da      	str	r2, [r3, #28]
 8000d68:	4b1b      	ldr	r3, [pc, #108]	; (8000dd8 <HAL_RCC_OscConfig+0x330>)
 8000d6a:	69da      	ldr	r2, [r3, #28]
 8000d6c:	2380      	movs	r3, #128	; 0x80
 8000d6e:	055b      	lsls	r3, r3, #21
 8000d70:	4013      	ands	r3, r2
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000d76:	2317      	movs	r3, #23
 8000d78:	18fb      	adds	r3, r7, r3
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d7e:	4b19      	ldr	r3, [pc, #100]	; (8000de4 <HAL_RCC_OscConfig+0x33c>)
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	2380      	movs	r3, #128	; 0x80
 8000d84:	005b      	lsls	r3, r3, #1
 8000d86:	4013      	ands	r3, r2
 8000d88:	d11a      	bne.n	8000dc0 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d8a:	4b16      	ldr	r3, [pc, #88]	; (8000de4 <HAL_RCC_OscConfig+0x33c>)
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	4b15      	ldr	r3, [pc, #84]	; (8000de4 <HAL_RCC_OscConfig+0x33c>)
 8000d90:	2180      	movs	r1, #128	; 0x80
 8000d92:	0049      	lsls	r1, r1, #1
 8000d94:	430a      	orrs	r2, r1
 8000d96:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000d98:	f7ff fb68 	bl	800046c <HAL_GetTick>
 8000d9c:	0003      	movs	r3, r0
 8000d9e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000da0:	e008      	b.n	8000db4 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000da2:	f7ff fb63 	bl	800046c <HAL_GetTick>
 8000da6:	0002      	movs	r2, r0
 8000da8:	693b      	ldr	r3, [r7, #16]
 8000daa:	1ad3      	subs	r3, r2, r3
 8000dac:	2b64      	cmp	r3, #100	; 0x64
 8000dae:	d901      	bls.n	8000db4 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8000db0:	2303      	movs	r3, #3
 8000db2:	e163      	b.n	800107c <HAL_RCC_OscConfig+0x5d4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000db4:	4b0b      	ldr	r3, [pc, #44]	; (8000de4 <HAL_RCC_OscConfig+0x33c>)
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	2380      	movs	r3, #128	; 0x80
 8000dba:	005b      	lsls	r3, r3, #1
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	d0f0      	beq.n	8000da2 <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	689b      	ldr	r3, [r3, #8]
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d10f      	bne.n	8000de8 <HAL_RCC_OscConfig+0x340>
 8000dc8:	4b03      	ldr	r3, [pc, #12]	; (8000dd8 <HAL_RCC_OscConfig+0x330>)
 8000dca:	6a1a      	ldr	r2, [r3, #32]
 8000dcc:	4b02      	ldr	r3, [pc, #8]	; (8000dd8 <HAL_RCC_OscConfig+0x330>)
 8000dce:	2101      	movs	r1, #1
 8000dd0:	430a      	orrs	r2, r1
 8000dd2:	621a      	str	r2, [r3, #32]
 8000dd4:	e036      	b.n	8000e44 <HAL_RCC_OscConfig+0x39c>
 8000dd6:	46c0      	nop			; (mov r8, r8)
 8000dd8:	40021000 	.word	0x40021000
 8000ddc:	fffeffff 	.word	0xfffeffff
 8000de0:	fffbffff 	.word	0xfffbffff
 8000de4:	40007000 	.word	0x40007000
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	689b      	ldr	r3, [r3, #8]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d10c      	bne.n	8000e0a <HAL_RCC_OscConfig+0x362>
 8000df0:	4ba4      	ldr	r3, [pc, #656]	; (8001084 <HAL_RCC_OscConfig+0x5dc>)
 8000df2:	6a1a      	ldr	r2, [r3, #32]
 8000df4:	4ba3      	ldr	r3, [pc, #652]	; (8001084 <HAL_RCC_OscConfig+0x5dc>)
 8000df6:	2101      	movs	r1, #1
 8000df8:	438a      	bics	r2, r1
 8000dfa:	621a      	str	r2, [r3, #32]
 8000dfc:	4ba1      	ldr	r3, [pc, #644]	; (8001084 <HAL_RCC_OscConfig+0x5dc>)
 8000dfe:	6a1a      	ldr	r2, [r3, #32]
 8000e00:	4ba0      	ldr	r3, [pc, #640]	; (8001084 <HAL_RCC_OscConfig+0x5dc>)
 8000e02:	2104      	movs	r1, #4
 8000e04:	438a      	bics	r2, r1
 8000e06:	621a      	str	r2, [r3, #32]
 8000e08:	e01c      	b.n	8000e44 <HAL_RCC_OscConfig+0x39c>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	689b      	ldr	r3, [r3, #8]
 8000e0e:	2b05      	cmp	r3, #5
 8000e10:	d10c      	bne.n	8000e2c <HAL_RCC_OscConfig+0x384>
 8000e12:	4b9c      	ldr	r3, [pc, #624]	; (8001084 <HAL_RCC_OscConfig+0x5dc>)
 8000e14:	6a1a      	ldr	r2, [r3, #32]
 8000e16:	4b9b      	ldr	r3, [pc, #620]	; (8001084 <HAL_RCC_OscConfig+0x5dc>)
 8000e18:	2104      	movs	r1, #4
 8000e1a:	430a      	orrs	r2, r1
 8000e1c:	621a      	str	r2, [r3, #32]
 8000e1e:	4b99      	ldr	r3, [pc, #612]	; (8001084 <HAL_RCC_OscConfig+0x5dc>)
 8000e20:	6a1a      	ldr	r2, [r3, #32]
 8000e22:	4b98      	ldr	r3, [pc, #608]	; (8001084 <HAL_RCC_OscConfig+0x5dc>)
 8000e24:	2101      	movs	r1, #1
 8000e26:	430a      	orrs	r2, r1
 8000e28:	621a      	str	r2, [r3, #32]
 8000e2a:	e00b      	b.n	8000e44 <HAL_RCC_OscConfig+0x39c>
 8000e2c:	4b95      	ldr	r3, [pc, #596]	; (8001084 <HAL_RCC_OscConfig+0x5dc>)
 8000e2e:	6a1a      	ldr	r2, [r3, #32]
 8000e30:	4b94      	ldr	r3, [pc, #592]	; (8001084 <HAL_RCC_OscConfig+0x5dc>)
 8000e32:	2101      	movs	r1, #1
 8000e34:	438a      	bics	r2, r1
 8000e36:	621a      	str	r2, [r3, #32]
 8000e38:	4b92      	ldr	r3, [pc, #584]	; (8001084 <HAL_RCC_OscConfig+0x5dc>)
 8000e3a:	6a1a      	ldr	r2, [r3, #32]
 8000e3c:	4b91      	ldr	r3, [pc, #580]	; (8001084 <HAL_RCC_OscConfig+0x5dc>)
 8000e3e:	2104      	movs	r1, #4
 8000e40:	438a      	bics	r2, r1
 8000e42:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	689b      	ldr	r3, [r3, #8]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d014      	beq.n	8000e76 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e4c:	f7ff fb0e 	bl	800046c <HAL_GetTick>
 8000e50:	0003      	movs	r3, r0
 8000e52:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e54:	e009      	b.n	8000e6a <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e56:	f7ff fb09 	bl	800046c <HAL_GetTick>
 8000e5a:	0002      	movs	r2, r0
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	1ad3      	subs	r3, r2, r3
 8000e60:	4a89      	ldr	r2, [pc, #548]	; (8001088 <HAL_RCC_OscConfig+0x5e0>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d901      	bls.n	8000e6a <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8000e66:	2303      	movs	r3, #3
 8000e68:	e108      	b.n	800107c <HAL_RCC_OscConfig+0x5d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e6a:	4b86      	ldr	r3, [pc, #536]	; (8001084 <HAL_RCC_OscConfig+0x5dc>)
 8000e6c:	6a1b      	ldr	r3, [r3, #32]
 8000e6e:	2202      	movs	r2, #2
 8000e70:	4013      	ands	r3, r2
 8000e72:	d0f0      	beq.n	8000e56 <HAL_RCC_OscConfig+0x3ae>
 8000e74:	e013      	b.n	8000e9e <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e76:	f7ff faf9 	bl	800046c <HAL_GetTick>
 8000e7a:	0003      	movs	r3, r0
 8000e7c:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e7e:	e009      	b.n	8000e94 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e80:	f7ff faf4 	bl	800046c <HAL_GetTick>
 8000e84:	0002      	movs	r2, r0
 8000e86:	693b      	ldr	r3, [r7, #16]
 8000e88:	1ad3      	subs	r3, r2, r3
 8000e8a:	4a7f      	ldr	r2, [pc, #508]	; (8001088 <HAL_RCC_OscConfig+0x5e0>)
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d901      	bls.n	8000e94 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8000e90:	2303      	movs	r3, #3
 8000e92:	e0f3      	b.n	800107c <HAL_RCC_OscConfig+0x5d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e94:	4b7b      	ldr	r3, [pc, #492]	; (8001084 <HAL_RCC_OscConfig+0x5dc>)
 8000e96:	6a1b      	ldr	r3, [r3, #32]
 8000e98:	2202      	movs	r2, #2
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	d1f0      	bne.n	8000e80 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000e9e:	2317      	movs	r3, #23
 8000ea0:	18fb      	adds	r3, r7, r3
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	d105      	bne.n	8000eb4 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ea8:	4b76      	ldr	r3, [pc, #472]	; (8001084 <HAL_RCC_OscConfig+0x5dc>)
 8000eaa:	69da      	ldr	r2, [r3, #28]
 8000eac:	4b75      	ldr	r3, [pc, #468]	; (8001084 <HAL_RCC_OscConfig+0x5dc>)
 8000eae:	4977      	ldr	r1, [pc, #476]	; (800108c <HAL_RCC_OscConfig+0x5e4>)
 8000eb0:	400a      	ands	r2, r1
 8000eb2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	2210      	movs	r2, #16
 8000eba:	4013      	ands	r3, r2
 8000ebc:	d063      	beq.n	8000f86 <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	695b      	ldr	r3, [r3, #20]
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	d12a      	bne.n	8000f1c <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000ec6:	4b6f      	ldr	r3, [pc, #444]	; (8001084 <HAL_RCC_OscConfig+0x5dc>)
 8000ec8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000eca:	4b6e      	ldr	r3, [pc, #440]	; (8001084 <HAL_RCC_OscConfig+0x5dc>)
 8000ecc:	2104      	movs	r1, #4
 8000ece:	430a      	orrs	r2, r1
 8000ed0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8000ed2:	4b6c      	ldr	r3, [pc, #432]	; (8001084 <HAL_RCC_OscConfig+0x5dc>)
 8000ed4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ed6:	4b6b      	ldr	r3, [pc, #428]	; (8001084 <HAL_RCC_OscConfig+0x5dc>)
 8000ed8:	2101      	movs	r1, #1
 8000eda:	430a      	orrs	r2, r1
 8000edc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ede:	f7ff fac5 	bl	800046c <HAL_GetTick>
 8000ee2:	0003      	movs	r3, r0
 8000ee4:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000ee6:	e008      	b.n	8000efa <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000ee8:	f7ff fac0 	bl	800046c <HAL_GetTick>
 8000eec:	0002      	movs	r2, r0
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	2b02      	cmp	r3, #2
 8000ef4:	d901      	bls.n	8000efa <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 8000ef6:	2303      	movs	r3, #3
 8000ef8:	e0c0      	b.n	800107c <HAL_RCC_OscConfig+0x5d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000efa:	4b62      	ldr	r3, [pc, #392]	; (8001084 <HAL_RCC_OscConfig+0x5dc>)
 8000efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000efe:	2202      	movs	r2, #2
 8000f00:	4013      	ands	r3, r2
 8000f02:	d0f1      	beq.n	8000ee8 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000f04:	4b5f      	ldr	r3, [pc, #380]	; (8001084 <HAL_RCC_OscConfig+0x5dc>)
 8000f06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f08:	22f8      	movs	r2, #248	; 0xf8
 8000f0a:	4393      	bics	r3, r2
 8000f0c:	0019      	movs	r1, r3
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	699b      	ldr	r3, [r3, #24]
 8000f12:	00da      	lsls	r2, r3, #3
 8000f14:	4b5b      	ldr	r3, [pc, #364]	; (8001084 <HAL_RCC_OscConfig+0x5dc>)
 8000f16:	430a      	orrs	r2, r1
 8000f18:	635a      	str	r2, [r3, #52]	; 0x34
 8000f1a:	e034      	b.n	8000f86 <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	695b      	ldr	r3, [r3, #20]
 8000f20:	3305      	adds	r3, #5
 8000f22:	d111      	bne.n	8000f48 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8000f24:	4b57      	ldr	r3, [pc, #348]	; (8001084 <HAL_RCC_OscConfig+0x5dc>)
 8000f26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f28:	4b56      	ldr	r3, [pc, #344]	; (8001084 <HAL_RCC_OscConfig+0x5dc>)
 8000f2a:	2104      	movs	r1, #4
 8000f2c:	438a      	bics	r2, r1
 8000f2e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000f30:	4b54      	ldr	r3, [pc, #336]	; (8001084 <HAL_RCC_OscConfig+0x5dc>)
 8000f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f34:	22f8      	movs	r2, #248	; 0xf8
 8000f36:	4393      	bics	r3, r2
 8000f38:	0019      	movs	r1, r3
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	699b      	ldr	r3, [r3, #24]
 8000f3e:	00da      	lsls	r2, r3, #3
 8000f40:	4b50      	ldr	r3, [pc, #320]	; (8001084 <HAL_RCC_OscConfig+0x5dc>)
 8000f42:	430a      	orrs	r2, r1
 8000f44:	635a      	str	r2, [r3, #52]	; 0x34
 8000f46:	e01e      	b.n	8000f86 <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000f48:	4b4e      	ldr	r3, [pc, #312]	; (8001084 <HAL_RCC_OscConfig+0x5dc>)
 8000f4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f4c:	4b4d      	ldr	r3, [pc, #308]	; (8001084 <HAL_RCC_OscConfig+0x5dc>)
 8000f4e:	2104      	movs	r1, #4
 8000f50:	430a      	orrs	r2, r1
 8000f52:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8000f54:	4b4b      	ldr	r3, [pc, #300]	; (8001084 <HAL_RCC_OscConfig+0x5dc>)
 8000f56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f58:	4b4a      	ldr	r3, [pc, #296]	; (8001084 <HAL_RCC_OscConfig+0x5dc>)
 8000f5a:	2101      	movs	r1, #1
 8000f5c:	438a      	bics	r2, r1
 8000f5e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f60:	f7ff fa84 	bl	800046c <HAL_GetTick>
 8000f64:	0003      	movs	r3, r0
 8000f66:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000f68:	e008      	b.n	8000f7c <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000f6a:	f7ff fa7f 	bl	800046c <HAL_GetTick>
 8000f6e:	0002      	movs	r2, r0
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	1ad3      	subs	r3, r2, r3
 8000f74:	2b02      	cmp	r3, #2
 8000f76:	d901      	bls.n	8000f7c <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	e07f      	b.n	800107c <HAL_RCC_OscConfig+0x5d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000f7c:	4b41      	ldr	r3, [pc, #260]	; (8001084 <HAL_RCC_OscConfig+0x5dc>)
 8000f7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f80:	2202      	movs	r2, #2
 8000f82:	4013      	ands	r3, r2
 8000f84:	d1f1      	bne.n	8000f6a <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6a1b      	ldr	r3, [r3, #32]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d100      	bne.n	8000f90 <HAL_RCC_OscConfig+0x4e8>
 8000f8e:	e074      	b.n	800107a <HAL_RCC_OscConfig+0x5d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f90:	4b3c      	ldr	r3, [pc, #240]	; (8001084 <HAL_RCC_OscConfig+0x5dc>)
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	220c      	movs	r2, #12
 8000f96:	4013      	ands	r3, r2
 8000f98:	2b08      	cmp	r3, #8
 8000f9a:	d100      	bne.n	8000f9e <HAL_RCC_OscConfig+0x4f6>
 8000f9c:	e06b      	b.n	8001076 <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6a1b      	ldr	r3, [r3, #32]
 8000fa2:	2b02      	cmp	r3, #2
 8000fa4:	d14c      	bne.n	8001040 <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fa6:	4b37      	ldr	r3, [pc, #220]	; (8001084 <HAL_RCC_OscConfig+0x5dc>)
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	4b36      	ldr	r3, [pc, #216]	; (8001084 <HAL_RCC_OscConfig+0x5dc>)
 8000fac:	4938      	ldr	r1, [pc, #224]	; (8001090 <HAL_RCC_OscConfig+0x5e8>)
 8000fae:	400a      	ands	r2, r1
 8000fb0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fb2:	f7ff fa5b 	bl	800046c <HAL_GetTick>
 8000fb6:	0003      	movs	r3, r0
 8000fb8:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fba:	e008      	b.n	8000fce <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fbc:	f7ff fa56 	bl	800046c <HAL_GetTick>
 8000fc0:	0002      	movs	r2, r0
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	2b02      	cmp	r3, #2
 8000fc8:	d901      	bls.n	8000fce <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	e056      	b.n	800107c <HAL_RCC_OscConfig+0x5d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fce:	4b2d      	ldr	r3, [pc, #180]	; (8001084 <HAL_RCC_OscConfig+0x5dc>)
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	2380      	movs	r3, #128	; 0x80
 8000fd4:	049b      	lsls	r3, r3, #18
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	d1f0      	bne.n	8000fbc <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000fda:	4b2a      	ldr	r3, [pc, #168]	; (8001084 <HAL_RCC_OscConfig+0x5dc>)
 8000fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fde:	220f      	movs	r2, #15
 8000fe0:	4393      	bics	r3, r2
 8000fe2:	0019      	movs	r1, r3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fe8:	4b26      	ldr	r3, [pc, #152]	; (8001084 <HAL_RCC_OscConfig+0x5dc>)
 8000fea:	430a      	orrs	r2, r1
 8000fec:	62da      	str	r2, [r3, #44]	; 0x2c
 8000fee:	4b25      	ldr	r3, [pc, #148]	; (8001084 <HAL_RCC_OscConfig+0x5dc>)
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	4a28      	ldr	r2, [pc, #160]	; (8001094 <HAL_RCC_OscConfig+0x5ec>)
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	0019      	movs	r1, r3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001000:	431a      	orrs	r2, r3
 8001002:	4b20      	ldr	r3, [pc, #128]	; (8001084 <HAL_RCC_OscConfig+0x5dc>)
 8001004:	430a      	orrs	r2, r1
 8001006:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001008:	4b1e      	ldr	r3, [pc, #120]	; (8001084 <HAL_RCC_OscConfig+0x5dc>)
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	4b1d      	ldr	r3, [pc, #116]	; (8001084 <HAL_RCC_OscConfig+0x5dc>)
 800100e:	2180      	movs	r1, #128	; 0x80
 8001010:	0449      	lsls	r1, r1, #17
 8001012:	430a      	orrs	r2, r1
 8001014:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001016:	f7ff fa29 	bl	800046c <HAL_GetTick>
 800101a:	0003      	movs	r3, r0
 800101c:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800101e:	e008      	b.n	8001032 <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001020:	f7ff fa24 	bl	800046c <HAL_GetTick>
 8001024:	0002      	movs	r2, r0
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	2b02      	cmp	r3, #2
 800102c:	d901      	bls.n	8001032 <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 800102e:	2303      	movs	r3, #3
 8001030:	e024      	b.n	800107c <HAL_RCC_OscConfig+0x5d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001032:	4b14      	ldr	r3, [pc, #80]	; (8001084 <HAL_RCC_OscConfig+0x5dc>)
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	2380      	movs	r3, #128	; 0x80
 8001038:	049b      	lsls	r3, r3, #18
 800103a:	4013      	ands	r3, r2
 800103c:	d0f0      	beq.n	8001020 <HAL_RCC_OscConfig+0x578>
 800103e:	e01c      	b.n	800107a <HAL_RCC_OscConfig+0x5d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001040:	4b10      	ldr	r3, [pc, #64]	; (8001084 <HAL_RCC_OscConfig+0x5dc>)
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	4b0f      	ldr	r3, [pc, #60]	; (8001084 <HAL_RCC_OscConfig+0x5dc>)
 8001046:	4912      	ldr	r1, [pc, #72]	; (8001090 <HAL_RCC_OscConfig+0x5e8>)
 8001048:	400a      	ands	r2, r1
 800104a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800104c:	f7ff fa0e 	bl	800046c <HAL_GetTick>
 8001050:	0003      	movs	r3, r0
 8001052:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001054:	e008      	b.n	8001068 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001056:	f7ff fa09 	bl	800046c <HAL_GetTick>
 800105a:	0002      	movs	r2, r0
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	1ad3      	subs	r3, r2, r3
 8001060:	2b02      	cmp	r3, #2
 8001062:	d901      	bls.n	8001068 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8001064:	2303      	movs	r3, #3
 8001066:	e009      	b.n	800107c <HAL_RCC_OscConfig+0x5d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001068:	4b06      	ldr	r3, [pc, #24]	; (8001084 <HAL_RCC_OscConfig+0x5dc>)
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	2380      	movs	r3, #128	; 0x80
 800106e:	049b      	lsls	r3, r3, #18
 8001070:	4013      	ands	r3, r2
 8001072:	d1f0      	bne.n	8001056 <HAL_RCC_OscConfig+0x5ae>
 8001074:	e001      	b.n	800107a <HAL_RCC_OscConfig+0x5d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e000      	b.n	800107c <HAL_RCC_OscConfig+0x5d4>
    }
  }
  
  return HAL_OK;
 800107a:	2300      	movs	r3, #0
}
 800107c:	0018      	movs	r0, r3
 800107e:	46bd      	mov	sp, r7
 8001080:	b006      	add	sp, #24
 8001082:	bd80      	pop	{r7, pc}
 8001084:	40021000 	.word	0x40021000
 8001088:	00001388 	.word	0x00001388
 800108c:	efffffff 	.word	0xefffffff
 8001090:	feffffff 	.word	0xfeffffff
 8001094:	ffc27fff 	.word	0xffc27fff

08001098 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80010a2:	2300      	movs	r3, #0
 80010a4:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80010a6:	4b6a      	ldr	r3, [pc, #424]	; (8001250 <HAL_RCC_ClockConfig+0x1b8>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	2201      	movs	r2, #1
 80010ac:	4013      	ands	r3, r2
 80010ae:	683a      	ldr	r2, [r7, #0]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d911      	bls.n	80010d8 <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010b4:	4b66      	ldr	r3, [pc, #408]	; (8001250 <HAL_RCC_ClockConfig+0x1b8>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2201      	movs	r2, #1
 80010ba:	4393      	bics	r3, r2
 80010bc:	0019      	movs	r1, r3
 80010be:	4b64      	ldr	r3, [pc, #400]	; (8001250 <HAL_RCC_ClockConfig+0x1b8>)
 80010c0:	683a      	ldr	r2, [r7, #0]
 80010c2:	430a      	orrs	r2, r1
 80010c4:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80010c6:	4b62      	ldr	r3, [pc, #392]	; (8001250 <HAL_RCC_ClockConfig+0x1b8>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	2201      	movs	r2, #1
 80010cc:	4013      	ands	r3, r2
 80010ce:	683a      	ldr	r2, [r7, #0]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d001      	beq.n	80010d8 <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 80010d4:	2301      	movs	r3, #1
 80010d6:	e0b6      	b.n	8001246 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2202      	movs	r2, #2
 80010de:	4013      	ands	r3, r2
 80010e0:	d009      	beq.n	80010f6 <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010e2:	4b5c      	ldr	r3, [pc, #368]	; (8001254 <HAL_RCC_ClockConfig+0x1bc>)
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	22f0      	movs	r2, #240	; 0xf0
 80010e8:	4393      	bics	r3, r2
 80010ea:	0019      	movs	r1, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	689a      	ldr	r2, [r3, #8]
 80010f0:	4b58      	ldr	r3, [pc, #352]	; (8001254 <HAL_RCC_ClockConfig+0x1bc>)
 80010f2:	430a      	orrs	r2, r1
 80010f4:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	2201      	movs	r2, #1
 80010fc:	4013      	ands	r3, r2
 80010fe:	d100      	bne.n	8001102 <HAL_RCC_ClockConfig+0x6a>
 8001100:	e067      	b.n	80011d2 <HAL_RCC_ClockConfig+0x13a>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	2b01      	cmp	r3, #1
 8001108:	d107      	bne.n	800111a <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800110a:	4b52      	ldr	r3, [pc, #328]	; (8001254 <HAL_RCC_ClockConfig+0x1bc>)
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	2380      	movs	r3, #128	; 0x80
 8001110:	029b      	lsls	r3, r3, #10
 8001112:	4013      	ands	r3, r2
 8001114:	d114      	bne.n	8001140 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	e095      	b.n	8001246 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	2b02      	cmp	r3, #2
 8001120:	d107      	bne.n	8001132 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001122:	4b4c      	ldr	r3, [pc, #304]	; (8001254 <HAL_RCC_ClockConfig+0x1bc>)
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	2380      	movs	r3, #128	; 0x80
 8001128:	049b      	lsls	r3, r3, #18
 800112a:	4013      	ands	r3, r2
 800112c:	d108      	bne.n	8001140 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	e089      	b.n	8001246 <HAL_RCC_ClockConfig+0x1ae>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001132:	4b48      	ldr	r3, [pc, #288]	; (8001254 <HAL_RCC_ClockConfig+0x1bc>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	2202      	movs	r2, #2
 8001138:	4013      	ands	r3, r2
 800113a:	d101      	bne.n	8001140 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800113c:	2301      	movs	r3, #1
 800113e:	e082      	b.n	8001246 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001140:	4b44      	ldr	r3, [pc, #272]	; (8001254 <HAL_RCC_ClockConfig+0x1bc>)
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	2203      	movs	r2, #3
 8001146:	4393      	bics	r3, r2
 8001148:	0019      	movs	r1, r3
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	685a      	ldr	r2, [r3, #4]
 800114e:	4b41      	ldr	r3, [pc, #260]	; (8001254 <HAL_RCC_ClockConfig+0x1bc>)
 8001150:	430a      	orrs	r2, r1
 8001152:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001154:	f7ff f98a 	bl	800046c <HAL_GetTick>
 8001158:	0003      	movs	r3, r0
 800115a:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	2b01      	cmp	r3, #1
 8001162:	d111      	bne.n	8001188 <HAL_RCC_ClockConfig+0xf0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001164:	e009      	b.n	800117a <HAL_RCC_ClockConfig+0xe2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001166:	f7ff f981 	bl	800046c <HAL_GetTick>
 800116a:	0002      	movs	r2, r0
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	1ad3      	subs	r3, r2, r3
 8001170:	4a39      	ldr	r2, [pc, #228]	; (8001258 <HAL_RCC_ClockConfig+0x1c0>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d901      	bls.n	800117a <HAL_RCC_ClockConfig+0xe2>
        {
          return HAL_TIMEOUT;
 8001176:	2303      	movs	r3, #3
 8001178:	e065      	b.n	8001246 <HAL_RCC_ClockConfig+0x1ae>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800117a:	4b36      	ldr	r3, [pc, #216]	; (8001254 <HAL_RCC_ClockConfig+0x1bc>)
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	220c      	movs	r2, #12
 8001180:	4013      	ands	r3, r2
 8001182:	2b04      	cmp	r3, #4
 8001184:	d1ef      	bne.n	8001166 <HAL_RCC_ClockConfig+0xce>
 8001186:	e024      	b.n	80011d2 <HAL_RCC_ClockConfig+0x13a>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	2b02      	cmp	r3, #2
 800118e:	d11b      	bne.n	80011c8 <HAL_RCC_ClockConfig+0x130>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001190:	e009      	b.n	80011a6 <HAL_RCC_ClockConfig+0x10e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001192:	f7ff f96b 	bl	800046c <HAL_GetTick>
 8001196:	0002      	movs	r2, r0
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	1ad3      	subs	r3, r2, r3
 800119c:	4a2e      	ldr	r2, [pc, #184]	; (8001258 <HAL_RCC_ClockConfig+0x1c0>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d901      	bls.n	80011a6 <HAL_RCC_ClockConfig+0x10e>
        {
          return HAL_TIMEOUT;
 80011a2:	2303      	movs	r3, #3
 80011a4:	e04f      	b.n	8001246 <HAL_RCC_ClockConfig+0x1ae>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011a6:	4b2b      	ldr	r3, [pc, #172]	; (8001254 <HAL_RCC_ClockConfig+0x1bc>)
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	220c      	movs	r2, #12
 80011ac:	4013      	ands	r3, r2
 80011ae:	2b08      	cmp	r3, #8
 80011b0:	d1ef      	bne.n	8001192 <HAL_RCC_ClockConfig+0xfa>
 80011b2:	e00e      	b.n	80011d2 <HAL_RCC_ClockConfig+0x13a>
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011b4:	f7ff f95a 	bl	800046c <HAL_GetTick>
 80011b8:	0002      	movs	r2, r0
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	4a26      	ldr	r2, [pc, #152]	; (8001258 <HAL_RCC_ClockConfig+0x1c0>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d901      	bls.n	80011c8 <HAL_RCC_ClockConfig+0x130>
        {
          return HAL_TIMEOUT;
 80011c4:	2303      	movs	r3, #3
 80011c6:	e03e      	b.n	8001246 <HAL_RCC_ClockConfig+0x1ae>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80011c8:	4b22      	ldr	r3, [pc, #136]	; (8001254 <HAL_RCC_ClockConfig+0x1bc>)
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	220c      	movs	r2, #12
 80011ce:	4013      	ands	r3, r2
 80011d0:	d1f0      	bne.n	80011b4 <HAL_RCC_ClockConfig+0x11c>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80011d2:	4b1f      	ldr	r3, [pc, #124]	; (8001250 <HAL_RCC_ClockConfig+0x1b8>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	2201      	movs	r2, #1
 80011d8:	4013      	ands	r3, r2
 80011da:	683a      	ldr	r2, [r7, #0]
 80011dc:	429a      	cmp	r2, r3
 80011de:	d211      	bcs.n	8001204 <HAL_RCC_ClockConfig+0x16c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011e0:	4b1b      	ldr	r3, [pc, #108]	; (8001250 <HAL_RCC_ClockConfig+0x1b8>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2201      	movs	r2, #1
 80011e6:	4393      	bics	r3, r2
 80011e8:	0019      	movs	r1, r3
 80011ea:	4b19      	ldr	r3, [pc, #100]	; (8001250 <HAL_RCC_ClockConfig+0x1b8>)
 80011ec:	683a      	ldr	r2, [r7, #0]
 80011ee:	430a      	orrs	r2, r1
 80011f0:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80011f2:	4b17      	ldr	r3, [pc, #92]	; (8001250 <HAL_RCC_ClockConfig+0x1b8>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	2201      	movs	r2, #1
 80011f8:	4013      	ands	r3, r2
 80011fa:	683a      	ldr	r2, [r7, #0]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d001      	beq.n	8001204 <HAL_RCC_ClockConfig+0x16c>
    {
      return HAL_ERROR;
 8001200:	2301      	movs	r3, #1
 8001202:	e020      	b.n	8001246 <HAL_RCC_ClockConfig+0x1ae>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2204      	movs	r2, #4
 800120a:	4013      	ands	r3, r2
 800120c:	d009      	beq.n	8001222 <HAL_RCC_ClockConfig+0x18a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800120e:	4b11      	ldr	r3, [pc, #68]	; (8001254 <HAL_RCC_ClockConfig+0x1bc>)
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	4a12      	ldr	r2, [pc, #72]	; (800125c <HAL_RCC_ClockConfig+0x1c4>)
 8001214:	4013      	ands	r3, r2
 8001216:	0019      	movs	r1, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	68da      	ldr	r2, [r3, #12]
 800121c:	4b0d      	ldr	r3, [pc, #52]	; (8001254 <HAL_RCC_ClockConfig+0x1bc>)
 800121e:	430a      	orrs	r2, r1
 8001220:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001222:	f000 f821 	bl	8001268 <HAL_RCC_GetSysClockFreq>
 8001226:	0001      	movs	r1, r0
 8001228:	4b0a      	ldr	r3, [pc, #40]	; (8001254 <HAL_RCC_ClockConfig+0x1bc>)
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	091b      	lsrs	r3, r3, #4
 800122e:	220f      	movs	r2, #15
 8001230:	4013      	ands	r3, r2
 8001232:	4a0b      	ldr	r2, [pc, #44]	; (8001260 <HAL_RCC_ClockConfig+0x1c8>)
 8001234:	5cd3      	ldrb	r3, [r2, r3]
 8001236:	000a      	movs	r2, r1
 8001238:	40da      	lsrs	r2, r3
 800123a:	4b0a      	ldr	r3, [pc, #40]	; (8001264 <HAL_RCC_ClockConfig+0x1cc>)
 800123c:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800123e:	2000      	movs	r0, #0
 8001240:	f7ff f8ec 	bl	800041c <HAL_InitTick>
  
  return HAL_OK;
 8001244:	2300      	movs	r3, #0
}
 8001246:	0018      	movs	r0, r3
 8001248:	46bd      	mov	sp, r7
 800124a:	b004      	add	sp, #16
 800124c:	bd80      	pop	{r7, pc}
 800124e:	46c0      	nop			; (mov r8, r8)
 8001250:	40022000 	.word	0x40022000
 8001254:	40021000 	.word	0x40021000
 8001258:	00001388 	.word	0x00001388
 800125c:	fffff8ff 	.word	0xfffff8ff
 8001260:	08004798 	.word	0x08004798
 8001264:	20000000 	.word	0x20000000

08001268 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001268:	b590      	push	{r4, r7, lr}
 800126a:	b08f      	sub	sp, #60	; 0x3c
 800126c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800126e:	2314      	movs	r3, #20
 8001270:	18fb      	adds	r3, r7, r3
 8001272:	4a2c      	ldr	r2, [pc, #176]	; (8001324 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001274:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001276:	c313      	stmia	r3!, {r0, r1, r4}
 8001278:	6812      	ldr	r2, [r2, #0]
 800127a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800127c:	1d3b      	adds	r3, r7, #4
 800127e:	4a2a      	ldr	r2, [pc, #168]	; (8001328 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001280:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001282:	c313      	stmia	r3!, {r0, r1, r4}
 8001284:	6812      	ldr	r2, [r2, #0]
 8001286:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001288:	2300      	movs	r3, #0
 800128a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800128c:	2300      	movs	r3, #0
 800128e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001290:	2300      	movs	r3, #0
 8001292:	637b      	str	r3, [r7, #52]	; 0x34
 8001294:	2300      	movs	r3, #0
 8001296:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001298:	2300      	movs	r3, #0
 800129a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800129c:	4b23      	ldr	r3, [pc, #140]	; (800132c <HAL_RCC_GetSysClockFreq+0xc4>)
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80012a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012a4:	220c      	movs	r2, #12
 80012a6:	4013      	ands	r3, r2
 80012a8:	2b04      	cmp	r3, #4
 80012aa:	d002      	beq.n	80012b2 <HAL_RCC_GetSysClockFreq+0x4a>
 80012ac:	2b08      	cmp	r3, #8
 80012ae:	d003      	beq.n	80012b8 <HAL_RCC_GetSysClockFreq+0x50>
 80012b0:	e02f      	b.n	8001312 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80012b2:	4b1f      	ldr	r3, [pc, #124]	; (8001330 <HAL_RCC_GetSysClockFreq+0xc8>)
 80012b4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80012b6:	e02f      	b.n	8001318 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80012b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012ba:	0c9b      	lsrs	r3, r3, #18
 80012bc:	220f      	movs	r2, #15
 80012be:	4013      	ands	r3, r2
 80012c0:	2214      	movs	r2, #20
 80012c2:	18ba      	adds	r2, r7, r2
 80012c4:	5cd3      	ldrb	r3, [r2, r3]
 80012c6:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80012c8:	4b18      	ldr	r3, [pc, #96]	; (800132c <HAL_RCC_GetSysClockFreq+0xc4>)
 80012ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012cc:	220f      	movs	r2, #15
 80012ce:	4013      	ands	r3, r2
 80012d0:	1d3a      	adds	r2, r7, #4
 80012d2:	5cd3      	ldrb	r3, [r2, r3]
 80012d4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80012d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012d8:	23c0      	movs	r3, #192	; 0xc0
 80012da:	025b      	lsls	r3, r3, #9
 80012dc:	401a      	ands	r2, r3
 80012de:	2380      	movs	r3, #128	; 0x80
 80012e0:	025b      	lsls	r3, r3, #9
 80012e2:	429a      	cmp	r2, r3
 80012e4:	d109      	bne.n	80012fa <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80012e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80012e8:	4811      	ldr	r0, [pc, #68]	; (8001330 <HAL_RCC_GetSysClockFreq+0xc8>)
 80012ea:	f7fe ff0d 	bl	8000108 <__udivsi3>
 80012ee:	0003      	movs	r3, r0
 80012f0:	001a      	movs	r2, r3
 80012f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f4:	4353      	muls	r3, r2
 80012f6:	637b      	str	r3, [r7, #52]	; 0x34
 80012f8:	e008      	b.n	800130c <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 80012fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80012fc:	480c      	ldr	r0, [pc, #48]	; (8001330 <HAL_RCC_GetSysClockFreq+0xc8>)
 80012fe:	f7fe ff03 	bl	8000108 <__udivsi3>
 8001302:	0003      	movs	r3, r0
 8001304:	001a      	movs	r2, r3
 8001306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001308:	4353      	muls	r3, r2
 800130a:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
#endif
      }
      sysclockfreq = pllclk;
 800130c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800130e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001310:	e002      	b.n	8001318 <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001312:	4b07      	ldr	r3, [pc, #28]	; (8001330 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001314:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001316:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800131a:	0018      	movs	r0, r3
 800131c:	46bd      	mov	sp, r7
 800131e:	b00f      	add	sp, #60	; 0x3c
 8001320:	bd90      	pop	{r4, r7, pc}
 8001322:	46c0      	nop			; (mov r8, r8)
 8001324:	08004744 	.word	0x08004744
 8001328:	08004754 	.word	0x08004754
 800132c:	40021000 	.word	0x40021000
 8001330:	007a1200 	.word	0x007a1200

08001334 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001338:	4b02      	ldr	r3, [pc, #8]	; (8001344 <HAL_RCC_GetHCLKFreq+0x10>)
 800133a:	681b      	ldr	r3, [r3, #0]
}
 800133c:	0018      	movs	r0, r3
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	46c0      	nop			; (mov r8, r8)
 8001344:	20000000 	.word	0x20000000

08001348 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800134c:	f7ff fff2 	bl	8001334 <HAL_RCC_GetHCLKFreq>
 8001350:	0001      	movs	r1, r0
 8001352:	4b06      	ldr	r3, [pc, #24]	; (800136c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	0a1b      	lsrs	r3, r3, #8
 8001358:	2207      	movs	r2, #7
 800135a:	4013      	ands	r3, r2
 800135c:	4a04      	ldr	r2, [pc, #16]	; (8001370 <HAL_RCC_GetPCLK1Freq+0x28>)
 800135e:	5cd3      	ldrb	r3, [r2, r3]
 8001360:	40d9      	lsrs	r1, r3
 8001362:	000b      	movs	r3, r1
}    
 8001364:	0018      	movs	r0, r3
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	46c0      	nop			; (mov r8, r8)
 800136c:	40021000 	.word	0x40021000
 8001370:	080047a8 	.word	0x080047a8

08001374 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b086      	sub	sp, #24
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800137c:	2300      	movs	r3, #0
 800137e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001380:	2300      	movs	r3, #0
 8001382:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	2380      	movs	r3, #128	; 0x80
 800138a:	025b      	lsls	r3, r3, #9
 800138c:	4013      	ands	r3, r2
 800138e:	d100      	bne.n	8001392 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001390:	e08f      	b.n	80014b2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001392:	2317      	movs	r3, #23
 8001394:	18fb      	adds	r3, r7, r3
 8001396:	2200      	movs	r2, #0
 8001398:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800139a:	4b5f      	ldr	r3, [pc, #380]	; (8001518 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800139c:	69da      	ldr	r2, [r3, #28]
 800139e:	2380      	movs	r3, #128	; 0x80
 80013a0:	055b      	lsls	r3, r3, #21
 80013a2:	4013      	ands	r3, r2
 80013a4:	d111      	bne.n	80013ca <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80013a6:	4b5c      	ldr	r3, [pc, #368]	; (8001518 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80013a8:	69da      	ldr	r2, [r3, #28]
 80013aa:	4b5b      	ldr	r3, [pc, #364]	; (8001518 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80013ac:	2180      	movs	r1, #128	; 0x80
 80013ae:	0549      	lsls	r1, r1, #21
 80013b0:	430a      	orrs	r2, r1
 80013b2:	61da      	str	r2, [r3, #28]
 80013b4:	4b58      	ldr	r3, [pc, #352]	; (8001518 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80013b6:	69da      	ldr	r2, [r3, #28]
 80013b8:	2380      	movs	r3, #128	; 0x80
 80013ba:	055b      	lsls	r3, r3, #21
 80013bc:	4013      	ands	r3, r2
 80013be:	60bb      	str	r3, [r7, #8]
 80013c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013c2:	2317      	movs	r3, #23
 80013c4:	18fb      	adds	r3, r7, r3
 80013c6:	2201      	movs	r2, #1
 80013c8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ca:	4b54      	ldr	r3, [pc, #336]	; (800151c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	2380      	movs	r3, #128	; 0x80
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	4013      	ands	r3, r2
 80013d4:	d11a      	bne.n	800140c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013d6:	4b51      	ldr	r3, [pc, #324]	; (800151c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	4b50      	ldr	r3, [pc, #320]	; (800151c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80013dc:	2180      	movs	r1, #128	; 0x80
 80013de:	0049      	lsls	r1, r1, #1
 80013e0:	430a      	orrs	r2, r1
 80013e2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013e4:	f7ff f842 	bl	800046c <HAL_GetTick>
 80013e8:	0003      	movs	r3, r0
 80013ea:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ec:	e008      	b.n	8001400 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013ee:	f7ff f83d 	bl	800046c <HAL_GetTick>
 80013f2:	0002      	movs	r2, r0
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	2b64      	cmp	r3, #100	; 0x64
 80013fa:	d901      	bls.n	8001400 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 80013fc:	2303      	movs	r3, #3
 80013fe:	e087      	b.n	8001510 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001400:	4b46      	ldr	r3, [pc, #280]	; (800151c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	2380      	movs	r3, #128	; 0x80
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	4013      	ands	r3, r2
 800140a:	d0f0      	beq.n	80013ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800140c:	4b42      	ldr	r3, [pc, #264]	; (8001518 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800140e:	6a1a      	ldr	r2, [r3, #32]
 8001410:	23c0      	movs	r3, #192	; 0xc0
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	4013      	ands	r3, r2
 8001416:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d034      	beq.n	8001488 <HAL_RCCEx_PeriphCLKConfig+0x114>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	685a      	ldr	r2, [r3, #4]
 8001422:	23c0      	movs	r3, #192	; 0xc0
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	4013      	ands	r3, r2
 8001428:	68fa      	ldr	r2, [r7, #12]
 800142a:	429a      	cmp	r2, r3
 800142c:	d02c      	beq.n	8001488 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800142e:	4b3a      	ldr	r3, [pc, #232]	; (8001518 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001430:	6a1b      	ldr	r3, [r3, #32]
 8001432:	4a3b      	ldr	r2, [pc, #236]	; (8001520 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001434:	4013      	ands	r3, r2
 8001436:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001438:	4b37      	ldr	r3, [pc, #220]	; (8001518 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800143a:	6a1a      	ldr	r2, [r3, #32]
 800143c:	4b36      	ldr	r3, [pc, #216]	; (8001518 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800143e:	2180      	movs	r1, #128	; 0x80
 8001440:	0249      	lsls	r1, r1, #9
 8001442:	430a      	orrs	r2, r1
 8001444:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001446:	4b34      	ldr	r3, [pc, #208]	; (8001518 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001448:	6a1a      	ldr	r2, [r3, #32]
 800144a:	4b33      	ldr	r3, [pc, #204]	; (8001518 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800144c:	4935      	ldr	r1, [pc, #212]	; (8001524 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800144e:	400a      	ands	r2, r1
 8001450:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001452:	4b31      	ldr	r3, [pc, #196]	; (8001518 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001454:	68fa      	ldr	r2, [r7, #12]
 8001456:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	2201      	movs	r2, #1
 800145c:	4013      	ands	r3, r2
 800145e:	d013      	beq.n	8001488 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001460:	f7ff f804 	bl	800046c <HAL_GetTick>
 8001464:	0003      	movs	r3, r0
 8001466:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001468:	e009      	b.n	800147e <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800146a:	f7fe ffff 	bl	800046c <HAL_GetTick>
 800146e:	0002      	movs	r2, r0
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	4a2c      	ldr	r2, [pc, #176]	; (8001528 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d901      	bls.n	800147e <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e048      	b.n	8001510 <HAL_RCCEx_PeriphCLKConfig+0x19c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800147e:	4b26      	ldr	r3, [pc, #152]	; (8001518 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001480:	6a1b      	ldr	r3, [r3, #32]
 8001482:	2202      	movs	r2, #2
 8001484:	4013      	ands	r3, r2
 8001486:	d0f0      	beq.n	800146a <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001488:	4b23      	ldr	r3, [pc, #140]	; (8001518 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800148a:	6a1b      	ldr	r3, [r3, #32]
 800148c:	4a24      	ldr	r2, [pc, #144]	; (8001520 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800148e:	4013      	ands	r3, r2
 8001490:	0019      	movs	r1, r3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685a      	ldr	r2, [r3, #4]
 8001496:	4b20      	ldr	r3, [pc, #128]	; (8001518 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001498:	430a      	orrs	r2, r1
 800149a:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800149c:	2317      	movs	r3, #23
 800149e:	18fb      	adds	r3, r7, r3
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d105      	bne.n	80014b2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014a6:	4b1c      	ldr	r3, [pc, #112]	; (8001518 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80014a8:	69da      	ldr	r2, [r3, #28]
 80014aa:	4b1b      	ldr	r3, [pc, #108]	; (8001518 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80014ac:	491f      	ldr	r1, [pc, #124]	; (800152c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80014ae:	400a      	ands	r2, r1
 80014b0:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	2201      	movs	r2, #1
 80014b8:	4013      	ands	r3, r2
 80014ba:	d009      	beq.n	80014d0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80014bc:	4b16      	ldr	r3, [pc, #88]	; (8001518 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80014be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c0:	2203      	movs	r2, #3
 80014c2:	4393      	bics	r3, r2
 80014c4:	0019      	movs	r1, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	689a      	ldr	r2, [r3, #8]
 80014ca:	4b13      	ldr	r3, [pc, #76]	; (8001518 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80014cc:	430a      	orrs	r2, r1
 80014ce:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2220      	movs	r2, #32
 80014d6:	4013      	ands	r3, r2
 80014d8:	d009      	beq.n	80014ee <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80014da:	4b0f      	ldr	r3, [pc, #60]	; (8001518 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	2210      	movs	r2, #16
 80014e0:	4393      	bics	r3, r2
 80014e2:	0019      	movs	r1, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	68da      	ldr	r2, [r3, #12]
 80014e8:	4b0b      	ldr	r3, [pc, #44]	; (8001518 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80014ea:	430a      	orrs	r2, r1
 80014ec:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	2380      	movs	r3, #128	; 0x80
 80014f4:	029b      	lsls	r3, r3, #10
 80014f6:	4013      	ands	r3, r2
 80014f8:	d009      	beq.n	800150e <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80014fa:	4b07      	ldr	r3, [pc, #28]	; (8001518 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	2280      	movs	r2, #128	; 0x80
 8001500:	4393      	bics	r3, r2
 8001502:	0019      	movs	r1, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	691a      	ldr	r2, [r3, #16]
 8001508:	4b03      	ldr	r3, [pc, #12]	; (8001518 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800150a:	430a      	orrs	r2, r1
 800150c:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800150e:	2300      	movs	r3, #0
}
 8001510:	0018      	movs	r0, r3
 8001512:	46bd      	mov	sp, r7
 8001514:	b006      	add	sp, #24
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40021000 	.word	0x40021000
 800151c:	40007000 	.word	0x40007000
 8001520:	fffffcff 	.word	0xfffffcff
 8001524:	fffeffff 	.word	0xfffeffff
 8001528:	00001388 	.word	0x00001388
 800152c:	efffffff 	.word	0xefffffff

08001530 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d101      	bne.n	8001542 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e047      	b.n	80015d2 <HAL_UART_Init+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2269      	movs	r2, #105	; 0x69
 8001546:	5c9b      	ldrb	r3, [r3, r2]
 8001548:	b2db      	uxtb	r3, r3
 800154a:	2b00      	cmp	r3, #0
 800154c:	d107      	bne.n	800155e <HAL_UART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2268      	movs	r2, #104	; 0x68
 8001552:	2100      	movs	r1, #0
 8001554:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	0018      	movs	r0, r3
 800155a:	f002 ff2f 	bl	80043bc <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2269      	movs	r2, #105	; 0x69
 8001562:	2124      	movs	r1, #36	; 0x24
 8001564:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2101      	movs	r1, #1
 8001572:	438a      	bics	r2, r1
 8001574:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	0018      	movs	r0, r3
 800157a:	f000 fa7d 	bl	8001a78 <UART_SetConfig>
 800157e:	0003      	movs	r3, r0
 8001580:	2b01      	cmp	r3, #1
 8001582:	d101      	bne.n	8001588 <HAL_UART_Init+0x58>
  {
    return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	e024      	b.n	80015d2 <HAL_UART_Init+0xa2>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800158c:	2b00      	cmp	r3, #0
 800158e:	d003      	beq.n	8001598 <HAL_UART_Init+0x68>
  {
    UART_AdvFeatureConfig(huart);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	0018      	movs	r0, r3
 8001594:	f000 fbe6 	bl	8001d64 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register. */
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	685a      	ldr	r2, [r3, #4]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	490e      	ldr	r1, [pc, #56]	; (80015dc <HAL_UART_Init+0xac>)
 80015a4:	400a      	ands	r2, r1
 80015a6:	605a      	str	r2, [r3, #4]
#endif
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	689a      	ldr	r2, [r3, #8]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2108      	movs	r1, #8
 80015b4:	438a      	bics	r2, r1
 80015b6:	609a      	str	r2, [r3, #8]
#endif
#endif

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	2101      	movs	r1, #1
 80015c4:	430a      	orrs	r2, r1
 80015c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	0018      	movs	r0, r3
 80015cc:	f000 fc7e 	bl	8001ecc <UART_CheckIdleState>
 80015d0:	0003      	movs	r3, r0
}
 80015d2:	0018      	movs	r0, r3
 80015d4:	46bd      	mov	sp, r7
 80015d6:	b002      	add	sp, #8
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	46c0      	nop			; (mov r8, r8)
 80015dc:	fffff7ff 	.word	0xfffff7ff

080015e0 <HAL_UART_Transmit>:
  *         (as sent data will be handled using u16 pointer cast). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b088      	sub	sp, #32
 80015e4:	af02      	add	r7, sp, #8
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	603b      	str	r3, [r7, #0]
 80015ec:	1dbb      	adds	r3, r7, #6
 80015ee:	801a      	strh	r2, [r3, #0]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 80015f0:	2300      	movs	r3, #0
 80015f2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	2269      	movs	r2, #105	; 0x69
 80015f8:	5c9b      	ldrb	r3, [r3, r2]
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	2b20      	cmp	r3, #32
 80015fe:	d000      	beq.n	8001602 <HAL_UART_Transmit+0x22>
 8001600:	e08c      	b.n	800171c <HAL_UART_Transmit+0x13c>
  {
    if((pData == NULL ) || (Size == 0U))
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d003      	beq.n	8001610 <HAL_UART_Transmit+0x30>
 8001608:	1dbb      	adds	r3, r7, #6
 800160a:	881b      	ldrh	r3, [r3, #0]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d101      	bne.n	8001614 <HAL_UART_Transmit+0x34>
    {
      return  HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e084      	b.n	800171e <HAL_UART_Transmit+0x13e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input paramter 
       should be aligned on a u16 frontier, as data to be filled into TDR will be 
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	689a      	ldr	r2, [r3, #8]
 8001618:	2380      	movs	r3, #128	; 0x80
 800161a:	015b      	lsls	r3, r3, #5
 800161c:	429a      	cmp	r2, r3
 800161e:	d109      	bne.n	8001634 <HAL_UART_Transmit+0x54>
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	691b      	ldr	r3, [r3, #16]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d105      	bne.n	8001634 <HAL_UART_Transmit+0x54>
    {
      if((((uint32_t)pData)&1U) != 0U)
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	2201      	movs	r2, #1
 800162c:	4013      	ands	r3, r2
 800162e:	d001      	beq.n	8001634 <HAL_UART_Transmit+0x54>
      {
        return  HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	e074      	b.n	800171e <HAL_UART_Transmit+0x13e>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	2268      	movs	r2, #104	; 0x68
 8001638:	5c9b      	ldrb	r3, [r3, r2]
 800163a:	2b01      	cmp	r3, #1
 800163c:	d101      	bne.n	8001642 <HAL_UART_Transmit+0x62>
 800163e:	2302      	movs	r3, #2
 8001640:	e06d      	b.n	800171e <HAL_UART_Transmit+0x13e>
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	2268      	movs	r2, #104	; 0x68
 8001646:	2101      	movs	r1, #1
 8001648:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	2200      	movs	r2, #0
 800164e:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	2269      	movs	r2, #105	; 0x69
 8001654:	2121      	movs	r1, #33	; 0x21
 8001656:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8001658:	f7fe ff08 	bl	800046c <HAL_GetTick>
 800165c:	0003      	movs	r3, r0
 800165e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize = Size;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	1dba      	adds	r2, r7, #6
 8001664:	2150      	movs	r1, #80	; 0x50
 8001666:	8812      	ldrh	r2, [r2, #0]
 8001668:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	1dba      	adds	r2, r7, #6
 800166e:	2152      	movs	r1, #82	; 0x52
 8001670:	8812      	ldrh	r2, [r2, #0]
 8001672:	525a      	strh	r2, [r3, r1]
    while(huart->TxXferCount > 0)
 8001674:	e035      	b.n	80016e2 <HAL_UART_Transmit+0x102>
    {
      huart->TxXferCount--;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	2252      	movs	r2, #82	; 0x52
 800167a:	5a9b      	ldrh	r3, [r3, r2]
 800167c:	b29b      	uxth	r3, r3
 800167e:	3b01      	subs	r3, #1
 8001680:	b299      	uxth	r1, r3
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	2252      	movs	r2, #82	; 0x52
 8001686:	5299      	strh	r1, [r3, r2]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001688:	697a      	ldr	r2, [r7, #20]
 800168a:	68f8      	ldr	r0, [r7, #12]
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	9300      	str	r3, [sp, #0]
 8001690:	0013      	movs	r3, r2
 8001692:	2200      	movs	r2, #0
 8001694:	2180      	movs	r1, #128	; 0x80
 8001696:	f000 fc31 	bl	8001efc <UART_WaitOnFlagUntilTimeout>
 800169a:	1e03      	subs	r3, r0, #0
 800169c:	d001      	beq.n	80016a2 <HAL_UART_Transmit+0xc2>
      {
        return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e03d      	b.n	800171e <HAL_UART_Transmit+0x13e>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	689a      	ldr	r2, [r3, #8]
 80016a6:	2380      	movs	r3, #128	; 0x80
 80016a8:	015b      	lsls	r3, r3, #5
 80016aa:	429a      	cmp	r2, r3
 80016ac:	d111      	bne.n	80016d2 <HAL_UART_Transmit+0xf2>
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	691b      	ldr	r3, [r3, #16]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d10d      	bne.n	80016d2 <HAL_UART_Transmit+0xf2>
      {
        tmp = (uint16_t*) pData;
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	881a      	ldrh	r2, [r3, #0]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	05d2      	lsls	r2, r2, #23
 80016c4:	0dd2      	lsrs	r2, r2, #23
 80016c6:	b292      	uxth	r2, r2
 80016c8:	851a      	strh	r2, [r3, #40]	; 0x28
        pData += 2;
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	3302      	adds	r3, #2
 80016ce:	60bb      	str	r3, [r7, #8]
 80016d0:	e007      	b.n	80016e2 <HAL_UART_Transmit+0x102>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	1c5a      	adds	r2, r3, #1
 80016d6:	60ba      	str	r2, [r7, #8]
 80016d8:	781a      	ldrb	r2, [r3, #0]
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	b292      	uxth	r2, r2
 80016e0:	851a      	strh	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0)
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	2252      	movs	r2, #82	; 0x52
 80016e6:	5a9b      	ldrh	r3, [r3, r2]
 80016e8:	b29b      	uxth	r3, r3
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d1c3      	bne.n	8001676 <HAL_UART_Transmit+0x96>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80016ee:	697a      	ldr	r2, [r7, #20]
 80016f0:	68f8      	ldr	r0, [r7, #12]
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	9300      	str	r3, [sp, #0]
 80016f6:	0013      	movs	r3, r2
 80016f8:	2200      	movs	r2, #0
 80016fa:	2140      	movs	r1, #64	; 0x40
 80016fc:	f000 fbfe 	bl	8001efc <UART_WaitOnFlagUntilTimeout>
 8001700:	1e03      	subs	r3, r0, #0
 8001702:	d001      	beq.n	8001708 <HAL_UART_Transmit+0x128>
    {
      return HAL_TIMEOUT;
 8001704:	2303      	movs	r3, #3
 8001706:	e00a      	b.n	800171e <HAL_UART_Transmit+0x13e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	2269      	movs	r2, #105	; 0x69
 800170c:	2120      	movs	r1, #32
 800170e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	2268      	movs	r2, #104	; 0x68
 8001714:	2100      	movs	r1, #0
 8001716:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001718:	2300      	movs	r3, #0
 800171a:	e000      	b.n	800171e <HAL_UART_Transmit+0x13e>
  }
  else
  {
    return HAL_BUSY;
 800171c:	2302      	movs	r3, #2
  }
}
 800171e:	0018      	movs	r0, r3
 8001720:	46bd      	mov	sp, r7
 8001722:	b006      	add	sp, #24
 8001724:	bd80      	pop	{r7, pc}
	...

08001728 <HAL_UART_Receive_IT>:
  *         (as received data will be handled using u16 pointer cast). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	60f8      	str	r0, [r7, #12]
 8001730:	60b9      	str	r1, [r7, #8]
 8001732:	1dbb      	adds	r3, r7, #6
 8001734:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	226a      	movs	r2, #106	; 0x6a
 800173a:	5c9b      	ldrb	r3, [r3, r2]
 800173c:	b2db      	uxtb	r3, r3
 800173e:	2b20      	cmp	r3, #32
 8001740:	d000      	beq.n	8001744 <HAL_UART_Receive_IT+0x1c>
 8001742:	e087      	b.n	8001854 <HAL_UART_Receive_IT+0x12c>
  {
    if((pData == NULL ) || (Size == 0U))
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d003      	beq.n	8001752 <HAL_UART_Receive_IT+0x2a>
 800174a:	1dbb      	adds	r3, r7, #6
 800174c:	881b      	ldrh	r3, [r3, #0]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d101      	bne.n	8001756 <HAL_UART_Receive_IT+0x2e>
    {
      return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e07f      	b.n	8001856 <HAL_UART_Receive_IT+0x12e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input paramter 
       should be aligned on a u16 frontier, as data to be received from RDR will be 
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	689a      	ldr	r2, [r3, #8]
 800175a:	2380      	movs	r3, #128	; 0x80
 800175c:	015b      	lsls	r3, r3, #5
 800175e:	429a      	cmp	r2, r3
 8001760:	d109      	bne.n	8001776 <HAL_UART_Receive_IT+0x4e>
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	691b      	ldr	r3, [r3, #16]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d105      	bne.n	8001776 <HAL_UART_Receive_IT+0x4e>
    {
      if((((uint32_t)pData)&1U) != 0U)
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	2201      	movs	r2, #1
 800176e:	4013      	ands	r3, r2
 8001770:	d001      	beq.n	8001776 <HAL_UART_Receive_IT+0x4e>
      {
        return  HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e06f      	b.n	8001856 <HAL_UART_Receive_IT+0x12e>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	2268      	movs	r2, #104	; 0x68
 800177a:	5c9b      	ldrb	r3, [r3, r2]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d101      	bne.n	8001784 <HAL_UART_Receive_IT+0x5c>
 8001780:	2302      	movs	r3, #2
 8001782:	e068      	b.n	8001856 <HAL_UART_Receive_IT+0x12e>
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	2268      	movs	r2, #104	; 0x68
 8001788:	2101      	movs	r1, #1
 800178a:	5499      	strb	r1, [r3, r2]

    huart->pRxBuffPtr = pData;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	68ba      	ldr	r2, [r7, #8]
 8001790:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	1dba      	adds	r2, r7, #6
 8001796:	2158      	movs	r1, #88	; 0x58
 8001798:	8812      	ldrh	r2, [r2, #0]
 800179a:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	1dba      	adds	r2, r7, #6
 80017a0:	215a      	movs	r1, #90	; 0x5a
 80017a2:	8812      	ldrh	r2, [r2, #0]
 80017a4:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	689a      	ldr	r2, [r3, #8]
 80017aa:	2380      	movs	r3, #128	; 0x80
 80017ac:	015b      	lsls	r3, r3, #5
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d10d      	bne.n	80017ce <HAL_UART_Receive_IT+0xa6>
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	691b      	ldr	r3, [r3, #16]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d104      	bne.n	80017c4 <HAL_UART_Receive_IT+0x9c>
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	225c      	movs	r2, #92	; 0x5c
 80017be:	4928      	ldr	r1, [pc, #160]	; (8001860 <HAL_UART_Receive_IT+0x138>)
 80017c0:	5299      	strh	r1, [r3, r2]
 80017c2:	e029      	b.n	8001818 <HAL_UART_Receive_IT+0xf0>
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	225c      	movs	r2, #92	; 0x5c
 80017c8:	21ff      	movs	r1, #255	; 0xff
 80017ca:	5299      	strh	r1, [r3, r2]
 80017cc:	e024      	b.n	8001818 <HAL_UART_Receive_IT+0xf0>
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d10d      	bne.n	80017f2 <HAL_UART_Receive_IT+0xca>
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	691b      	ldr	r3, [r3, #16]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d104      	bne.n	80017e8 <HAL_UART_Receive_IT+0xc0>
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	225c      	movs	r2, #92	; 0x5c
 80017e2:	21ff      	movs	r1, #255	; 0xff
 80017e4:	5299      	strh	r1, [r3, r2]
 80017e6:	e017      	b.n	8001818 <HAL_UART_Receive_IT+0xf0>
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	225c      	movs	r2, #92	; 0x5c
 80017ec:	217f      	movs	r1, #127	; 0x7f
 80017ee:	5299      	strh	r1, [r3, r2]
 80017f0:	e012      	b.n	8001818 <HAL_UART_Receive_IT+0xf0>
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	689a      	ldr	r2, [r3, #8]
 80017f6:	2380      	movs	r3, #128	; 0x80
 80017f8:	055b      	lsls	r3, r3, #21
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d10c      	bne.n	8001818 <HAL_UART_Receive_IT+0xf0>
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	691b      	ldr	r3, [r3, #16]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d104      	bne.n	8001810 <HAL_UART_Receive_IT+0xe8>
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	225c      	movs	r2, #92	; 0x5c
 800180a:	217f      	movs	r1, #127	; 0x7f
 800180c:	5299      	strh	r1, [r3, r2]
 800180e:	e003      	b.n	8001818 <HAL_UART_Receive_IT+0xf0>
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	225c      	movs	r2, #92	; 0x5c
 8001814:	213f      	movs	r1, #63	; 0x3f
 8001816:	5299      	strh	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2200      	movs	r2, #0
 800181c:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	226a      	movs	r2, #106	; 0x6a
 8001822:	2122      	movs	r1, #34	; 0x22
 8001824:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	2268      	movs	r2, #104	; 0x68
 800182a:	2100      	movs	r1, #0
 800182c:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	689a      	ldr	r2, [r3, #8]
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2101      	movs	r1, #1
 800183a:	430a      	orrs	r2, r1
 800183c:	609a      	str	r2, [r3, #8]

    /* Enable the UART Parity Error and Data Register not empty Interrupts */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2190      	movs	r1, #144	; 0x90
 800184a:	0049      	lsls	r1, r1, #1
 800184c:	430a      	orrs	r2, r1
 800184e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001850:	2300      	movs	r3, #0
 8001852:	e000      	b.n	8001856 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8001854:	2302      	movs	r3, #2
  }
}
 8001856:	0018      	movs	r0, r3
 8001858:	46bd      	mov	sp, r7
 800185a:	b004      	add	sp, #16
 800185c:	bd80      	pop	{r7, pc}
 800185e:	46c0      	nop			; (mov r8, r8)
 8001860:	000001ff 	.word	0x000001ff

08001864 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	69db      	ldr	r3, [r3, #28]
 8001872:	617b      	str	r3, [r7, #20]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	613b      	str	r3, [r7, #16]
  uint32_t cr3its;
  uint32_t errorflags;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	220f      	movs	r2, #15
 8001880:	4013      	ands	r3, r2
 8001882:	60fb      	str	r3, [r7, #12]
  if (errorflags == RESET)
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d10c      	bne.n	80018a4 <HAL_UART_IRQHandler+0x40>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	2220      	movs	r2, #32
 800188e:	4013      	ands	r3, r2
 8001890:	d008      	beq.n	80018a4 <HAL_UART_IRQHandler+0x40>
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	2220      	movs	r2, #32
 8001896:	4013      	ands	r3, r2
 8001898:	d004      	beq.n	80018a4 <HAL_UART_IRQHandler+0x40>
    {
      UART_Receive_IT(huart);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	0018      	movs	r0, r3
 800189e:	f000 fc1f 	bl	80020e0 <UART_Receive_IT>
      return;
 80018a2:	e0d3      	b.n	8001a4c <HAL_UART_IRQHandler+0x1e8>
    }
  }  

  /* If some errors occur */
  cr3its = READ_REG(huart->Instance->CR3);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	60bb      	str	r3, [r7, #8]
  if(   (errorflags != RESET)
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d100      	bne.n	80018b4 <HAL_UART_IRQHandler+0x50>
 80018b2:	e0af      	b.n	8001a14 <HAL_UART_IRQHandler+0x1b0>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	2201      	movs	r2, #1
 80018b8:	4013      	ands	r3, r2
 80018ba:	d105      	bne.n	80018c8 <HAL_UART_IRQHandler+0x64>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 80018bc:	693a      	ldr	r2, [r7, #16]
 80018be:	2390      	movs	r3, #144	; 0x90
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	4013      	ands	r3, r2
 80018c4:	d100      	bne.n	80018c8 <HAL_UART_IRQHandler+0x64>
 80018c6:	e0a5      	b.n	8001a14 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	2201      	movs	r2, #1
 80018cc:	4013      	ands	r3, r2
 80018ce:	d00e      	beq.n	80018ee <HAL_UART_IRQHandler+0x8a>
 80018d0:	693a      	ldr	r2, [r7, #16]
 80018d2:	2380      	movs	r3, #128	; 0x80
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	4013      	ands	r3, r2
 80018d8:	d009      	beq.n	80018ee <HAL_UART_IRQHandler+0x8a>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2201      	movs	r2, #1
 80018e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80018e6:	2201      	movs	r2, #1
 80018e8:	431a      	orrs	r2, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	2202      	movs	r2, #2
 80018f2:	4013      	ands	r3, r2
 80018f4:	d00d      	beq.n	8001912 <HAL_UART_IRQHandler+0xae>
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	2201      	movs	r2, #1
 80018fa:	4013      	ands	r3, r2
 80018fc:	d009      	beq.n	8001912 <HAL_UART_IRQHandler+0xae>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2202      	movs	r2, #2
 8001904:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800190a:	2204      	movs	r2, #4
 800190c:	431a      	orrs	r2, r3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	2204      	movs	r2, #4
 8001916:	4013      	ands	r3, r2
 8001918:	d00d      	beq.n	8001936 <HAL_UART_IRQHandler+0xd2>
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	2201      	movs	r2, #1
 800191e:	4013      	ands	r3, r2
 8001920:	d009      	beq.n	8001936 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	2204      	movs	r2, #4
 8001928:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800192e:	2202      	movs	r2, #2
 8001930:	431a      	orrs	r2, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	66da      	str	r2, [r3, #108]	; 0x6c
    }
    
    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	2208      	movs	r2, #8
 800193a:	4013      	ands	r3, r2
 800193c:	d011      	beq.n	8001962 <HAL_UART_IRQHandler+0xfe>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	2220      	movs	r2, #32
 8001942:	4013      	ands	r3, r2
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8001944:	d103      	bne.n	800194e <HAL_UART_IRQHandler+0xea>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	2201      	movs	r2, #1
 800194a:	4013      	ands	r3, r2
 800194c:	d009      	beq.n	8001962 <HAL_UART_IRQHandler+0xfe>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2208      	movs	r2, #8
 8001954:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800195a:	2208      	movs	r2, #8
 800195c:	431a      	orrs	r2, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001966:	2b00      	cmp	r3, #0
 8001968:	d100      	bne.n	800196c <HAL_UART_IRQHandler+0x108>
 800196a:	e06e      	b.n	8001a4a <HAL_UART_IRQHandler+0x1e6>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	2220      	movs	r2, #32
 8001970:	4013      	ands	r3, r2
 8001972:	d007      	beq.n	8001984 <HAL_UART_IRQHandler+0x120>
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	2220      	movs	r2, #32
 8001978:	4013      	ands	r3, r2
 800197a:	d003      	beq.n	8001984 <HAL_UART_IRQHandler+0x120>
      {
        UART_Receive_IT(huart);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	0018      	movs	r0, r3
 8001980:	f000 fbae 	bl	80020e0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001988:	2208      	movs	r2, #8
 800198a:	4013      	ands	r3, r2
 800198c:	d105      	bne.n	800199a <HAL_UART_IRQHandler+0x136>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	2240      	movs	r2, #64	; 0x40
 8001996:	4013      	ands	r3, r2
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8001998:	d032      	beq.n	8001a00 <HAL_UART_IRQHandler+0x19c>
      {  
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	0018      	movs	r0, r3
 800199e:	f000 faf9 	bl	8001f94 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	2240      	movs	r2, #64	; 0x40
 80019aa:	4013      	ands	r3, r2
 80019ac:	d023      	beq.n	80019f6 <HAL_UART_IRQHandler+0x192>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	689a      	ldr	r2, [r3, #8]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2140      	movs	r1, #64	; 0x40
 80019ba:	438a      	bics	r2, r1
 80019bc:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d012      	beq.n	80019ec <HAL_UART_IRQHandler+0x188>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80019ca:	4a22      	ldr	r2, [pc, #136]	; (8001a54 <HAL_UART_IRQHandler+0x1f0>)
 80019cc:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80019d2:	0018      	movs	r0, r3
 80019d4:	f7fe fe74 	bl	80006c0 <HAL_DMA_Abort_IT>
 80019d8:	1e03      	subs	r3, r0, #0
 80019da:	d019      	beq.n	8001a10 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80019e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80019e6:	0018      	movs	r0, r3
 80019e8:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80019ea:	e011      	b.n	8001a10 <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	0018      	movs	r0, r3
 80019f0:	f000 f83a 	bl	8001a68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80019f4:	e00c      	b.n	8001a10 <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	0018      	movs	r0, r3
 80019fa:	f000 f835 	bl	8001a68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80019fe:	e007      	b.n	8001a10 <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	0018      	movs	r0, r3
 8001a04:	f000 f830 	bl	8001a68 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	66da      	str	r2, [r3, #108]	; 0x6c
      }
    }
    return;
 8001a0e:	e01c      	b.n	8001a4a <HAL_UART_IRQHandler+0x1e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001a10:	46c0      	nop			; (mov r8, r8)
    return;
 8001a12:	e01a      	b.n	8001a4a <HAL_UART_IRQHandler+0x1e6>
    return;
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	2280      	movs	r2, #128	; 0x80
 8001a18:	4013      	ands	r3, r2
 8001a1a:	d008      	beq.n	8001a2e <HAL_UART_IRQHandler+0x1ca>
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	2280      	movs	r2, #128	; 0x80
 8001a20:	4013      	ands	r3, r2
 8001a22:	d004      	beq.n	8001a2e <HAL_UART_IRQHandler+0x1ca>
  {
    UART_Transmit_IT(huart);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	0018      	movs	r0, r3
 8001a28:	f000 fae9 	bl	8001ffe <UART_Transmit_IT>
    return;
 8001a2c:	e00e      	b.n	8001a4c <HAL_UART_IRQHandler+0x1e8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	2240      	movs	r2, #64	; 0x40
 8001a32:	4013      	ands	r3, r2
 8001a34:	d00a      	beq.n	8001a4c <HAL_UART_IRQHandler+0x1e8>
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	2240      	movs	r2, #64	; 0x40
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	d006      	beq.n	8001a4c <HAL_UART_IRQHandler+0x1e8>
  {
    UART_EndTransmit_IT(huart);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	0018      	movs	r0, r3
 8001a42:	f000 fb33 	bl	80020ac <UART_EndTransmit_IT>
    return;
 8001a46:	46c0      	nop			; (mov r8, r8)
 8001a48:	e000      	b.n	8001a4c <HAL_UART_IRQHandler+0x1e8>
    return;
 8001a4a:	46c0      	nop			; (mov r8, r8)
  }

}
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	b006      	add	sp, #24
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	46c0      	nop			; (mov r8, r8)
 8001a54:	08001fd1 	.word	0x08001fd1

08001a58 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8001a60:	46c0      	nop			; (mov r8, r8)
 8001a62:	46bd      	mov	sp, r7
 8001a64:	b002      	add	sp, #8
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <HAL_UART_ErrorCallback>:
  * @brief UART error callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8001a70:	46c0      	nop			; (mov r8, r8)
 8001a72:	46bd      	mov	sp, r7
 8001a74:	b002      	add	sp, #8
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001a78:	b590      	push	{r4, r7, lr}
 8001a7a:	b087      	sub	sp, #28
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8001a80:	2300      	movs	r3, #0
 8001a82:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8001a84:	2317      	movs	r3, #23
 8001a86:	18fb      	adds	r3, r7, r3
 8001a88:	2210      	movs	r2, #16
 8001a8a:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp                    = 0x0000U;
 8001a8c:	230a      	movs	r3, #10
 8001a8e:	18fb      	adds	r3, r7, r3
 8001a90:	2200      	movs	r2, #0
 8001a92:	801a      	strh	r2, [r3, #0]
  uint16_t usartdiv                   = 0x0000U;
 8001a94:	2314      	movs	r3, #20
 8001a96:	18fb      	adds	r3, r7, r3
 8001a98:	2200      	movs	r2, #0
 8001a9a:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001a9c:	2313      	movs	r3, #19
 8001a9e:	18fb      	adds	r3, r7, r3
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	701a      	strb	r2, [r3, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	689a      	ldr	r2, [r3, #8]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	691b      	ldr	r3, [r3, #16]
 8001aac:	431a      	orrs	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	695b      	ldr	r3, [r3, #20]
 8001ab2:	431a      	orrs	r2, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	69db      	ldr	r3, [r3, #28]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4aa0      	ldr	r2, [pc, #640]	; (8001d44 <UART_SetConfig+0x2cc>)
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	0019      	movs	r1, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	68fa      	ldr	r2, [r7, #12]
 8001ace:	430a      	orrs	r2, r1
 8001ad0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	4a9b      	ldr	r2, [pc, #620]	; (8001d48 <UART_SetConfig+0x2d0>)
 8001ada:	4013      	ands	r3, r2
 8001adc:	0019      	movs	r1, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	68da      	ldr	r2, [r3, #12]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	430a      	orrs	r2, r1
 8001ae8:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	699a      	ldr	r2, [r3, #24]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6a1b      	ldr	r3, [r3, #32]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	4a93      	ldr	r2, [pc, #588]	; (8001d4c <UART_SetConfig+0x2d4>)
 8001afe:	4013      	ands	r3, r2
 8001b00:	0019      	movs	r1, r3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	68fa      	ldr	r2, [r7, #12]
 8001b08:	430a      	orrs	r2, r1
 8001b0a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a8f      	ldr	r2, [pc, #572]	; (8001d50 <UART_SetConfig+0x2d8>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d125      	bne.n	8001b62 <UART_SetConfig+0xea>
 8001b16:	4b8f      	ldr	r3, [pc, #572]	; (8001d54 <UART_SetConfig+0x2dc>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	2203      	movs	r2, #3
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d00f      	beq.n	8001b42 <UART_SetConfig+0xca>
 8001b22:	d304      	bcc.n	8001b2e <UART_SetConfig+0xb6>
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d011      	beq.n	8001b4c <UART_SetConfig+0xd4>
 8001b28:	2b03      	cmp	r3, #3
 8001b2a:	d005      	beq.n	8001b38 <UART_SetConfig+0xc0>
 8001b2c:	e013      	b.n	8001b56 <UART_SetConfig+0xde>
 8001b2e:	2317      	movs	r3, #23
 8001b30:	18fb      	adds	r3, r7, r3
 8001b32:	2200      	movs	r2, #0
 8001b34:	701a      	strb	r2, [r3, #0]
 8001b36:	e022      	b.n	8001b7e <UART_SetConfig+0x106>
 8001b38:	2317      	movs	r3, #23
 8001b3a:	18fb      	adds	r3, r7, r3
 8001b3c:	2202      	movs	r2, #2
 8001b3e:	701a      	strb	r2, [r3, #0]
 8001b40:	e01d      	b.n	8001b7e <UART_SetConfig+0x106>
 8001b42:	2317      	movs	r3, #23
 8001b44:	18fb      	adds	r3, r7, r3
 8001b46:	2204      	movs	r2, #4
 8001b48:	701a      	strb	r2, [r3, #0]
 8001b4a:	e018      	b.n	8001b7e <UART_SetConfig+0x106>
 8001b4c:	2317      	movs	r3, #23
 8001b4e:	18fb      	adds	r3, r7, r3
 8001b50:	2208      	movs	r2, #8
 8001b52:	701a      	strb	r2, [r3, #0]
 8001b54:	e013      	b.n	8001b7e <UART_SetConfig+0x106>
 8001b56:	2317      	movs	r3, #23
 8001b58:	18fb      	adds	r3, r7, r3
 8001b5a:	2210      	movs	r2, #16
 8001b5c:	701a      	strb	r2, [r3, #0]
 8001b5e:	46c0      	nop			; (mov r8, r8)
 8001b60:	e00d      	b.n	8001b7e <UART_SetConfig+0x106>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a7c      	ldr	r2, [pc, #496]	; (8001d58 <UART_SetConfig+0x2e0>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d104      	bne.n	8001b76 <UART_SetConfig+0xfe>
 8001b6c:	2317      	movs	r3, #23
 8001b6e:	18fb      	adds	r3, r7, r3
 8001b70:	2200      	movs	r2, #0
 8001b72:	701a      	strb	r2, [r3, #0]
 8001b74:	e003      	b.n	8001b7e <UART_SetConfig+0x106>
 8001b76:	2317      	movs	r3, #23
 8001b78:	18fb      	adds	r3, r7, r3
 8001b7a:	2210      	movs	r2, #16
 8001b7c:	701a      	strb	r2, [r3, #0]
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	69da      	ldr	r2, [r3, #28]
 8001b82:	2380      	movs	r3, #128	; 0x80
 8001b84:	021b      	lsls	r3, r3, #8
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d000      	beq.n	8001b8c <UART_SetConfig+0x114>
 8001b8a:	e077      	b.n	8001c7c <UART_SetConfig+0x204>
  {
    switch (clocksource)
 8001b8c:	2317      	movs	r3, #23
 8001b8e:	18fb      	adds	r3, r7, r3
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d01c      	beq.n	8001bd0 <UART_SetConfig+0x158>
 8001b96:	dc02      	bgt.n	8001b9e <UART_SetConfig+0x126>
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d005      	beq.n	8001ba8 <UART_SetConfig+0x130>
 8001b9c:	e04f      	b.n	8001c3e <UART_SetConfig+0x1c6>
 8001b9e:	2b04      	cmp	r3, #4
 8001ba0:	d027      	beq.n	8001bf2 <UART_SetConfig+0x17a>
 8001ba2:	2b08      	cmp	r3, #8
 8001ba4:	d039      	beq.n	8001c1a <UART_SetConfig+0x1a2>
 8001ba6:	e04a      	b.n	8001c3e <UART_SetConfig+0x1c6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001ba8:	f7ff fbce 	bl	8001348 <HAL_RCC_GetPCLK1Freq>
 8001bac:	0003      	movs	r3, r0
 8001bae:	005a      	lsls	r2, r3, #1
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	085b      	lsrs	r3, r3, #1
 8001bb6:	18d2      	adds	r2, r2, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	0019      	movs	r1, r3
 8001bbe:	0010      	movs	r0, r2
 8001bc0:	f7fe faa2 	bl	8000108 <__udivsi3>
 8001bc4:	0003      	movs	r3, r0
 8001bc6:	001a      	movs	r2, r3
 8001bc8:	2314      	movs	r3, #20
 8001bca:	18fb      	adds	r3, r7, r3
 8001bcc:	801a      	strh	r2, [r3, #0]
        break;
 8001bce:	e03b      	b.n	8001c48 <UART_SetConfig+0x1d0>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	085b      	lsrs	r3, r3, #1
 8001bd6:	4a61      	ldr	r2, [pc, #388]	; (8001d5c <UART_SetConfig+0x2e4>)
 8001bd8:	189a      	adds	r2, r3, r2
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	0019      	movs	r1, r3
 8001be0:	0010      	movs	r0, r2
 8001be2:	f7fe fa91 	bl	8000108 <__udivsi3>
 8001be6:	0003      	movs	r3, r0
 8001be8:	001a      	movs	r2, r3
 8001bea:	2314      	movs	r3, #20
 8001bec:	18fb      	adds	r3, r7, r3
 8001bee:	801a      	strh	r2, [r3, #0]
        break;
 8001bf0:	e02a      	b.n	8001c48 <UART_SetConfig+0x1d0>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001bf2:	f7ff fb39 	bl	8001268 <HAL_RCC_GetSysClockFreq>
 8001bf6:	0003      	movs	r3, r0
 8001bf8:	005a      	lsls	r2, r3, #1
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	085b      	lsrs	r3, r3, #1
 8001c00:	18d2      	adds	r2, r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	0019      	movs	r1, r3
 8001c08:	0010      	movs	r0, r2
 8001c0a:	f7fe fa7d 	bl	8000108 <__udivsi3>
 8001c0e:	0003      	movs	r3, r0
 8001c10:	001a      	movs	r2, r3
 8001c12:	2314      	movs	r3, #20
 8001c14:	18fb      	adds	r3, r7, r3
 8001c16:	801a      	strh	r2, [r3, #0]
        break;
 8001c18:	e016      	b.n	8001c48 <UART_SetConfig+0x1d0>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	085b      	lsrs	r3, r3, #1
 8001c20:	2280      	movs	r2, #128	; 0x80
 8001c22:	0252      	lsls	r2, r2, #9
 8001c24:	189a      	adds	r2, r3, r2
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	0019      	movs	r1, r3
 8001c2c:	0010      	movs	r0, r2
 8001c2e:	f7fe fa6b 	bl	8000108 <__udivsi3>
 8001c32:	0003      	movs	r3, r0
 8001c34:	001a      	movs	r2, r3
 8001c36:	2314      	movs	r3, #20
 8001c38:	18fb      	adds	r3, r7, r3
 8001c3a:	801a      	strh	r2, [r3, #0]
        break;
 8001c3c:	e004      	b.n	8001c48 <UART_SetConfig+0x1d0>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8001c3e:	2313      	movs	r3, #19
 8001c40:	18fb      	adds	r3, r7, r3
 8001c42:	2201      	movs	r2, #1
 8001c44:	701a      	strb	r2, [r3, #0]
        break;
 8001c46:	46c0      	nop			; (mov r8, r8)
    }

    brrtemp = usartdiv & 0xFFF0U;
 8001c48:	200a      	movs	r0, #10
 8001c4a:	183b      	adds	r3, r7, r0
 8001c4c:	2414      	movs	r4, #20
 8001c4e:	193a      	adds	r2, r7, r4
 8001c50:	8812      	ldrh	r2, [r2, #0]
 8001c52:	210f      	movs	r1, #15
 8001c54:	438a      	bics	r2, r1
 8001c56:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001c58:	193b      	adds	r3, r7, r4
 8001c5a:	881b      	ldrh	r3, [r3, #0]
 8001c5c:	105b      	asrs	r3, r3, #1
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	2207      	movs	r2, #7
 8001c62:	4013      	ands	r3, r2
 8001c64:	b299      	uxth	r1, r3
 8001c66:	183b      	adds	r3, r7, r0
 8001c68:	183a      	adds	r2, r7, r0
 8001c6a:	8812      	ldrh	r2, [r2, #0]
 8001c6c:	430a      	orrs	r2, r1
 8001c6e:	801a      	strh	r2, [r3, #0]
    huart->Instance->BRR = brrtemp;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	183a      	adds	r2, r7, r0
 8001c76:	8812      	ldrh	r2, [r2, #0]
 8001c78:	60da      	str	r2, [r3, #12]
 8001c7a:	e05b      	b.n	8001d34 <UART_SetConfig+0x2bc>
  }
  else
  {
    switch (clocksource)
 8001c7c:	2317      	movs	r3, #23
 8001c7e:	18fb      	adds	r3, r7, r3
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d01b      	beq.n	8001cbe <UART_SetConfig+0x246>
 8001c86:	dc02      	bgt.n	8001c8e <UART_SetConfig+0x216>
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d005      	beq.n	8001c98 <UART_SetConfig+0x220>
 8001c8c:	e04d      	b.n	8001d2a <UART_SetConfig+0x2b2>
 8001c8e:	2b04      	cmp	r3, #4
 8001c90:	d026      	beq.n	8001ce0 <UART_SetConfig+0x268>
 8001c92:	2b08      	cmp	r3, #8
 8001c94:	d037      	beq.n	8001d06 <UART_SetConfig+0x28e>
 8001c96:	e048      	b.n	8001d2a <UART_SetConfig+0x2b2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001c98:	f7ff fb56 	bl	8001348 <HAL_RCC_GetPCLK1Freq>
 8001c9c:	0002      	movs	r2, r0
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	085b      	lsrs	r3, r3, #1
 8001ca4:	18d2      	adds	r2, r2, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	0019      	movs	r1, r3
 8001cac:	0010      	movs	r0, r2
 8001cae:	f7fe fa2b 	bl	8000108 <__udivsi3>
 8001cb2:	0003      	movs	r3, r0
 8001cb4:	b29a      	uxth	r2, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	60da      	str	r2, [r3, #12]
        break;
 8001cbc:	e03a      	b.n	8001d34 <UART_SetConfig+0x2bc>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	085b      	lsrs	r3, r3, #1
 8001cc4:	4a26      	ldr	r2, [pc, #152]	; (8001d60 <UART_SetConfig+0x2e8>)
 8001cc6:	189a      	adds	r2, r3, r2
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	0019      	movs	r1, r3
 8001cce:	0010      	movs	r0, r2
 8001cd0:	f7fe fa1a 	bl	8000108 <__udivsi3>
 8001cd4:	0003      	movs	r3, r0
 8001cd6:	b29a      	uxth	r2, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	60da      	str	r2, [r3, #12]
        break;
 8001cde:	e029      	b.n	8001d34 <UART_SetConfig+0x2bc>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001ce0:	f7ff fac2 	bl	8001268 <HAL_RCC_GetSysClockFreq>
 8001ce4:	0002      	movs	r2, r0
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	085b      	lsrs	r3, r3, #1
 8001cec:	18d2      	adds	r2, r2, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	0019      	movs	r1, r3
 8001cf4:	0010      	movs	r0, r2
 8001cf6:	f7fe fa07 	bl	8000108 <__udivsi3>
 8001cfa:	0003      	movs	r3, r0
 8001cfc:	b29a      	uxth	r2, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	60da      	str	r2, [r3, #12]
        break;
 8001d04:	e016      	b.n	8001d34 <UART_SetConfig+0x2bc>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	085b      	lsrs	r3, r3, #1
 8001d0c:	2280      	movs	r2, #128	; 0x80
 8001d0e:	0212      	lsls	r2, r2, #8
 8001d10:	189a      	adds	r2, r3, r2
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	0019      	movs	r1, r3
 8001d18:	0010      	movs	r0, r2
 8001d1a:	f7fe f9f5 	bl	8000108 <__udivsi3>
 8001d1e:	0003      	movs	r3, r0
 8001d20:	b29a      	uxth	r2, r3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	60da      	str	r2, [r3, #12]
        break;
 8001d28:	e004      	b.n	8001d34 <UART_SetConfig+0x2bc>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8001d2a:	2313      	movs	r3, #19
 8001d2c:	18fb      	adds	r3, r7, r3
 8001d2e:	2201      	movs	r2, #1
 8001d30:	701a      	strb	r2, [r3, #0]
        break;
 8001d32:	46c0      	nop			; (mov r8, r8)
    }
  }

  return ret;
 8001d34:	2313      	movs	r3, #19
 8001d36:	18fb      	adds	r3, r7, r3
 8001d38:	781b      	ldrb	r3, [r3, #0]

}
 8001d3a:	0018      	movs	r0, r3
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	b007      	add	sp, #28
 8001d40:	bd90      	pop	{r4, r7, pc}
 8001d42:	46c0      	nop			; (mov r8, r8)
 8001d44:	efff69f3 	.word	0xefff69f3
 8001d48:	ffffcfff 	.word	0xffffcfff
 8001d4c:	fffff4ff 	.word	0xfffff4ff
 8001d50:	40013800 	.word	0x40013800
 8001d54:	40021000 	.word	0x40021000
 8001d58:	40004400 	.word	0x40004400
 8001d5c:	00f42400 	.word	0x00f42400
 8001d60:	007a1200 	.word	0x007a1200

08001d64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d70:	2201      	movs	r2, #1
 8001d72:	4013      	ands	r3, r2
 8001d74:	d00b      	beq.n	8001d8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	4a4a      	ldr	r2, [pc, #296]	; (8001ea8 <UART_AdvFeatureConfig+0x144>)
 8001d7e:	4013      	ands	r3, r2
 8001d80:	0019      	movs	r1, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	430a      	orrs	r2, r1
 8001d8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d92:	2202      	movs	r2, #2
 8001d94:	4013      	ands	r3, r2
 8001d96:	d00b      	beq.n	8001db0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	4a43      	ldr	r2, [pc, #268]	; (8001eac <UART_AdvFeatureConfig+0x148>)
 8001da0:	4013      	ands	r3, r2
 8001da2:	0019      	movs	r1, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	430a      	orrs	r2, r1
 8001dae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db4:	2204      	movs	r2, #4
 8001db6:	4013      	ands	r3, r2
 8001db8:	d00b      	beq.n	8001dd2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	4a3b      	ldr	r2, [pc, #236]	; (8001eb0 <UART_AdvFeatureConfig+0x14c>)
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	0019      	movs	r1, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	430a      	orrs	r2, r1
 8001dd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd6:	2208      	movs	r2, #8
 8001dd8:	4013      	ands	r3, r2
 8001dda:	d00b      	beq.n	8001df4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	4a34      	ldr	r2, [pc, #208]	; (8001eb4 <UART_AdvFeatureConfig+0x150>)
 8001de4:	4013      	ands	r3, r2
 8001de6:	0019      	movs	r1, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	430a      	orrs	r2, r1
 8001df2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df8:	2210      	movs	r2, #16
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	d00b      	beq.n	8001e16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	4a2c      	ldr	r2, [pc, #176]	; (8001eb8 <UART_AdvFeatureConfig+0x154>)
 8001e06:	4013      	ands	r3, r2
 8001e08:	0019      	movs	r1, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	430a      	orrs	r2, r1
 8001e14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1a:	2220      	movs	r2, #32
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	d00b      	beq.n	8001e38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	4a25      	ldr	r2, [pc, #148]	; (8001ebc <UART_AdvFeatureConfig+0x158>)
 8001e28:	4013      	ands	r3, r2
 8001e2a:	0019      	movs	r1, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	430a      	orrs	r2, r1
 8001e36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3c:	2240      	movs	r2, #64	; 0x40
 8001e3e:	4013      	ands	r3, r2
 8001e40:	d01d      	beq.n	8001e7e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	4a1d      	ldr	r2, [pc, #116]	; (8001ec0 <UART_AdvFeatureConfig+0x15c>)
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	0019      	movs	r1, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	430a      	orrs	r2, r1
 8001e58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e5e:	2380      	movs	r3, #128	; 0x80
 8001e60:	035b      	lsls	r3, r3, #13
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d10b      	bne.n	8001e7e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	4a15      	ldr	r2, [pc, #84]	; (8001ec4 <UART_AdvFeatureConfig+0x160>)
 8001e6e:	4013      	ands	r3, r2
 8001e70:	0019      	movs	r1, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	430a      	orrs	r2, r1
 8001e7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e82:	2280      	movs	r2, #128	; 0x80
 8001e84:	4013      	ands	r3, r2
 8001e86:	d00b      	beq.n	8001ea0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	4a0e      	ldr	r2, [pc, #56]	; (8001ec8 <UART_AdvFeatureConfig+0x164>)
 8001e90:	4013      	ands	r3, r2
 8001e92:	0019      	movs	r1, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	605a      	str	r2, [r3, #4]
  }
}
 8001ea0:	46c0      	nop			; (mov r8, r8)
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	b002      	add	sp, #8
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	fffdffff 	.word	0xfffdffff
 8001eac:	fffeffff 	.word	0xfffeffff
 8001eb0:	fffbffff 	.word	0xfffbffff
 8001eb4:	ffff7fff 	.word	0xffff7fff
 8001eb8:	ffffefff 	.word	0xffffefff
 8001ebc:	ffffdfff 	.word	0xffffdfff
 8001ec0:	ffefffff 	.word	0xffefffff
 8001ec4:	ff9fffff 	.word	0xff9fffff
 8001ec8:	fff7ffff 	.word	0xfff7ffff

08001ecc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  uint32_t tickstart = 0U;
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2269      	movs	r2, #105	; 0x69
 8001ede:	2120      	movs	r1, #32
 8001ee0:	5499      	strb	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	226a      	movs	r2, #106	; 0x6a
 8001ee6:	2120      	movs	r1, #32
 8001ee8:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2268      	movs	r2, #104	; 0x68
 8001eee:	2100      	movs	r1, #0
 8001ef0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001ef2:	2300      	movs	r3, #0
}
 8001ef4:	0018      	movs	r0, r3
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	b002      	add	sp, #8
 8001efa:	bd80      	pop	{r7, pc}

08001efc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	603b      	str	r3, [r7, #0]
 8001f08:	1dfb      	adds	r3, r7, #7
 8001f0a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f0c:	e02b      	b.n	8001f66 <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	3301      	adds	r3, #1
 8001f12:	d028      	beq.n	8001f66 <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d007      	beq.n	8001f2a <UART_WaitOnFlagUntilTimeout+0x2e>
 8001f1a:	f7fe faa7 	bl	800046c <HAL_GetTick>
 8001f1e:	0002      	movs	r2, r0
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d21d      	bcs.n	8001f66 <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4916      	ldr	r1, [pc, #88]	; (8001f90 <UART_WaitOnFlagUntilTimeout+0x94>)
 8001f36:	400a      	ands	r2, r1
 8001f38:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	689a      	ldr	r2, [r3, #8]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2101      	movs	r1, #1
 8001f46:	438a      	bics	r2, r1
 8001f48:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2269      	movs	r2, #105	; 0x69
 8001f4e:	2120      	movs	r1, #32
 8001f50:	5499      	strb	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	226a      	movs	r2, #106	; 0x6a
 8001f56:	2120      	movs	r1, #32
 8001f58:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2268      	movs	r2, #104	; 0x68
 8001f5e:	2100      	movs	r1, #0
 8001f60:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e00f      	b.n	8001f86 <UART_WaitOnFlagUntilTimeout+0x8a>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	69db      	ldr	r3, [r3, #28]
 8001f6c:	68ba      	ldr	r2, [r7, #8]
 8001f6e:	4013      	ands	r3, r2
 8001f70:	68ba      	ldr	r2, [r7, #8]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	425a      	negs	r2, r3
 8001f76:	4153      	adcs	r3, r2
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	001a      	movs	r2, r3
 8001f7c:	1dfb      	adds	r3, r7, #7
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d0c4      	beq.n	8001f0e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	0018      	movs	r0, r3
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	b004      	add	sp, #16
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	46c0      	nop			; (mov r8, r8)
 8001f90:	fffffe5f 	.word	0xfffffe5f

08001f94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4909      	ldr	r1, [pc, #36]	; (8001fcc <UART_EndRxTransfer+0x38>)
 8001fa8:	400a      	ands	r2, r1
 8001faa:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	689a      	ldr	r2, [r3, #8]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2101      	movs	r1, #1
 8001fb8:	438a      	bics	r2, r1
 8001fba:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	226a      	movs	r2, #106	; 0x6a
 8001fc0:	2120      	movs	r1, #32
 8001fc2:	5499      	strb	r1, [r3, r2]
}
 8001fc4:	46c0      	nop			; (mov r8, r8)
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	b002      	add	sp, #8
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	fffffedf 	.word	0xfffffedf

08001fd0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fdc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	225a      	movs	r2, #90	; 0x5a
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2252      	movs	r2, #82	; 0x52
 8001fea:	2100      	movs	r1, #0
 8001fec:	5299      	strh	r1, [r3, r2]

  HAL_UART_ErrorCallback(huart);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	0018      	movs	r0, r3
 8001ff2:	f7ff fd39 	bl	8001a68 <HAL_UART_ErrorCallback>
}
 8001ff6:	46c0      	nop			; (mov r8, r8)
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	b004      	add	sp, #16
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <UART_Transmit_IT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001ffe:	b580      	push	{r7, lr}
 8002000:	b084      	sub	sp, #16
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2269      	movs	r2, #105	; 0x69
 800200a:	5c9b      	ldrb	r3, [r3, r2]
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b21      	cmp	r3, #33	; 0x21
 8002010:	d147      	bne.n	80020a2 <UART_Transmit_IT+0xa4>
  {
    if(huart->TxXferCount == 0U)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2252      	movs	r2, #82	; 0x52
 8002016:	5a9b      	ldrh	r3, [r3, r2]
 8002018:	b29b      	uxth	r3, r3
 800201a:	2b00      	cmp	r3, #0
 800201c:	d111      	bne.n	8002042 <UART_Transmit_IT+0x44>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2180      	movs	r1, #128	; 0x80
 800202a:	438a      	bics	r2, r1
 800202c:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2140      	movs	r1, #64	; 0x40
 800203a:	430a      	orrs	r2, r1
 800203c:	601a      	str	r2, [r3, #0]

      return HAL_OK;
 800203e:	2300      	movs	r3, #0
 8002040:	e030      	b.n	80020a4 <UART_Transmit_IT+0xa6>
    }
    else
    {
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	689a      	ldr	r2, [r3, #8]
 8002046:	2380      	movs	r3, #128	; 0x80
 8002048:	015b      	lsls	r3, r3, #5
 800204a:	429a      	cmp	r2, r3
 800204c:	d114      	bne.n	8002078 <UART_Transmit_IT+0x7a>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	691b      	ldr	r3, [r3, #16]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d110      	bne.n	8002078 <UART_Transmit_IT+0x7a>
      {
        tmp = (uint16_t*) huart->pTxBuffPtr;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800205a:	60fb      	str	r3, [r7, #12]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	881a      	ldrh	r2, [r3, #0]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	05d2      	lsls	r2, r2, #23
 8002066:	0dd2      	lsrs	r2, r2, #23
 8002068:	b292      	uxth	r2, r2
 800206a:	851a      	strh	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002070:	1c9a      	adds	r2, r3, #2
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	64da      	str	r2, [r3, #76]	; 0x4c
 8002076:	e009      	b.n	800208c <UART_Transmit_IT+0x8e>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800207c:	1c59      	adds	r1, r3, #1
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	64d1      	str	r1, [r2, #76]	; 0x4c
 8002082:	781a      	ldrb	r2, [r3, #0]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	b292      	uxth	r2, r2
 800208a:	851a      	strh	r2, [r3, #40]	; 0x28
      }
      huart->TxXferCount--;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2252      	movs	r2, #82	; 0x52
 8002090:	5a9b      	ldrh	r3, [r3, r2]
 8002092:	b29b      	uxth	r3, r3
 8002094:	3b01      	subs	r3, #1
 8002096:	b299      	uxth	r1, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2252      	movs	r2, #82	; 0x52
 800209c:	5299      	strh	r1, [r3, r2]

      return HAL_OK;
 800209e:	2300      	movs	r3, #0
 80020a0:	e000      	b.n	80020a4 <UART_Transmit_IT+0xa6>
    }
  }
  else
  {
    return HAL_BUSY;
 80020a2:	2302      	movs	r3, #2
  }
}
 80020a4:	0018      	movs	r0, r3
 80020a6:	46bd      	mov	sp, r7
 80020a8:	b004      	add	sp, #16
 80020aa:	bd80      	pop	{r7, pc}

080020ac <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2140      	movs	r1, #64	; 0x40
 80020c0:	438a      	bics	r2, r1
 80020c2:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2269      	movs	r2, #105	; 0x69
 80020c8:	2120      	movs	r1, #32
 80020ca:	5499      	strb	r1, [r3, r2]

  HAL_UART_TxCpltCallback(huart);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	0018      	movs	r0, r3
 80020d0:	f7ff fcc2 	bl	8001a58 <HAL_UART_TxCpltCallback>

  return HAL_OK;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	0018      	movs	r0, r3
 80020d8:	46bd      	mov	sp, r7
 80020da:	b002      	add	sp, #8
 80020dc:	bd80      	pop	{r7, pc}
	...

080020e0 <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80020e0:	b590      	push	{r4, r7, lr}
 80020e2:	b085      	sub	sp, #20
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
 80020e8:	230e      	movs	r3, #14
 80020ea:	18fb      	adds	r3, r7, r3
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	215c      	movs	r1, #92	; 0x5c
 80020f0:	5a52      	ldrh	r2, [r2, r1]
 80020f2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	226a      	movs	r2, #106	; 0x6a
 80020f8:	5c9b      	ldrb	r3, [r3, r2]
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	2b22      	cmp	r3, #34	; 0x22
 80020fe:	d15b      	bne.n	80021b8 <UART_Receive_IT+0xd8>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	230c      	movs	r3, #12
 8002106:	18fb      	adds	r3, r7, r3
 8002108:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800210a:	801a      	strh	r2, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	689a      	ldr	r2, [r3, #8]
 8002110:	2380      	movs	r3, #128	; 0x80
 8002112:	015b      	lsls	r3, r3, #5
 8002114:	429a      	cmp	r2, r3
 8002116:	d116      	bne.n	8002146 <UART_Receive_IT+0x66>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	691b      	ldr	r3, [r3, #16]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d112      	bne.n	8002146 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002124:	60bb      	str	r3, [r7, #8]
      *tmp = (uint16_t)(uhdata & uhMask);
 8002126:	230c      	movs	r3, #12
 8002128:	18fb      	adds	r3, r7, r3
 800212a:	220e      	movs	r2, #14
 800212c:	18ba      	adds	r2, r7, r2
 800212e:	881b      	ldrh	r3, [r3, #0]
 8002130:	8812      	ldrh	r2, [r2, #0]
 8002132:	4013      	ands	r3, r2
 8002134:	b29a      	uxth	r2, r3
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr +=2U;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800213e:	1c9a      	adds	r2, r3, #2
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	655a      	str	r2, [r3, #84]	; 0x54
 8002144:	e010      	b.n	8002168 <UART_Receive_IT+0x88>
    }
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002146:	230c      	movs	r3, #12
 8002148:	18fb      	adds	r3, r7, r3
 800214a:	881b      	ldrh	r3, [r3, #0]
 800214c:	b2d9      	uxtb	r1, r3
 800214e:	230e      	movs	r3, #14
 8002150:	18fb      	adds	r3, r7, r3
 8002152:	881b      	ldrh	r3, [r3, #0]
 8002154:	b2d8      	uxtb	r0, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800215a:	1c5c      	adds	r4, r3, #1
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	6554      	str	r4, [r2, #84]	; 0x54
 8002160:	0002      	movs	r2, r0
 8002162:	400a      	ands	r2, r1
 8002164:	b2d2      	uxtb	r2, r2
 8002166:	701a      	strb	r2, [r3, #0]
    }

    if(--huart->RxXferCount == 0U)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	225a      	movs	r2, #90	; 0x5a
 800216c:	5a9b      	ldrh	r3, [r3, r2]
 800216e:	b29b      	uxth	r3, r3
 8002170:	3b01      	subs	r3, #1
 8002172:	b29b      	uxth	r3, r3
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	215a      	movs	r1, #90	; 0x5a
 8002178:	1c18      	adds	r0, r3, #0
 800217a:	5250      	strh	r0, [r2, r1]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d119      	bne.n	80021b4 <UART_Receive_IT+0xd4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4912      	ldr	r1, [pc, #72]	; (80021d4 <UART_Receive_IT+0xf4>)
 800218c:	400a      	ands	r2, r1
 800218e:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	689a      	ldr	r2, [r3, #8]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	2101      	movs	r1, #1
 800219c:	438a      	bics	r2, r1
 800219e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	226a      	movs	r2, #106	; 0x6a
 80021a4:	2120      	movs	r1, #32
 80021a6:	5499      	strb	r1, [r3, r2]

      HAL_UART_RxCpltCallback(huart);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	0018      	movs	r0, r3
 80021ac:	f002 f99e 	bl	80044ec <HAL_UART_RxCpltCallback>

      return HAL_OK;
 80021b0:	2300      	movs	r3, #0
 80021b2:	e00a      	b.n	80021ca <UART_Receive_IT+0xea>
    }

    return HAL_OK;
 80021b4:	2300      	movs	r3, #0
 80021b6:	e008      	b.n	80021ca <UART_Receive_IT+0xea>
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	699a      	ldr	r2, [r3, #24]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2108      	movs	r1, #8
 80021c4:	430a      	orrs	r2, r1
 80021c6:	619a      	str	r2, [r3, #24]

    return HAL_BUSY;
 80021c8:	2302      	movs	r3, #2
  }
}
 80021ca:	0018      	movs	r0, r3
 80021cc:	46bd      	mov	sp, r7
 80021ce:	b005      	add	sp, #20
 80021d0:	bd90      	pop	{r4, r7, pc}
 80021d2:	46c0      	nop			; (mov r8, r8)
 80021d4:	fffffedf 	.word	0xfffffedf

080021d8 <FN_RM01_Get_File_Num>:
#include "FN_RM01.h"

void FN_RM01_Get_File_Num(int *file_num)
{	
 80021d8:	b590      	push	{r4, r7, lr}
 80021da:	b085      	sub	sp, #20
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
	uint8_t check_file_num_cmd[5];
	memset(check_file_num_cmd,0,sizeof(check_file_num_cmd));
 80021e0:	2408      	movs	r4, #8
 80021e2:	193b      	adds	r3, r7, r4
 80021e4:	2205      	movs	r2, #5
 80021e6:	2100      	movs	r1, #0
 80021e8:	0018      	movs	r0, r3
 80021ea:	f002 fa97 	bl	800471c <memset>
	check_file_num_cmd[0] = 0x7E;
 80021ee:	193b      	adds	r3, r7, r4
 80021f0:	227e      	movs	r2, #126	; 0x7e
 80021f2:	701a      	strb	r2, [r3, #0]
	check_file_num_cmd[1] = 0x03;
 80021f4:	193b      	adds	r3, r7, r4
 80021f6:	2203      	movs	r2, #3
 80021f8:	705a      	strb	r2, [r3, #1]
	check_file_num_cmd[2] = 0xC5;
 80021fa:	193b      	adds	r3, r7, r4
 80021fc:	22c5      	movs	r2, #197	; 0xc5
 80021fe:	709a      	strb	r2, [r3, #2]
	check_file_num_cmd[3] = 0xC8;
 8002200:	193b      	adds	r3, r7, r4
 8002202:	22c8      	movs	r2, #200	; 0xc8
 8002204:	70da      	strb	r2, [r3, #3]
	check_file_num_cmd[4] = 0x7E;
 8002206:	193b      	adds	r3, r7, r4
 8002208:	227e      	movs	r2, #126	; 0x7e
 800220a:	711a      	strb	r2, [r3, #4]
	
	clean_uart2_rx_data();
 800220c:	f002 f9e6 	bl	80045dc <clean_uart2_rx_data>
	HAL_UART_Transmit(&huart2, check_file_num_cmd, sizeof(check_file_num_cmd), 1000);
 8002210:	23fa      	movs	r3, #250	; 0xfa
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	1939      	adds	r1, r7, r4
 8002216:	480d      	ldr	r0, [pc, #52]	; (800224c <FN_RM01_Get_File_Num+0x74>)
 8002218:	2205      	movs	r2, #5
 800221a:	f7ff f9e1 	bl	80015e0 <HAL_UART_Transmit>
	HAL_Delay(200);
 800221e:	20c8      	movs	r0, #200	; 0xc8
 8002220:	f7fe f92e 	bl	8000480 <HAL_Delay>
	
	*file_num += uart2_rx_data[1]<<8;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	4b09      	ldr	r3, [pc, #36]	; (8002250 <FN_RM01_Get_File_Num+0x78>)
 800222a:	785b      	ldrb	r3, [r3, #1]
 800222c:	021b      	lsls	r3, r3, #8
 800222e:	18d2      	adds	r2, r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	601a      	str	r2, [r3, #0]
	*file_num += uart2_rx_data[2] - 3;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	4b05      	ldr	r3, [pc, #20]	; (8002250 <FN_RM01_Get_File_Num+0x78>)
 800223a:	789b      	ldrb	r3, [r3, #2]
 800223c:	3b03      	subs	r3, #3
 800223e:	18d2      	adds	r2, r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	601a      	str	r2, [r3, #0]
}
 8002244:	46c0      	nop			; (mov r8, r8)
 8002246:	46bd      	mov	sp, r7
 8002248:	b005      	add	sp, #20
 800224a:	bd90      	pop	{r4, r7, pc}
 800224c:	20000570 	.word	0x20000570
 8002250:	20000498 	.word	0x20000498

08002254 <FN_RM01_Play_Sound>:

int FN_RM01_Play_Sound(char *file_name)
{
 8002254:	b590      	push	{r4, r7, lr}
 8002256:	b087      	sub	sp, #28
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
	uint8_t play_file_command[9];
	memset(play_file_command,0,sizeof(play_file_command));
 800225c:	2108      	movs	r1, #8
 800225e:	000c      	movs	r4, r1
 8002260:	187b      	adds	r3, r7, r1
 8002262:	2209      	movs	r2, #9
 8002264:	2100      	movs	r1, #0
 8002266:	0018      	movs	r0, r3
 8002268:	f002 fa58 	bl	800471c <memset>
	play_file_command[0] = 0x7E;
 800226c:	0021      	movs	r1, r4
 800226e:	187b      	adds	r3, r7, r1
 8002270:	227e      	movs	r2, #126	; 0x7e
 8002272:	701a      	strb	r2, [r3, #0]
	play_file_command[1] = 0x07;
 8002274:	187b      	adds	r3, r7, r1
 8002276:	2207      	movs	r2, #7
 8002278:	705a      	strb	r2, [r3, #1]
	play_file_command[2] = 0xA3;
 800227a:	187b      	adds	r3, r7, r1
 800227c:	22a3      	movs	r2, #163	; 0xa3
 800227e:	709a      	strb	r2, [r3, #2]
	play_file_command[8] = 0x7E;
 8002280:	187b      	adds	r3, r7, r1
 8002282:	227e      	movs	r2, #126	; 0x7e
 8002284:	721a      	strb	r2, [r3, #8]
	play_file_command[7] += play_file_command[1];
 8002286:	187b      	adds	r3, r7, r1
 8002288:	79da      	ldrb	r2, [r3, #7]
 800228a:	187b      	adds	r3, r7, r1
 800228c:	785b      	ldrb	r3, [r3, #1]
 800228e:	18d3      	adds	r3, r2, r3
 8002290:	b2da      	uxtb	r2, r3
 8002292:	187b      	adds	r3, r7, r1
 8002294:	71da      	strb	r2, [r3, #7]
	play_file_command[7] += play_file_command[2];
 8002296:	187b      	adds	r3, r7, r1
 8002298:	79da      	ldrb	r2, [r3, #7]
 800229a:	187b      	adds	r3, r7, r1
 800229c:	789b      	ldrb	r3, [r3, #2]
 800229e:	18d3      	adds	r3, r2, r3
 80022a0:	b2da      	uxtb	r2, r3
 80022a2:	187b      	adds	r3, r7, r1
 80022a4:	71da      	strb	r2, [r3, #7]
	
	for(int i=0;i<4;i++)
 80022a6:	2300      	movs	r3, #0
 80022a8:	617b      	str	r3, [r7, #20]
 80022aa:	e015      	b.n	80022d8 <FN_RM01_Play_Sound+0x84>
	{
		play_file_command[3+i] = file_name[i];
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	18d2      	adds	r2, r2, r3
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	3303      	adds	r3, #3
 80022b6:	7811      	ldrb	r1, [r2, #0]
 80022b8:	2008      	movs	r0, #8
 80022ba:	183a      	adds	r2, r7, r0
 80022bc:	54d1      	strb	r1, [r2, r3]
		play_file_command[sizeof(play_file_command)-2] += file_name[i];	
 80022be:	183b      	adds	r3, r7, r0
 80022c0:	79da      	ldrb	r2, [r3, #7]
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	6879      	ldr	r1, [r7, #4]
 80022c6:	18cb      	adds	r3, r1, r3
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	18d3      	adds	r3, r2, r3
 80022cc:	b2da      	uxtb	r2, r3
 80022ce:	183b      	adds	r3, r7, r0
 80022d0:	71da      	strb	r2, [r3, #7]
	for(int i=0;i<4;i++)
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	3301      	adds	r3, #1
 80022d6:	617b      	str	r3, [r7, #20]
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	2b03      	cmp	r3, #3
 80022dc:	dde6      	ble.n	80022ac <FN_RM01_Play_Sound+0x58>
	}
	
	clean_uart2_rx_data();
 80022de:	f002 f97d 	bl	80045dc <clean_uart2_rx_data>
	HAL_UART_Transmit(&huart2, play_file_command, sizeof(play_file_command), 1000);
 80022e2:	23fa      	movs	r3, #250	; 0xfa
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	2208      	movs	r2, #8
 80022e8:	18b9      	adds	r1, r7, r2
 80022ea:	4809      	ldr	r0, [pc, #36]	; (8002310 <FN_RM01_Play_Sound+0xbc>)
 80022ec:	2209      	movs	r2, #9
 80022ee:	f7ff f977 	bl	80015e0 <HAL_UART_Transmit>
	HAL_Delay(250);
 80022f2:	20fa      	movs	r0, #250	; 0xfa
 80022f4:	f7fe f8c4 	bl	8000480 <HAL_Delay>
	
	if(uart2_rx_data[0] == 0x00)
 80022f8:	4b06      	ldr	r3, [pc, #24]	; (8002314 <FN_RM01_Play_Sound+0xc0>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d101      	bne.n	8002304 <FN_RM01_Play_Sound+0xb0>
		return 1;
 8002300:	2301      	movs	r3, #1
 8002302:	e000      	b.n	8002306 <FN_RM01_Play_Sound+0xb2>
	else
		return 0;
 8002304:	2300      	movs	r3, #0
}
 8002306:	0018      	movs	r0, r3
 8002308:	46bd      	mov	sp, r7
 800230a:	b007      	add	sp, #28
 800230c:	bd90      	pop	{r4, r7, pc}
 800230e:	46c0      	nop			; (mov r8, r8)
 8002310:	20000570 	.word	0x20000570
 8002314:	20000498 	.word	0x20000498

08002318 <FN_RM01_Record_Sound>:

int FN_RM01_Record_Sound(char *file_name)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b086      	sub	sp, #24
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
	char record_command[9];
//	memset(record_command,0,sizeof(record_command));
	record_command[0] = 0x7E;
 8002320:	2108      	movs	r1, #8
 8002322:	187b      	adds	r3, r7, r1
 8002324:	227e      	movs	r2, #126	; 0x7e
 8002326:	701a      	strb	r2, [r3, #0]
	record_command[1] = 0x07;
 8002328:	187b      	adds	r3, r7, r1
 800232a:	2207      	movs	r2, #7
 800232c:	705a      	strb	r2, [r3, #1]
	record_command[2] = 0xD6;
 800232e:	187b      	adds	r3, r7, r1
 8002330:	22d6      	movs	r2, #214	; 0xd6
 8002332:	709a      	strb	r2, [r3, #2]
	record_command[8] = 0x7E;
 8002334:	187b      	adds	r3, r7, r1
 8002336:	227e      	movs	r2, #126	; 0x7e
 8002338:	721a      	strb	r2, [r3, #8]
	record_command[7] += record_command[1];
 800233a:	187b      	adds	r3, r7, r1
 800233c:	79da      	ldrb	r2, [r3, #7]
 800233e:	187b      	adds	r3, r7, r1
 8002340:	785b      	ldrb	r3, [r3, #1]
 8002342:	18d3      	adds	r3, r2, r3
 8002344:	b2da      	uxtb	r2, r3
 8002346:	187b      	adds	r3, r7, r1
 8002348:	71da      	strb	r2, [r3, #7]
	record_command[7] += record_command[2];
 800234a:	187b      	adds	r3, r7, r1
 800234c:	79da      	ldrb	r2, [r3, #7]
 800234e:	187b      	adds	r3, r7, r1
 8002350:	789b      	ldrb	r3, [r3, #2]
 8002352:	18d3      	adds	r3, r2, r3
 8002354:	b2da      	uxtb	r2, r3
 8002356:	187b      	adds	r3, r7, r1
 8002358:	71da      	strb	r2, [r3, #7]
	
	for(int i=0;i<4;i++)
 800235a:	2300      	movs	r3, #0
 800235c:	617b      	str	r3, [r7, #20]
 800235e:	e015      	b.n	800238c <FN_RM01_Record_Sound+0x74>
	{
		record_command[3+i] = file_name[i];
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	18d2      	adds	r2, r2, r3
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	3303      	adds	r3, #3
 800236a:	7811      	ldrb	r1, [r2, #0]
 800236c:	2008      	movs	r0, #8
 800236e:	183a      	adds	r2, r7, r0
 8002370:	54d1      	strb	r1, [r2, r3]
		record_command[sizeof(record_command)-2] += file_name[i];	
 8002372:	183b      	adds	r3, r7, r0
 8002374:	79da      	ldrb	r2, [r3, #7]
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	6879      	ldr	r1, [r7, #4]
 800237a:	18cb      	adds	r3, r1, r3
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	18d3      	adds	r3, r2, r3
 8002380:	b2da      	uxtb	r2, r3
 8002382:	183b      	adds	r3, r7, r0
 8002384:	71da      	strb	r2, [r3, #7]
	for(int i=0;i<4;i++)
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	3301      	adds	r3, #1
 800238a:	617b      	str	r3, [r7, #20]
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	2b03      	cmp	r3, #3
 8002390:	dde6      	ble.n	8002360 <FN_RM01_Record_Sound+0x48>
	}
	
	clean_uart2_rx_data();
 8002392:	f002 f923 	bl	80045dc <clean_uart2_rx_data>
	HAL_UART_Transmit(&huart2, (uint8_t*)&record_command, sizeof(record_command), 1000);
 8002396:	23fa      	movs	r3, #250	; 0xfa
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	2208      	movs	r2, #8
 800239c:	18b9      	adds	r1, r7, r2
 800239e:	4809      	ldr	r0, [pc, #36]	; (80023c4 <FN_RM01_Record_Sound+0xac>)
 80023a0:	2209      	movs	r2, #9
 80023a2:	f7ff f91d 	bl	80015e0 <HAL_UART_Transmit>
	HAL_Delay(200);
 80023a6:	20c8      	movs	r0, #200	; 0xc8
 80023a8:	f7fe f86a 	bl	8000480 <HAL_Delay>
	
	if(uart2_rx_data[0] == 0x00)
 80023ac:	4b06      	ldr	r3, [pc, #24]	; (80023c8 <FN_RM01_Record_Sound+0xb0>)
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d101      	bne.n	80023b8 <FN_RM01_Record_Sound+0xa0>
		return 1;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e000      	b.n	80023ba <FN_RM01_Record_Sound+0xa2>
	else
		return 0;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	0018      	movs	r0, r3
 80023bc:	46bd      	mov	sp, r7
 80023be:	b006      	add	sp, #24
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	46c0      	nop			; (mov r8, r8)
 80023c4:	20000570 	.word	0x20000570
 80023c8:	20000498 	.word	0x20000498

080023cc <FN_RM01_Stop_Record>:

int FN_RM01_Stop_Record(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
	char stop_record_command[5];
//	memset(stop_record_command,0,sizeof(stop_record_command));
	stop_record_command[0] = 0x7E;
 80023d2:	003b      	movs	r3, r7
 80023d4:	227e      	movs	r2, #126	; 0x7e
 80023d6:	701a      	strb	r2, [r3, #0]
	stop_record_command[1] = 0x03;
 80023d8:	003b      	movs	r3, r7
 80023da:	2203      	movs	r2, #3
 80023dc:	705a      	strb	r2, [r3, #1]
	stop_record_command[2] = 0xD9;
 80023de:	003b      	movs	r3, r7
 80023e0:	22d9      	movs	r2, #217	; 0xd9
 80023e2:	709a      	strb	r2, [r3, #2]
	stop_record_command[3] = 0xDc;
 80023e4:	003b      	movs	r3, r7
 80023e6:	22dc      	movs	r2, #220	; 0xdc
 80023e8:	70da      	strb	r2, [r3, #3]
	stop_record_command[4] = 0x7E;
 80023ea:	003b      	movs	r3, r7
 80023ec:	227e      	movs	r2, #126	; 0x7e
 80023ee:	711a      	strb	r2, [r3, #4]
	
	clean_uart2_rx_data();
 80023f0:	f002 f8f4 	bl	80045dc <clean_uart2_rx_data>
	HAL_UART_Transmit(&huart2, (uint8_t*)&stop_record_command, sizeof(stop_record_command), 1000);
 80023f4:	23fa      	movs	r3, #250	; 0xfa
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	0039      	movs	r1, r7
 80023fa:	4809      	ldr	r0, [pc, #36]	; (8002420 <FN_RM01_Stop_Record+0x54>)
 80023fc:	2205      	movs	r2, #5
 80023fe:	f7ff f8ef 	bl	80015e0 <HAL_UART_Transmit>
	HAL_Delay(100);
 8002402:	2064      	movs	r0, #100	; 0x64
 8002404:	f7fe f83c 	bl	8000480 <HAL_Delay>
	
	if(uart2_rx_data[0] == 0x00)
 8002408:	4b06      	ldr	r3, [pc, #24]	; (8002424 <FN_RM01_Stop_Record+0x58>)
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d101      	bne.n	8002414 <FN_RM01_Stop_Record+0x48>
		return 1;
 8002410:	2301      	movs	r3, #1
 8002412:	e000      	b.n	8002416 <FN_RM01_Stop_Record+0x4a>
	else
		return 0;
 8002414:	2300      	movs	r3, #0
}
 8002416:	0018      	movs	r0, r3
 8002418:	46bd      	mov	sp, r7
 800241a:	b002      	add	sp, #8
 800241c:	bd80      	pop	{r7, pc}
 800241e:	46c0      	nop			; (mov r8, r8)
 8002420:	20000570 	.word	0x20000570
 8002424:	20000498 	.word	0x20000498

08002428 <FN_RM01_Remove_Sound>:

int FN_RM01_Remove_Sound(char *file_name)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b086      	sub	sp, #24
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
	char remove_command[9];
//	memset(remove_command,0,sizeof(remove_command));
	remove_command[0] = 0x7E;
 8002430:	2108      	movs	r1, #8
 8002432:	187b      	adds	r3, r7, r1
 8002434:	227e      	movs	r2, #126	; 0x7e
 8002436:	701a      	strb	r2, [r3, #0]
	remove_command[1] = 0x07;
 8002438:	187b      	adds	r3, r7, r1
 800243a:	2207      	movs	r2, #7
 800243c:	705a      	strb	r2, [r3, #1]
	remove_command[2] = 0xDB;
 800243e:	187b      	adds	r3, r7, r1
 8002440:	22db      	movs	r2, #219	; 0xdb
 8002442:	709a      	strb	r2, [r3, #2]
	remove_command[8] = 0x7E;
 8002444:	187b      	adds	r3, r7, r1
 8002446:	227e      	movs	r2, #126	; 0x7e
 8002448:	721a      	strb	r2, [r3, #8]
	remove_command[7] += remove_command[1];
 800244a:	187b      	adds	r3, r7, r1
 800244c:	79da      	ldrb	r2, [r3, #7]
 800244e:	187b      	adds	r3, r7, r1
 8002450:	785b      	ldrb	r3, [r3, #1]
 8002452:	18d3      	adds	r3, r2, r3
 8002454:	b2da      	uxtb	r2, r3
 8002456:	187b      	adds	r3, r7, r1
 8002458:	71da      	strb	r2, [r3, #7]
	remove_command[7] += remove_command[2];
 800245a:	187b      	adds	r3, r7, r1
 800245c:	79da      	ldrb	r2, [r3, #7]
 800245e:	187b      	adds	r3, r7, r1
 8002460:	789b      	ldrb	r3, [r3, #2]
 8002462:	18d3      	adds	r3, r2, r3
 8002464:	b2da      	uxtb	r2, r3
 8002466:	187b      	adds	r3, r7, r1
 8002468:	71da      	strb	r2, [r3, #7]
	
	for(int i=0;i<4;i++)
 800246a:	2300      	movs	r3, #0
 800246c:	617b      	str	r3, [r7, #20]
 800246e:	e015      	b.n	800249c <FN_RM01_Remove_Sound+0x74>
	{
		remove_command[3+i] = file_name[i];
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	18d2      	adds	r2, r2, r3
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	3303      	adds	r3, #3
 800247a:	7811      	ldrb	r1, [r2, #0]
 800247c:	2008      	movs	r0, #8
 800247e:	183a      	adds	r2, r7, r0
 8002480:	54d1      	strb	r1, [r2, r3]
		remove_command[sizeof(remove_command)-2] += file_name[i];	
 8002482:	183b      	adds	r3, r7, r0
 8002484:	79da      	ldrb	r2, [r3, #7]
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	6879      	ldr	r1, [r7, #4]
 800248a:	18cb      	adds	r3, r1, r3
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	18d3      	adds	r3, r2, r3
 8002490:	b2da      	uxtb	r2, r3
 8002492:	183b      	adds	r3, r7, r0
 8002494:	71da      	strb	r2, [r3, #7]
	for(int i=0;i<4;i++)
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	3301      	adds	r3, #1
 800249a:	617b      	str	r3, [r7, #20]
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	2b03      	cmp	r3, #3
 80024a0:	dde6      	ble.n	8002470 <FN_RM01_Remove_Sound+0x48>
	}
	
	clean_uart2_rx_data();
 80024a2:	f002 f89b 	bl	80045dc <clean_uart2_rx_data>
	HAL_UART_Transmit(&huart2, (uint8_t*)&remove_command, sizeof(remove_command), 1000);
 80024a6:	23fa      	movs	r3, #250	; 0xfa
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	2208      	movs	r2, #8
 80024ac:	18b9      	adds	r1, r7, r2
 80024ae:	4809      	ldr	r0, [pc, #36]	; (80024d4 <FN_RM01_Remove_Sound+0xac>)
 80024b0:	2209      	movs	r2, #9
 80024b2:	f7ff f895 	bl	80015e0 <HAL_UART_Transmit>
	HAL_Delay(100);
 80024b6:	2064      	movs	r0, #100	; 0x64
 80024b8:	f7fd ffe2 	bl	8000480 <HAL_Delay>
	
	if(uart2_rx_data[0] == 0x00)
 80024bc:	4b06      	ldr	r3, [pc, #24]	; (80024d8 <FN_RM01_Remove_Sound+0xb0>)
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d101      	bne.n	80024c8 <FN_RM01_Remove_Sound+0xa0>
		return 1;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e000      	b.n	80024ca <FN_RM01_Remove_Sound+0xa2>
	else
		return 0;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	0018      	movs	r0, r3
 80024cc:	46bd      	mov	sp, r7
 80024ce:	b006      	add	sp, #24
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	46c0      	nop			; (mov r8, r8)
 80024d4:	20000570 	.word	0x20000570
 80024d8:	20000498 	.word	0x20000498

080024dc <FN_RM01_Get_FileName>:

void FN_RM01_Get_FileName(int file_num, char *file_name)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
	file_name[0] = 0x30 | (file_num/1000);
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	23fa      	movs	r3, #250	; 0xfa
 80024ea:	0099      	lsls	r1, r3, #2
 80024ec:	0010      	movs	r0, r2
 80024ee:	f7fd fe95 	bl	800021c <__divsi3>
 80024f2:	0003      	movs	r3, r0
 80024f4:	b25b      	sxtb	r3, r3
 80024f6:	2230      	movs	r2, #48	; 0x30
 80024f8:	4313      	orrs	r3, r2
 80024fa:	b25b      	sxtb	r3, r3
 80024fc:	b2da      	uxtb	r2, r3
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	701a      	strb	r2, [r3, #0]
	file_name[1] = 0x30 | (file_num/100)%10;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2164      	movs	r1, #100	; 0x64
 8002506:	0018      	movs	r0, r3
 8002508:	f7fd fe88 	bl	800021c <__divsi3>
 800250c:	0003      	movs	r3, r0
 800250e:	210a      	movs	r1, #10
 8002510:	0018      	movs	r0, r3
 8002512:	f7fd ff69 	bl	80003e8 <__aeabi_idivmod>
 8002516:	000b      	movs	r3, r1
 8002518:	b25b      	sxtb	r3, r3
 800251a:	2230      	movs	r2, #48	; 0x30
 800251c:	4313      	orrs	r3, r2
 800251e:	b25a      	sxtb	r2, r3
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	3301      	adds	r3, #1
 8002524:	b2d2      	uxtb	r2, r2
 8002526:	701a      	strb	r2, [r3, #0]
	file_name[2] = 0x30 | (file_num/10)%10;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	210a      	movs	r1, #10
 800252c:	0018      	movs	r0, r3
 800252e:	f7fd fe75 	bl	800021c <__divsi3>
 8002532:	0003      	movs	r3, r0
 8002534:	210a      	movs	r1, #10
 8002536:	0018      	movs	r0, r3
 8002538:	f7fd ff56 	bl	80003e8 <__aeabi_idivmod>
 800253c:	000b      	movs	r3, r1
 800253e:	b25b      	sxtb	r3, r3
 8002540:	2230      	movs	r2, #48	; 0x30
 8002542:	4313      	orrs	r3, r2
 8002544:	b25a      	sxtb	r2, r3
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	3302      	adds	r3, #2
 800254a:	b2d2      	uxtb	r2, r2
 800254c:	701a      	strb	r2, [r3, #0]
	file_name[3] = 0x30 | (file_num%10);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	210a      	movs	r1, #10
 8002552:	0018      	movs	r0, r3
 8002554:	f7fd ff48 	bl	80003e8 <__aeabi_idivmod>
 8002558:	000b      	movs	r3, r1
 800255a:	b25b      	sxtb	r3, r3
 800255c:	2230      	movs	r2, #48	; 0x30
 800255e:	4313      	orrs	r3, r2
 8002560:	b25a      	sxtb	r2, r3
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	3303      	adds	r3, #3
 8002566:	b2d2      	uxtb	r2, r2
 8002568:	701a      	strb	r2, [r3, #0]
}
 800256a:	46c0      	nop			; (mov r8, r8)
 800256c:	46bd      	mov	sp, r7
 800256e:	b002      	add	sp, #8
 8002570:	bd80      	pop	{r7, pc}
	...

08002574 <Mifare_Classic_Read>:
#define BLOCK_SIZE 16
#define LONG_TLV_SIZE 4
#define SHORT_TLV_SIZE 2

int Mifare_Classic_Read(NFC_Tag *tag)
{
 8002574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002576:	b093      	sub	sp, #76	; 0x4c
 8002578:	af00      	add	r7, sp, #0
 800257a:	61f8      	str	r0, [r7, #28]
 800257c:	466b      	mov	r3, sp
 800257e:	61bb      	str	r3, [r7, #24]
	PN532_WakeUp();
 8002580:	f001 fa64 	bl	8003a4c <PN532_WakeUp>
	uint8_t key[] = {0xD3, 0xF7, 0xD3, 0xF7, 0xD3, 0xF7};	
 8002584:	201c      	movs	r0, #28
 8002586:	2318      	movs	r3, #24
 8002588:	18fb      	adds	r3, r7, r3
 800258a:	181b      	adds	r3, r3, r0
 800258c:	4a91      	ldr	r2, [pc, #580]	; (80027d4 <Mifare_Classic_Read+0x260>)
 800258e:	6811      	ldr	r1, [r2, #0]
 8002590:	6019      	str	r1, [r3, #0]
 8002592:	8892      	ldrh	r2, [r2, #4]
 8002594:	809a      	strh	r2, [r3, #4]
	
	uint8_t messageStartIndex = 0;
 8002596:	231b      	movs	r3, #27
 8002598:	2218      	movs	r2, #24
 800259a:	4694      	mov	ip, r2
 800259c:	44bc      	add	ip, r7
 800259e:	4463      	add	r3, ip
 80025a0:	2200      	movs	r2, #0
 80025a2:	701a      	strb	r2, [r3, #0]
  uint8_t messageLength = 0;
 80025a4:	231a      	movs	r3, #26
 80025a6:	2218      	movs	r2, #24
 80025a8:	4694      	mov	ip, r2
 80025aa:	44bc      	add	ip, r7
 80025ac:	4463      	add	r3, ip
 80025ae:	2200      	movs	r2, #0
 80025b0:	701a      	strb	r2, [r3, #0]
	uint8_t current_Block = 4;
 80025b2:	212e      	movs	r1, #46	; 0x2e
 80025b4:	2318      	movs	r3, #24
 80025b6:	18fb      	adds	r3, r7, r3
 80025b8:	185b      	adds	r3, r3, r1
 80025ba:	2204      	movs	r2, #4
 80025bc:	701a      	strb	r2, [r3, #0]
	uint8_t data[16];
	
	if(!Mifare_Classic_Authenicate_Block(tag, current_Block, 0, key))
 80025be:	2318      	movs	r3, #24
 80025c0:	18fb      	adds	r3, r7, r3
 80025c2:	181a      	adds	r2, r3, r0
 80025c4:	2318      	movs	r3, #24
 80025c6:	18fb      	adds	r3, r7, r3
 80025c8:	185b      	adds	r3, r3, r1
 80025ca:	7819      	ldrb	r1, [r3, #0]
 80025cc:	69f8      	ldr	r0, [r7, #28]
 80025ce:	0013      	movs	r3, r2
 80025d0:	2200      	movs	r2, #0
 80025d2:	f000 f901 	bl	80027d8 <Mifare_Classic_Authenicate_Block>
 80025d6:	1e03      	subs	r3, r0, #0
 80025d8:	d101      	bne.n	80025de <Mifare_Classic_Read+0x6a>
		return 0;
 80025da:	2300      	movs	r3, #0
 80025dc:	e0f3      	b.n	80027c6 <Mifare_Classic_Read+0x252>
	if(!Mifare_Classic_ReadDataBlock(current_Block, data))
 80025de:	2308      	movs	r3, #8
 80025e0:	2218      	movs	r2, #24
 80025e2:	18ba      	adds	r2, r7, r2
 80025e4:	18d2      	adds	r2, r2, r3
 80025e6:	232e      	movs	r3, #46	; 0x2e
 80025e8:	2118      	movs	r1, #24
 80025ea:	468c      	mov	ip, r1
 80025ec:	44bc      	add	ip, r7
 80025ee:	4463      	add	r3, ip
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	0011      	movs	r1, r2
 80025f4:	0018      	movs	r0, r3
 80025f6:	f000 f93f 	bl	8002878 <Mifare_Classic_ReadDataBlock>
 80025fa:	1e03      	subs	r3, r0, #0
 80025fc:	d101      	bne.n	8002602 <Mifare_Classic_Read+0x8e>
		return 0;
 80025fe:	2300      	movs	r3, #0
 8002600:	e0e1      	b.n	80027c6 <Mifare_Classic_Read+0x252>
	if(!Mifare_Classic_DecodeTlv(data, &messageLength, &messageStartIndex))		
 8002602:	231b      	movs	r3, #27
 8002604:	2218      	movs	r2, #24
 8002606:	18ba      	adds	r2, r7, r2
 8002608:	18d2      	adds	r2, r2, r3
 800260a:	231a      	movs	r3, #26
 800260c:	2118      	movs	r1, #24
 800260e:	1879      	adds	r1, r7, r1
 8002610:	18c9      	adds	r1, r1, r3
 8002612:	2308      	movs	r3, #8
 8002614:	2018      	movs	r0, #24
 8002616:	4684      	mov	ip, r0
 8002618:	44bc      	add	ip, r7
 800261a:	4463      	add	r3, ip
 800261c:	0018      	movs	r0, r3
 800261e:	f000 f967 	bl	80028f0 <Mifare_Classic_DecodeTlv>
 8002622:	1e03      	subs	r3, r0, #0
 8002624:	d101      	bne.n	800262a <Mifare_Classic_Read+0xb6>
		return 0;
 8002626:	2300      	movs	r3, #0
 8002628:	e0cd      	b.n	80027c6 <Mifare_Classic_Read+0x252>
	
	//message length loop
	uint8_t index = 0;
 800262a:	232f      	movs	r3, #47	; 0x2f
 800262c:	2218      	movs	r2, #24
 800262e:	4694      	mov	ip, r2
 8002630:	44bc      	add	ip, r7
 8002632:	4463      	add	r3, ip
 8002634:	2200      	movs	r2, #0
 8002636:	701a      	strb	r2, [r3, #0]
	uint16_t buffer_size = Mifare_Classic_GetBufferSize(messageLength);
 8002638:	231a      	movs	r3, #26
 800263a:	2218      	movs	r2, #24
 800263c:	4694      	mov	ip, r2
 800263e:	44bc      	add	ip, r7
 8002640:	4463      	add	r3, ip
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	0018      	movs	r0, r3
 8002646:	f000 f9be 	bl	80029c6 <Mifare_Classic_GetBufferSize>
 800264a:	0003      	movs	r3, r0
 800264c:	001a      	movs	r2, r3
 800264e:	212c      	movs	r1, #44	; 0x2c
 8002650:	2318      	movs	r3, #24
 8002652:	18fb      	adds	r3, r7, r3
 8002654:	185b      	adds	r3, r3, r1
 8002656:	801a      	strh	r2, [r3, #0]
	uint8_t buffer[buffer_size];
 8002658:	2318      	movs	r3, #24
 800265a:	18fb      	adds	r3, r7, r3
 800265c:	185b      	adds	r3, r3, r1
 800265e:	881b      	ldrh	r3, [r3, #0]
 8002660:	001a      	movs	r2, r3
 8002662:	3a01      	subs	r2, #1
 8002664:	643a      	str	r2, [r7, #64]	; 0x40
 8002666:	60bb      	str	r3, [r7, #8]
 8002668:	2200      	movs	r2, #0
 800266a:	60fa      	str	r2, [r7, #12]
 800266c:	68b8      	ldr	r0, [r7, #8]
 800266e:	68f9      	ldr	r1, [r7, #12]
 8002670:	0002      	movs	r2, r0
 8002672:	0f52      	lsrs	r2, r2, #29
 8002674:	000e      	movs	r6, r1
 8002676:	00f6      	lsls	r6, r6, #3
 8002678:	617e      	str	r6, [r7, #20]
 800267a:	697e      	ldr	r6, [r7, #20]
 800267c:	4316      	orrs	r6, r2
 800267e:	617e      	str	r6, [r7, #20]
 8002680:	0002      	movs	r2, r0
 8002682:	00d2      	lsls	r2, r2, #3
 8002684:	613a      	str	r2, [r7, #16]
 8002686:	603b      	str	r3, [r7, #0]
 8002688:	2200      	movs	r2, #0
 800268a:	607a      	str	r2, [r7, #4]
 800268c:	6838      	ldr	r0, [r7, #0]
 800268e:	6879      	ldr	r1, [r7, #4]
 8002690:	0002      	movs	r2, r0
 8002692:	0f52      	lsrs	r2, r2, #29
 8002694:	000e      	movs	r6, r1
 8002696:	00f5      	lsls	r5, r6, #3
 8002698:	4315      	orrs	r5, r2
 800269a:	0002      	movs	r2, r0
 800269c:	00d4      	lsls	r4, r2, #3
 800269e:	3307      	adds	r3, #7
 80026a0:	08db      	lsrs	r3, r3, #3
 80026a2:	00db      	lsls	r3, r3, #3
 80026a4:	466a      	mov	r2, sp
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	469d      	mov	sp, r3
 80026aa:	466b      	mov	r3, sp
 80026ac:	3300      	adds	r3, #0
 80026ae:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(buffer, 0, buffer_size);
 80026b0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80026b2:	212c      	movs	r1, #44	; 0x2c
 80026b4:	2318      	movs	r3, #24
 80026b6:	18fb      	adds	r3, r7, r3
 80026b8:	185b      	adds	r3, r3, r1
 80026ba:	881b      	ldrh	r3, [r3, #0]
 80026bc:	001a      	movs	r2, r3
 80026be:	2100      	movs	r1, #0
 80026c0:	f002 f82c 	bl	800471c <memset>
	
	while (index < buffer_size)
 80026c4:	e05b      	b.n	800277e <Mifare_Classic_Read+0x20a>
	{
		if(Mifare_Classic_IsFirstBlock(current_Block))
 80026c6:	232e      	movs	r3, #46	; 0x2e
 80026c8:	2218      	movs	r2, #24
 80026ca:	4694      	mov	ip, r2
 80026cc:	44bc      	add	ip, r7
 80026ce:	4463      	add	r3, ip
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	0018      	movs	r0, r3
 80026d4:	f000 f99d 	bl	8002a12 <Mifare_Classic_IsFirstBlock>
 80026d8:	1e03      	subs	r3, r0, #0
 80026da:	d012      	beq.n	8002702 <Mifare_Classic_Read+0x18e>
		{
			if(!Mifare_Classic_Authenicate_Block(tag, current_Block, 0, key))
 80026dc:	231c      	movs	r3, #28
 80026de:	2218      	movs	r2, #24
 80026e0:	18ba      	adds	r2, r7, r2
 80026e2:	18d2      	adds	r2, r2, r3
 80026e4:	232e      	movs	r3, #46	; 0x2e
 80026e6:	2118      	movs	r1, #24
 80026e8:	468c      	mov	ip, r1
 80026ea:	44bc      	add	ip, r7
 80026ec:	4463      	add	r3, ip
 80026ee:	7819      	ldrb	r1, [r3, #0]
 80026f0:	69f8      	ldr	r0, [r7, #28]
 80026f2:	0013      	movs	r3, r2
 80026f4:	2200      	movs	r2, #0
 80026f6:	f000 f86f 	bl	80027d8 <Mifare_Classic_Authenicate_Block>
 80026fa:	1e03      	subs	r3, r0, #0
 80026fc:	d101      	bne.n	8002702 <Mifare_Classic_Read+0x18e>
				return 0;		
 80026fe:	2300      	movs	r3, #0
 8002700:	e061      	b.n	80027c6 <Mifare_Classic_Read+0x252>
		}
		
		if(!Mifare_Classic_ReadDataBlock(current_Block, &buffer[index]))
 8002702:	232f      	movs	r3, #47	; 0x2f
 8002704:	2218      	movs	r2, #24
 8002706:	4694      	mov	ip, r2
 8002708:	44bc      	add	ip, r7
 800270a:	4463      	add	r3, ip
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002710:	18d2      	adds	r2, r2, r3
 8002712:	232e      	movs	r3, #46	; 0x2e
 8002714:	2118      	movs	r1, #24
 8002716:	468c      	mov	ip, r1
 8002718:	44bc      	add	ip, r7
 800271a:	4463      	add	r3, ip
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	0011      	movs	r1, r2
 8002720:	0018      	movs	r0, r3
 8002722:	f000 f8a9 	bl	8002878 <Mifare_Classic_ReadDataBlock>
 8002726:	1e03      	subs	r3, r0, #0
 8002728:	d101      	bne.n	800272e <Mifare_Classic_Read+0x1ba>
			return 0;
 800272a:	2300      	movs	r3, #0
 800272c:	e04b      	b.n	80027c6 <Mifare_Classic_Read+0x252>
		
		index += BLOCK_SIZE;
 800272e:	222f      	movs	r2, #47	; 0x2f
 8002730:	2318      	movs	r3, #24
 8002732:	18fb      	adds	r3, r7, r3
 8002734:	189b      	adds	r3, r3, r2
 8002736:	2118      	movs	r1, #24
 8002738:	468c      	mov	ip, r1
 800273a:	44bc      	add	ip, r7
 800273c:	4462      	add	r2, ip
 800273e:	7812      	ldrb	r2, [r2, #0]
 8002740:	3210      	adds	r2, #16
 8002742:	701a      	strb	r2, [r3, #0]
		current_Block++;
 8002744:	212e      	movs	r1, #46	; 0x2e
 8002746:	2318      	movs	r3, #24
 8002748:	18fb      	adds	r3, r7, r3
 800274a:	185b      	adds	r3, r3, r1
 800274c:	781a      	ldrb	r2, [r3, #0]
 800274e:	2318      	movs	r3, #24
 8002750:	18fb      	adds	r3, r7, r3
 8002752:	185b      	adds	r3, r3, r1
 8002754:	3201      	adds	r2, #1
 8002756:	701a      	strb	r2, [r3, #0]
		
		if(Mifare_Classic_IsTrailerBlock(current_Block))
 8002758:	2318      	movs	r3, #24
 800275a:	18fb      	adds	r3, r7, r3
 800275c:	185b      	adds	r3, r3, r1
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	0018      	movs	r0, r3
 8002762:	f000 f96e 	bl	8002a42 <Mifare_Classic_IsTrailerBlock>
 8002766:	1e03      	subs	r3, r0, #0
 8002768:	d009      	beq.n	800277e <Mifare_Classic_Read+0x20a>
			current_Block++;
 800276a:	212e      	movs	r1, #46	; 0x2e
 800276c:	2318      	movs	r3, #24
 800276e:	18fb      	adds	r3, r7, r3
 8002770:	185b      	adds	r3, r3, r1
 8002772:	781a      	ldrb	r2, [r3, #0]
 8002774:	2318      	movs	r3, #24
 8002776:	18fb      	adds	r3, r7, r3
 8002778:	185b      	adds	r3, r3, r1
 800277a:	3201      	adds	r2, #1
 800277c:	701a      	strb	r2, [r3, #0]
	while (index < buffer_size)
 800277e:	232f      	movs	r3, #47	; 0x2f
 8002780:	2218      	movs	r2, #24
 8002782:	4694      	mov	ip, r2
 8002784:	44bc      	add	ip, r7
 8002786:	4463      	add	r3, ip
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	b29b      	uxth	r3, r3
 800278c:	222c      	movs	r2, #44	; 0x2c
 800278e:	2118      	movs	r1, #24
 8002790:	468c      	mov	ip, r1
 8002792:	44bc      	add	ip, r7
 8002794:	4462      	add	r2, ip
 8002796:	8812      	ldrh	r2, [r2, #0]
 8002798:	429a      	cmp	r2, r3
 800279a:	d894      	bhi.n	80026c6 <Mifare_Classic_Read+0x152>
	}	
	
	return Get_NDEF_Message(&buffer[messageStartIndex], messageLength, &tag->ndefMessage);
 800279c:	231b      	movs	r3, #27
 800279e:	2218      	movs	r2, #24
 80027a0:	4694      	mov	ip, r2
 80027a2:	44bc      	add	ip, r7
 80027a4:	4463      	add	r3, ip
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	001a      	movs	r2, r3
 80027aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027ac:	1898      	adds	r0, r3, r2
 80027ae:	231a      	movs	r3, #26
 80027b0:	2218      	movs	r2, #24
 80027b2:	4694      	mov	ip, r2
 80027b4:	44bc      	add	ip, r7
 80027b6:	4463      	add	r3, ip
 80027b8:	7819      	ldrb	r1, [r3, #0]
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	3309      	adds	r3, #9
 80027be:	001a      	movs	r2, r3
 80027c0:	f000 fd73 	bl	80032aa <Get_NDEF_Message>
 80027c4:	0003      	movs	r3, r0
 80027c6:	69ba      	ldr	r2, [r7, #24]
 80027c8:	4695      	mov	sp, r2
}
 80027ca:	0018      	movs	r0, r3
 80027cc:	46bd      	mov	sp, r7
 80027ce:	b013      	add	sp, #76	; 0x4c
 80027d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027d2:	46c0      	nop			; (mov r8, r8)
 80027d4:	08004764 	.word	0x08004764

080027d8 <Mifare_Classic_Authenicate_Block>:

int Mifare_Classic_Authenicate_Block(NFC_Tag *tag, uint8_t blockNumber, uint8_t keyNumber, uint8_t *keyData)
{
 80027d8:	b590      	push	{r4, r7, lr}
 80027da:	b089      	sub	sp, #36	; 0x24
 80027dc:	af00      	add	r7, sp, #0
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	0008      	movs	r0, r1
 80027e2:	0011      	movs	r1, r2
 80027e4:	607b      	str	r3, [r7, #4]
 80027e6:	230b      	movs	r3, #11
 80027e8:	18fb      	adds	r3, r7, r3
 80027ea:	1c02      	adds	r2, r0, #0
 80027ec:	701a      	strb	r2, [r3, #0]
 80027ee:	200a      	movs	r0, #10
 80027f0:	183b      	adds	r3, r7, r0
 80027f2:	1c0a      	adds	r2, r1, #0
 80027f4:	701a      	strb	r2, [r3, #0]
	uint8_t AuthenticateBlock_cmd[14];
	
	AuthenticateBlock_cmd[0] = PN532_COMMAND_INDATAEXCHANGE;
 80027f6:	2110      	movs	r1, #16
 80027f8:	187b      	adds	r3, r7, r1
 80027fa:	2240      	movs	r2, #64	; 0x40
 80027fc:	701a      	strb	r2, [r3, #0]
	AuthenticateBlock_cmd[1] = 0x01;//Tg
 80027fe:	187b      	adds	r3, r7, r1
 8002800:	2201      	movs	r2, #1
 8002802:	705a      	strb	r2, [r3, #1]
	AuthenticateBlock_cmd[2] = (keyNumber) ? 0x61:0x60;//MIFARE_CMD_AUTH_B:MIFARE_CMD_AUTH_A
 8002804:	183b      	adds	r3, r7, r0
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d001      	beq.n	8002810 <Mifare_Classic_Authenicate_Block+0x38>
 800280c:	2261      	movs	r2, #97	; 0x61
 800280e:	e000      	b.n	8002812 <Mifare_Classic_Authenicate_Block+0x3a>
 8002810:	2260      	movs	r2, #96	; 0x60
 8002812:	2410      	movs	r4, #16
 8002814:	193b      	adds	r3, r7, r4
 8002816:	709a      	strb	r2, [r3, #2]
	AuthenticateBlock_cmd[3] = blockNumber;//Block_num
 8002818:	193b      	adds	r3, r7, r4
 800281a:	220b      	movs	r2, #11
 800281c:	18ba      	adds	r2, r7, r2
 800281e:	7812      	ldrb	r2, [r2, #0]
 8002820:	70da      	strb	r2, [r3, #3]
	memcpy(&AuthenticateBlock_cmd[0] + 4, &keyData[0], 6);//key
 8002822:	193b      	adds	r3, r7, r4
 8002824:	3304      	adds	r3, #4
 8002826:	6879      	ldr	r1, [r7, #4]
 8002828:	2206      	movs	r2, #6
 800282a:	0018      	movs	r0, r3
 800282c:	f001 ff6d 	bl	800470a <memcpy>
	memcpy(AuthenticateBlock_cmd + 10, tag->uid, tag->uid_len);//UID
 8002830:	193b      	adds	r3, r7, r4
 8002832:	330a      	adds	r3, #10
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	1c51      	adds	r1, r2, #1
 8002838:	68fa      	ldr	r2, [r7, #12]
 800283a:	7a12      	ldrb	r2, [r2, #8]
 800283c:	0018      	movs	r0, r3
 800283e:	f001 ff64 	bl	800470a <memcpy>
	
	if(PN532_WriteCommand(AuthenticateBlock_cmd, sizeof(AuthenticateBlock_cmd)))
 8002842:	193b      	adds	r3, r7, r4
 8002844:	210e      	movs	r1, #14
 8002846:	0018      	movs	r0, r3
 8002848:	f001 f922 	bl	8003a90 <PN532_WriteCommand>
 800284c:	1e03      	subs	r3, r0, #0
 800284e:	d00b      	beq.n	8002868 <Mifare_Classic_Authenicate_Block+0x90>
	{
		if(uart1_rx_data[12] == 0x41 && uart1_rx_data[13] == 0)//status 
 8002850:	4b08      	ldr	r3, [pc, #32]	; (8002874 <Mifare_Classic_Authenicate_Block+0x9c>)
 8002852:	7b1b      	ldrb	r3, [r3, #12]
 8002854:	2b41      	cmp	r3, #65	; 0x41
 8002856:	d107      	bne.n	8002868 <Mifare_Classic_Authenicate_Block+0x90>
 8002858:	4b06      	ldr	r3, [pc, #24]	; (8002874 <Mifare_Classic_Authenicate_Block+0x9c>)
 800285a:	7b5b      	ldrb	r3, [r3, #13]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d103      	bne.n	8002868 <Mifare_Classic_Authenicate_Block+0x90>
		{
			clean_uart1_rx_data();
 8002860:	f001 fe9a 	bl	8004598 <clean_uart1_rx_data>
			return 1;
 8002864:	2301      	movs	r3, #1
 8002866:	e000      	b.n	800286a <Mifare_Classic_Authenicate_Block+0x92>
		}
	}
	return 0;
 8002868:	2300      	movs	r3, #0
}
 800286a:	0018      	movs	r0, r3
 800286c:	46bd      	mov	sp, r7
 800286e:	b009      	add	sp, #36	; 0x24
 8002870:	bd90      	pop	{r4, r7, pc}
 8002872:	46c0      	nop			; (mov r8, r8)
 8002874:	2000053c 	.word	0x2000053c

08002878 <Mifare_Classic_ReadDataBlock>:

int Mifare_Classic_ReadDataBlock(uint8_t blockNumber, uint8_t *data)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	0002      	movs	r2, r0
 8002880:	6039      	str	r1, [r7, #0]
 8002882:	1dfb      	adds	r3, r7, #7
 8002884:	701a      	strb	r2, [r3, #0]
	uint8_t ReadDataBlock_cmd[4];
	
	ReadDataBlock_cmd[0]=PN532_COMMAND_INDATAEXCHANGE;
 8002886:	210c      	movs	r1, #12
 8002888:	187b      	adds	r3, r7, r1
 800288a:	2240      	movs	r2, #64	; 0x40
 800288c:	701a      	strb	r2, [r3, #0]
	ReadDataBlock_cmd[1]=0x01;//Tg
 800288e:	187b      	adds	r3, r7, r1
 8002890:	2201      	movs	r2, #1
 8002892:	705a      	strb	r2, [r3, #1]
	ReadDataBlock_cmd[2]=0x30;//DataOut
 8002894:	187b      	adds	r3, r7, r1
 8002896:	2230      	movs	r2, #48	; 0x30
 8002898:	709a      	strb	r2, [r3, #2]
	ReadDataBlock_cmd[3]=blockNumber;//Page	
 800289a:	187b      	adds	r3, r7, r1
 800289c:	1dfa      	adds	r2, r7, #7
 800289e:	7812      	ldrb	r2, [r2, #0]
 80028a0:	70da      	strb	r2, [r3, #3]
	
	if(PN532_WriteCommand(ReadDataBlock_cmd, sizeof(ReadDataBlock_cmd)))
 80028a2:	187b      	adds	r3, r7, r1
 80028a4:	2104      	movs	r1, #4
 80028a6:	0018      	movs	r0, r3
 80028a8:	f001 f8f2 	bl	8003a90 <PN532_WriteCommand>
 80028ac:	1e03      	subs	r3, r0, #0
 80028ae:	d015      	beq.n	80028dc <Mifare_Classic_ReadDataBlock+0x64>
	{
		if(uart1_rx_data[12] != 0x41 || uart1_rx_data[13] != 0)
 80028b0:	4b0d      	ldr	r3, [pc, #52]	; (80028e8 <Mifare_Classic_ReadDataBlock+0x70>)
 80028b2:	7b1b      	ldrb	r3, [r3, #12]
 80028b4:	2b41      	cmp	r3, #65	; 0x41
 80028b6:	d103      	bne.n	80028c0 <Mifare_Classic_ReadDataBlock+0x48>
 80028b8:	4b0b      	ldr	r3, [pc, #44]	; (80028e8 <Mifare_Classic_ReadDataBlock+0x70>)
 80028ba:	7b5b      	ldrb	r3, [r3, #13]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d003      	beq.n	80028c8 <Mifare_Classic_ReadDataBlock+0x50>
		{
			clean_uart1_rx_data();
 80028c0:	f001 fe6a 	bl	8004598 <clean_uart1_rx_data>
			return 0;
 80028c4:	2300      	movs	r3, #0
 80028c6:	e00a      	b.n	80028de <Mifare_Classic_ReadDataBlock+0x66>
		}
	
		memcpy(&data[0], &uart1_rx_data[14],16);
 80028c8:	4908      	ldr	r1, [pc, #32]	; (80028ec <Mifare_Classic_ReadDataBlock+0x74>)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	2210      	movs	r2, #16
 80028ce:	0018      	movs	r0, r3
 80028d0:	f001 ff1b 	bl	800470a <memcpy>
		clean_uart1_rx_data();
 80028d4:	f001 fe60 	bl	8004598 <clean_uart1_rx_data>
		return 1;
 80028d8:	2301      	movs	r3, #1
 80028da:	e000      	b.n	80028de <Mifare_Classic_ReadDataBlock+0x66>
	}
	return 0;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	0018      	movs	r0, r3
 80028e0:	46bd      	mov	sp, r7
 80028e2:	b004      	add	sp, #16
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	46c0      	nop			; (mov r8, r8)
 80028e8:	2000053c 	.word	0x2000053c
 80028ec:	2000054a 	.word	0x2000054a

080028f0 <Mifare_Classic_DecodeTlv>:

int Mifare_Classic_DecodeTlv(uint8_t *data, uint8_t *messageLength, uint8_t *messageStartIndex)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b086      	sub	sp, #24
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
	int i = Mifare_Classic_GetNdefStartIndex(data);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	0018      	movs	r0, r3
 8002900:	f000 f83f 	bl	8002982 <Mifare_Classic_GetNdefStartIndex>
 8002904:	0003      	movs	r3, r0
 8002906:	617b      	str	r3, [r7, #20]
	if (i < 0 || data[i] != 0x3)
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	2b00      	cmp	r3, #0
 800290c:	db05      	blt.n	800291a <Mifare_Classic_DecodeTlv+0x2a>
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	68fa      	ldr	r2, [r7, #12]
 8002912:	18d3      	adds	r3, r2, r3
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	2b03      	cmp	r3, #3
 8002918:	d001      	beq.n	800291e <Mifare_Classic_DecodeTlv+0x2e>
  {
    return 0;
 800291a:	2300      	movs	r3, #0
 800291c:	e02d      	b.n	800297a <Mifare_Classic_DecodeTlv+0x8a>
  }
	
	if(data[i+1] == 0xFF)
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	3301      	adds	r3, #1
 8002922:	68fa      	ldr	r2, [r7, #12]
 8002924:	18d3      	adds	r3, r2, r3
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	2bff      	cmp	r3, #255	; 0xff
 800292a:	d118      	bne.n	800295e <Mifare_Classic_DecodeTlv+0x6e>
  {
		*messageLength = ((0xFF & data[i+2]) << 8) | (0xFF & data[i+3]);
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	3302      	adds	r3, #2
 8002930:	68fa      	ldr	r2, [r7, #12]
 8002932:	18d3      	adds	r3, r2, r3
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	021b      	lsls	r3, r3, #8
 8002938:	b25a      	sxtb	r2, r3
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	3303      	adds	r3, #3
 800293e:	68f9      	ldr	r1, [r7, #12]
 8002940:	18cb      	adds	r3, r1, r3
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	b25b      	sxtb	r3, r3
 8002946:	4313      	orrs	r3, r2
 8002948:	b25b      	sxtb	r3, r3
 800294a:	b2da      	uxtb	r2, r3
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	701a      	strb	r2, [r3, #0]
    *messageStartIndex = i + LONG_TLV_SIZE;
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	b2db      	uxtb	r3, r3
 8002954:	3304      	adds	r3, #4
 8002956:	b2da      	uxtb	r2, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	701a      	strb	r2, [r3, #0]
 800295c:	e00c      	b.n	8002978 <Mifare_Classic_DecodeTlv+0x88>
  }
  else
  {
		*messageLength = data[i+1];
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	3301      	adds	r3, #1
 8002962:	68fa      	ldr	r2, [r7, #12]
 8002964:	18d3      	adds	r3, r2, r3
 8002966:	781a      	ldrb	r2, [r3, #0]
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	701a      	strb	r2, [r3, #0]
		*messageStartIndex = i + SHORT_TLV_SIZE;
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	b2db      	uxtb	r3, r3
 8002970:	3302      	adds	r3, #2
 8002972:	b2da      	uxtb	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	701a      	strb	r2, [r3, #0]
  }
  return 1;
 8002978:	2301      	movs	r3, #1
}
 800297a:	0018      	movs	r0, r3
 800297c:	46bd      	mov	sp, r7
 800297e:	b006      	add	sp, #24
 8002980:	bd80      	pop	{r7, pc}

08002982 <Mifare_Classic_GetNdefStartIndex>:

int Mifare_Classic_GetNdefStartIndex(uint8_t *data)
{
 8002982:	b580      	push	{r7, lr}
 8002984:	b084      	sub	sp, #16
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < BLOCK_SIZE; i++)
 800298a:	2300      	movs	r3, #0
 800298c:	60fb      	str	r3, [r7, #12]
 800298e:	e011      	b.n	80029b4 <Mifare_Classic_GetNdefStartIndex+0x32>
  {
		switch(data[i])
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	18d3      	adds	r3, r2, r3
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d002      	beq.n	80029a2 <Mifare_Classic_GetNdefStartIndex+0x20>
 800299c:	2b03      	cmp	r3, #3
 800299e:	d004      	beq.n	80029aa <Mifare_Classic_GetNdefStartIndex+0x28>
 80029a0:	e005      	b.n	80029ae <Mifare_Classic_GetNdefStartIndex+0x2c>
	for (int i = 0; i < BLOCK_SIZE; i++)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	3301      	adds	r3, #1
 80029a6:	60fb      	str	r3, [r7, #12]
 80029a8:	e004      	b.n	80029b4 <Mifare_Classic_GetNdefStartIndex+0x32>
		{
			case 0x0:	break;
			case 0x3:	return i;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	e007      	b.n	80029be <Mifare_Classic_GetNdefStartIndex+0x3c>
			default:	return -2;		
 80029ae:	2302      	movs	r3, #2
 80029b0:	425b      	negs	r3, r3
 80029b2:	e004      	b.n	80029be <Mifare_Classic_GetNdefStartIndex+0x3c>
	for (int i = 0; i < BLOCK_SIZE; i++)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2b0f      	cmp	r3, #15
 80029b8:	ddea      	ble.n	8002990 <Mifare_Classic_GetNdefStartIndex+0xe>
		}
	}
  return -1;
 80029ba:	2301      	movs	r3, #1
 80029bc:	425b      	negs	r3, r3
}
 80029be:	0018      	movs	r0, r3
 80029c0:	46bd      	mov	sp, r7
 80029c2:	b004      	add	sp, #16
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <Mifare_Classic_GetBufferSize>:

uint8_t Mifare_Classic_GetBufferSize(uint8_t message_len)
{	
 80029c6:	b580      	push	{r7, lr}
 80029c8:	b084      	sub	sp, #16
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	0002      	movs	r2, r0
 80029ce:	1dfb      	adds	r3, r7, #7
 80029d0:	701a      	strb	r2, [r3, #0]
	int bufferSize = message_len;
 80029d2:	1dfb      	adds	r3, r7, #7
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	60fb      	str	r3, [r7, #12]

  // TLV header is 2 or 4 bytes, TLV terminator is 1 byte.
  if (message_len < 0xFF)
 80029d8:	1dfb      	adds	r3, r7, #7
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	2bff      	cmp	r3, #255	; 0xff
 80029de:	d003      	beq.n	80029e8 <Mifare_Classic_GetBufferSize+0x22>
		bufferSize += SHORT_TLV_SIZE + 1;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	3303      	adds	r3, #3
 80029e4:	60fb      	str	r3, [r7, #12]
 80029e6:	e002      	b.n	80029ee <Mifare_Classic_GetBufferSize+0x28>
  else
    bufferSize += LONG_TLV_SIZE + 1;    
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	3305      	adds	r3, #5
 80029ec:	60fb      	str	r3, [r7, #12]

  // bufferSize needs to be a multiple of BLOCK_SIZE
  if (bufferSize % BLOCK_SIZE != 0)
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	220f      	movs	r2, #15
 80029f2:	4013      	ands	r3, r2
 80029f4:	d007      	beq.n	8002a06 <Mifare_Classic_GetBufferSize+0x40>
		bufferSize = ((bufferSize / BLOCK_SIZE) + 1) * BLOCK_SIZE;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	da00      	bge.n	80029fe <Mifare_Classic_GetBufferSize+0x38>
 80029fc:	330f      	adds	r3, #15
 80029fe:	111b      	asrs	r3, r3, #4
 8002a00:	3301      	adds	r3, #1
 8002a02:	011b      	lsls	r3, r3, #4
 8002a04:	60fb      	str	r3, [r7, #12]

  return bufferSize;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	b2db      	uxtb	r3, r3
}
 8002a0a:	0018      	movs	r0, r3
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	b004      	add	sp, #16
 8002a10:	bd80      	pop	{r7, pc}

08002a12 <Mifare_Classic_IsFirstBlock>:

int Mifare_Classic_IsFirstBlock(uint32_t uiBlock)
{
 8002a12:	b580      	push	{r7, lr}
 8002a14:	b082      	sub	sp, #8
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
	if (uiBlock < 128)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2b7f      	cmp	r3, #127	; 0x7f
 8002a1e:	d806      	bhi.n	8002a2e <Mifare_Classic_IsFirstBlock+0x1c>
		return ((uiBlock) % 4 == 0);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2203      	movs	r2, #3
 8002a24:	4013      	ands	r3, r2
 8002a26:	425a      	negs	r2, r3
 8002a28:	4153      	adcs	r3, r2
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	e005      	b.n	8002a3a <Mifare_Classic_IsFirstBlock+0x28>
	else
		return ((uiBlock) % 16 == 0);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	220f      	movs	r2, #15
 8002a32:	4013      	ands	r3, r2
 8002a34:	425a      	negs	r2, r3
 8002a36:	4153      	adcs	r3, r2
 8002a38:	b2db      	uxtb	r3, r3
}
 8002a3a:	0018      	movs	r0, r3
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	b002      	add	sp, #8
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <Mifare_Classic_IsTrailerBlock>:

int Mifare_Classic_IsTrailerBlock (uint32_t uiBlock)
{
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b082      	sub	sp, #8
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
	if (uiBlock < 128)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2b7f      	cmp	r3, #127	; 0x7f
 8002a4e:	d807      	bhi.n	8002a60 <Mifare_Classic_IsTrailerBlock+0x1e>
		return ((uiBlock + 1) % 4 == 0);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	3301      	adds	r3, #1
 8002a54:	2203      	movs	r2, #3
 8002a56:	4013      	ands	r3, r2
 8002a58:	425a      	negs	r2, r3
 8002a5a:	4153      	adcs	r3, r2
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	e006      	b.n	8002a6e <Mifare_Classic_IsTrailerBlock+0x2c>
	else
		return ((uiBlock + 1) % 16 == 0);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	3301      	adds	r3, #1
 8002a64:	220f      	movs	r2, #15
 8002a66:	4013      	ands	r3, r2
 8002a68:	425a      	negs	r2, r3
 8002a6a:	4153      	adcs	r3, r2
 8002a6c:	b2db      	uxtb	r3, r3
}
 8002a6e:	0018      	movs	r0, r3
 8002a70:	46bd      	mov	sp, r7
 8002a72:	b002      	add	sp, #8
 8002a74:	bd80      	pop	{r7, pc}
	...

08002a78 <Mifare_Classic_Write>:

int Mifare_Classic_Write(NFC_Tag *tag)
{
 8002a78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a7a:	b099      	sub	sp, #100	; 0x64
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002a80:	466b      	mov	r3, sp
 8002a82:	63bb      	str	r3, [r7, #56]	; 0x38
	PN532_WakeUp();
 8002a84:	f000 ffe2 	bl	8003a4c <PN532_WakeUp>
	uint8_t encoded_size = NDEF_Message_GetEncodeSize(&tag->ndefMessage);
 8002a88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a8a:	3309      	adds	r3, #9
 8002a8c:	0018      	movs	r0, r3
 8002a8e:	f000 fd32 	bl	80034f6 <NDEF_Message_GetEncodeSize>
 8002a92:	0003      	movs	r3, r0
 8002a94:	2225      	movs	r2, #37	; 0x25
 8002a96:	0011      	movs	r1, r2
 8002a98:	2038      	movs	r0, #56	; 0x38
 8002a9a:	4684      	mov	ip, r0
 8002a9c:	44bc      	add	ip, r7
 8002a9e:	4462      	add	r2, ip
 8002aa0:	7013      	strb	r3, [r2, #0]
	uint8_t encoded[encoded_size];
 8002aa2:	000a      	movs	r2, r1
 8002aa4:	2338      	movs	r3, #56	; 0x38
 8002aa6:	18fb      	adds	r3, r7, r3
 8002aa8:	189b      	adds	r3, r3, r2
 8002aaa:	781e      	ldrb	r6, [r3, #0]
 8002aac:	0033      	movs	r3, r6
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	65bb      	str	r3, [r7, #88]	; 0x58
 8002ab2:	61be      	str	r6, [r7, #24]
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	61fb      	str	r3, [r7, #28]
 8002ab8:	69b8      	ldr	r0, [r7, #24]
 8002aba:	69f9      	ldr	r1, [r7, #28]
 8002abc:	0003      	movs	r3, r0
 8002abe:	0f5b      	lsrs	r3, r3, #29
 8002ac0:	469c      	mov	ip, r3
 8002ac2:	000b      	movs	r3, r1
 8002ac4:	00dd      	lsls	r5, r3, #3
 8002ac6:	4663      	mov	r3, ip
 8002ac8:	431d      	orrs	r5, r3
 8002aca:	0003      	movs	r3, r0
 8002acc:	00dc      	lsls	r4, r3, #3
 8002ace:	613e      	str	r6, [r7, #16]
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	617b      	str	r3, [r7, #20]
 8002ad4:	6938      	ldr	r0, [r7, #16]
 8002ad6:	6979      	ldr	r1, [r7, #20]
 8002ad8:	0003      	movs	r3, r0
 8002ada:	0f5b      	lsrs	r3, r3, #29
 8002adc:	000c      	movs	r4, r1
 8002ade:	00e4      	lsls	r4, r4, #3
 8002ae0:	637c      	str	r4, [r7, #52]	; 0x34
 8002ae2:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 8002ae4:	431c      	orrs	r4, r3
 8002ae6:	637c      	str	r4, [r7, #52]	; 0x34
 8002ae8:	0003      	movs	r3, r0
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	633b      	str	r3, [r7, #48]	; 0x30
 8002aee:	0033      	movs	r3, r6
 8002af0:	3307      	adds	r3, #7
 8002af2:	08db      	lsrs	r3, r3, #3
 8002af4:	00db      	lsls	r3, r3, #3
 8002af6:	4669      	mov	r1, sp
 8002af8:	1acb      	subs	r3, r1, r3
 8002afa:	469d      	mov	sp, r3
 8002afc:	466b      	mov	r3, sp
 8002afe:	3300      	adds	r3, #0
 8002b00:	657b      	str	r3, [r7, #84]	; 0x54
	memset(encoded, 0, encoded_size);
 8002b02:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002b04:	0015      	movs	r5, r2
 8002b06:	2338      	movs	r3, #56	; 0x38
 8002b08:	18fb      	adds	r3, r7, r3
 8002b0a:	189b      	adds	r3, r3, r2
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	001a      	movs	r2, r3
 8002b10:	2100      	movs	r1, #0
 8002b12:	f001 fe03 	bl	800471c <memset>
	NDEF_Message_Encode(encoded, &tag->ndefMessage);
 8002b16:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002b18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b1a:	3309      	adds	r3, #9
 8002b1c:	0019      	movs	r1, r3
 8002b1e:	0010      	movs	r0, r2
 8002b20:	f000 fd12 	bl	8003548 <NDEF_Message_Encode>
	
	uint8_t buffer_size = Mifare_Classic_GetBufferSize(sizeof(encoded))+2;
 8002b24:	0030      	movs	r0, r6
 8002b26:	f7ff ff4e 	bl	80029c6 <Mifare_Classic_GetBufferSize>
 8002b2a:	0003      	movs	r3, r0
 8002b2c:	001a      	movs	r2, r3
 8002b2e:	211b      	movs	r1, #27
 8002b30:	2338      	movs	r3, #56	; 0x38
 8002b32:	18fb      	adds	r3, r7, r3
 8002b34:	185b      	adds	r3, r3, r1
 8002b36:	3202      	adds	r2, #2
 8002b38:	701a      	strb	r2, [r3, #0]
	uint8_t buffer[buffer_size]; //2 bytes for empty record
 8002b3a:	2338      	movs	r3, #56	; 0x38
 8002b3c:	18fb      	adds	r3, r7, r3
 8002b3e:	185b      	adds	r3, r3, r1
 8002b40:	781c      	ldrb	r4, [r3, #0]
 8002b42:	0023      	movs	r3, r4
 8002b44:	3b01      	subs	r3, #1
 8002b46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b48:	60bc      	str	r4, [r7, #8]
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	60fb      	str	r3, [r7, #12]
 8002b4e:	68b9      	ldr	r1, [r7, #8]
 8002b50:	68fa      	ldr	r2, [r7, #12]
 8002b52:	000b      	movs	r3, r1
 8002b54:	0f5b      	lsrs	r3, r3, #29
 8002b56:	0010      	movs	r0, r2
 8002b58:	00c0      	lsls	r0, r0, #3
 8002b5a:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002b5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002b5e:	4318      	orrs	r0, r3
 8002b60:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002b62:	000b      	movs	r3, r1
 8002b64:	00db      	lsls	r3, r3, #3
 8002b66:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b68:	603c      	str	r4, [r7, #0]
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	607b      	str	r3, [r7, #4]
 8002b6e:	6839      	ldr	r1, [r7, #0]
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	000b      	movs	r3, r1
 8002b74:	0f5b      	lsrs	r3, r3, #29
 8002b76:	0010      	movs	r0, r2
 8002b78:	00c0      	lsls	r0, r0, #3
 8002b7a:	6278      	str	r0, [r7, #36]	; 0x24
 8002b7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002b7e:	4318      	orrs	r0, r3
 8002b80:	6278      	str	r0, [r7, #36]	; 0x24
 8002b82:	000b      	movs	r3, r1
 8002b84:	00db      	lsls	r3, r3, #3
 8002b86:	623b      	str	r3, [r7, #32]
 8002b88:	0023      	movs	r3, r4
 8002b8a:	3307      	adds	r3, #7
 8002b8c:	08db      	lsrs	r3, r3, #3
 8002b8e:	00db      	lsls	r3, r3, #3
 8002b90:	466a      	mov	r2, sp
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	469d      	mov	sp, r3
 8002b96:	466b      	mov	r3, sp
 8002b98:	3300      	adds	r3, #0
 8002b9a:	64bb      	str	r3, [r7, #72]	; 0x48
	memset(buffer, 0, buffer_size);
 8002b9c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002b9e:	211b      	movs	r1, #27
 8002ba0:	2338      	movs	r3, #56	; 0x38
 8002ba2:	18fb      	adds	r3, r7, r3
 8002ba4:	185b      	adds	r3, r3, r1
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	001a      	movs	r2, r3
 8002baa:	2100      	movs	r1, #0
 8002bac:	f001 fdb6 	bl	800471c <memset>
	
	if(encoded_size < 0xFF)
 8002bb0:	2338      	movs	r3, #56	; 0x38
 8002bb2:	18fb      	adds	r3, r7, r3
 8002bb4:	195b      	adds	r3, r3, r5
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	2bff      	cmp	r3, #255	; 0xff
 8002bba:	d012      	beq.n	8002be2 <Mifare_Classic_Write+0x16a>
	{
		buffer[2] = 0x3;
 8002bbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bbe:	2203      	movs	r2, #3
 8002bc0:	709a      	strb	r2, [r3, #2]
		buffer[3] = sizeof(encoded);
 8002bc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bc4:	1c32      	adds	r2, r6, #0
 8002bc6:	70da      	strb	r2, [r3, #3]
		memcpy(&buffer[4], encoded, sizeof(encoded));
 8002bc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bca:	3304      	adds	r3, #4
 8002bcc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002bce:	0032      	movs	r2, r6
 8002bd0:	0018      	movs	r0, r3
 8002bd2:	f001 fd9a 	bl	800470a <memcpy>
		buffer[5+sizeof(encoded)] = 0xFE; // terminator
 8002bd6:	0033      	movs	r3, r6
 8002bd8:	3305      	adds	r3, #5
 8002bda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002bdc:	21fe      	movs	r1, #254	; 0xfe
 8002bde:	54d1      	strb	r1, [r2, r3]
 8002be0:	e019      	b.n	8002c16 <Mifare_Classic_Write+0x19e>
	}
	else
	{
		buffer[2] = 0x3;
 8002be2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002be4:	2203      	movs	r2, #3
 8002be6:	709a      	strb	r2, [r3, #2]
		buffer[3] = 0xFF;
 8002be8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bea:	22ff      	movs	r2, #255	; 0xff
 8002bec:	70da      	strb	r2, [r3, #3]
		buffer[4] = ((sizeof(encoded) >> 8) & 0xFF);
 8002bee:	0033      	movs	r3, r6
 8002bf0:	0a1b      	lsrs	r3, r3, #8
 8002bf2:	b2da      	uxtb	r2, r3
 8002bf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bf6:	711a      	strb	r2, [r3, #4]
		buffer[5] = (sizeof(encoded) & 0xFF);
 8002bf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bfa:	1c32      	adds	r2, r6, #0
 8002bfc:	715a      	strb	r2, [r3, #5]
		memcpy(&buffer[6], encoded, sizeof(encoded));
 8002bfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c00:	3306      	adds	r3, #6
 8002c02:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002c04:	0032      	movs	r2, r6
 8002c06:	0018      	movs	r0, r3
 8002c08:	f001 fd7f 	bl	800470a <memcpy>
		buffer[7+sizeof(encoded)] = 0xFE; // terminator
 8002c0c:	0033      	movs	r3, r6
 8002c0e:	3307      	adds	r3, #7
 8002c10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c12:	21fe      	movs	r1, #254	; 0xfe
 8002c14:	54d1      	strb	r1, [r2, r3]
	}
	
	//Write to tag
	uint8_t index = 0;
 8002c16:	2326      	movs	r3, #38	; 0x26
 8002c18:	2238      	movs	r2, #56	; 0x38
 8002c1a:	4694      	mov	ip, r2
 8002c1c:	44bc      	add	ip, r7
 8002c1e:	4463      	add	r3, ip
 8002c20:	2200      	movs	r2, #0
 8002c22:	701a      	strb	r2, [r3, #0]
  uint8_t current_Block = 4;
 8002c24:	2327      	movs	r3, #39	; 0x27
 8002c26:	2238      	movs	r2, #56	; 0x38
 8002c28:	4694      	mov	ip, r2
 8002c2a:	44bc      	add	ip, r7
 8002c2c:	4463      	add	r3, ip
 8002c2e:	2204      	movs	r2, #4
 8002c30:	701a      	strb	r2, [r3, #0]
  uint8_t key[6] = { 0xD3, 0xF7, 0xD3, 0xF7, 0xD3, 0xF7 }; 
 8002c32:	2308      	movs	r3, #8
 8002c34:	2238      	movs	r2, #56	; 0x38
 8002c36:	4694      	mov	ip, r2
 8002c38:	44bc      	add	ip, r7
 8002c3a:	4463      	add	r3, ip
 8002c3c:	4a38      	ldr	r2, [pc, #224]	; (8002d20 <Mifare_Classic_Write+0x2a8>)
 8002c3e:	6811      	ldr	r1, [r2, #0]
 8002c40:	6019      	str	r1, [r3, #0]
 8002c42:	8892      	ldrh	r2, [r2, #4]
 8002c44:	809a      	strh	r2, [r3, #4]
	while (index < sizeof(buffer))
 8002c46:	e05b      	b.n	8002d00 <Mifare_Classic_Write+0x288>
	{
		if(Mifare_Classic_IsFirstBlock(current_Block))
 8002c48:	2327      	movs	r3, #39	; 0x27
 8002c4a:	2238      	movs	r2, #56	; 0x38
 8002c4c:	4694      	mov	ip, r2
 8002c4e:	44bc      	add	ip, r7
 8002c50:	4463      	add	r3, ip
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	0018      	movs	r0, r3
 8002c56:	f7ff fedc 	bl	8002a12 <Mifare_Classic_IsFirstBlock>
 8002c5a:	1e03      	subs	r3, r0, #0
 8002c5c:	d012      	beq.n	8002c84 <Mifare_Classic_Write+0x20c>
		{
			if(!Mifare_Classic_Authenicate_Block(tag, current_Block, 0, key))
 8002c5e:	2308      	movs	r3, #8
 8002c60:	2238      	movs	r2, #56	; 0x38
 8002c62:	18ba      	adds	r2, r7, r2
 8002c64:	18d2      	adds	r2, r2, r3
 8002c66:	2327      	movs	r3, #39	; 0x27
 8002c68:	2138      	movs	r1, #56	; 0x38
 8002c6a:	468c      	mov	ip, r1
 8002c6c:	44bc      	add	ip, r7
 8002c6e:	4463      	add	r3, ip
 8002c70:	7819      	ldrb	r1, [r3, #0]
 8002c72:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002c74:	0013      	movs	r3, r2
 8002c76:	2200      	movs	r2, #0
 8002c78:	f7ff fdae 	bl	80027d8 <Mifare_Classic_Authenicate_Block>
 8002c7c:	1e03      	subs	r3, r0, #0
 8002c7e:	d101      	bne.n	8002c84 <Mifare_Classic_Write+0x20c>
				return 0;	
 8002c80:	2300      	movs	r3, #0
 8002c82:	e046      	b.n	8002d12 <Mifare_Classic_Write+0x29a>
		}
		
		if(!Mifare_Classic_WriteDataBlock(current_Block, &buffer[index]))
 8002c84:	2326      	movs	r3, #38	; 0x26
 8002c86:	2238      	movs	r2, #56	; 0x38
 8002c88:	4694      	mov	ip, r2
 8002c8a:	44bc      	add	ip, r7
 8002c8c:	4463      	add	r3, ip
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c92:	18d2      	adds	r2, r2, r3
 8002c94:	2327      	movs	r3, #39	; 0x27
 8002c96:	2138      	movs	r1, #56	; 0x38
 8002c98:	468c      	mov	ip, r1
 8002c9a:	44bc      	add	ip, r7
 8002c9c:	4463      	add	r3, ip
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	0011      	movs	r1, r2
 8002ca2:	0018      	movs	r0, r3
 8002ca4:	f000 f83e 	bl	8002d24 <Mifare_Classic_WriteDataBlock>
 8002ca8:	1e03      	subs	r3, r0, #0
 8002caa:	d101      	bne.n	8002cb0 <Mifare_Classic_Write+0x238>
			return 0;
 8002cac:	2300      	movs	r3, #0
 8002cae:	e030      	b.n	8002d12 <Mifare_Classic_Write+0x29a>
		
		index += BLOCK_SIZE;
 8002cb0:	2226      	movs	r2, #38	; 0x26
 8002cb2:	2338      	movs	r3, #56	; 0x38
 8002cb4:	18fb      	adds	r3, r7, r3
 8002cb6:	189b      	adds	r3, r3, r2
 8002cb8:	2138      	movs	r1, #56	; 0x38
 8002cba:	468c      	mov	ip, r1
 8002cbc:	44bc      	add	ip, r7
 8002cbe:	4462      	add	r2, ip
 8002cc0:	7812      	ldrb	r2, [r2, #0]
 8002cc2:	3210      	adds	r2, #16
 8002cc4:	701a      	strb	r2, [r3, #0]
    current_Block++;
 8002cc6:	2127      	movs	r1, #39	; 0x27
 8002cc8:	2338      	movs	r3, #56	; 0x38
 8002cca:	18fb      	adds	r3, r7, r3
 8002ccc:	185b      	adds	r3, r3, r1
 8002cce:	781a      	ldrb	r2, [r3, #0]
 8002cd0:	2338      	movs	r3, #56	; 0x38
 8002cd2:	18fb      	adds	r3, r7, r3
 8002cd4:	185b      	adds	r3, r3, r1
 8002cd6:	3201      	adds	r2, #1
 8002cd8:	701a      	strb	r2, [r3, #0]
		
		if(Mifare_Classic_IsTrailerBlock(current_Block))
 8002cda:	2338      	movs	r3, #56	; 0x38
 8002cdc:	18fb      	adds	r3, r7, r3
 8002cde:	185b      	adds	r3, r3, r1
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	0018      	movs	r0, r3
 8002ce4:	f7ff fead 	bl	8002a42 <Mifare_Classic_IsTrailerBlock>
 8002ce8:	1e03      	subs	r3, r0, #0
 8002cea:	d009      	beq.n	8002d00 <Mifare_Classic_Write+0x288>
			current_Block++;
 8002cec:	2127      	movs	r1, #39	; 0x27
 8002cee:	2338      	movs	r3, #56	; 0x38
 8002cf0:	18fb      	adds	r3, r7, r3
 8002cf2:	185b      	adds	r3, r3, r1
 8002cf4:	781a      	ldrb	r2, [r3, #0]
 8002cf6:	2338      	movs	r3, #56	; 0x38
 8002cf8:	18fb      	adds	r3, r7, r3
 8002cfa:	185b      	adds	r3, r3, r1
 8002cfc:	3201      	adds	r2, #1
 8002cfe:	701a      	strb	r2, [r3, #0]
	while (index < sizeof(buffer))
 8002d00:	2326      	movs	r3, #38	; 0x26
 8002d02:	2238      	movs	r2, #56	; 0x38
 8002d04:	4694      	mov	ip, r2
 8002d06:	44bc      	add	ip, r7
 8002d08:	4463      	add	r3, ip
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	42a3      	cmp	r3, r4
 8002d0e:	d39b      	bcc.n	8002c48 <Mifare_Classic_Write+0x1d0>
	}	
	return 1;
 8002d10:	2301      	movs	r3, #1
 8002d12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d14:	4695      	mov	sp, r2
}
 8002d16:	0018      	movs	r0, r3
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	b019      	add	sp, #100	; 0x64
 8002d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d1e:	46c0      	nop			; (mov r8, r8)
 8002d20:	08004764 	.word	0x08004764

08002d24 <Mifare_Classic_WriteDataBlock>:

int Mifare_Classic_WriteDataBlock(uint8_t blockNumber, uint8_t *data)
{
 8002d24:	b590      	push	{r4, r7, lr}
 8002d26:	b089      	sub	sp, #36	; 0x24
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	0002      	movs	r2, r0
 8002d2c:	6039      	str	r1, [r7, #0]
 8002d2e:	1dfb      	adds	r3, r7, #7
 8002d30:	701a      	strb	r2, [r3, #0]
	uint8_t WriteDataBlock_cmd[4+16];
	
	WriteDataBlock_cmd[0] = PN532_COMMAND_INDATAEXCHANGE;
 8002d32:	210c      	movs	r1, #12
 8002d34:	187b      	adds	r3, r7, r1
 8002d36:	2240      	movs	r2, #64	; 0x40
 8002d38:	701a      	strb	r2, [r3, #0]
	WriteDataBlock_cmd[1] = 1;
 8002d3a:	187b      	adds	r3, r7, r1
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	705a      	strb	r2, [r3, #1]
	WriteDataBlock_cmd[2] = MIFARE_CMD_WRITE;
 8002d40:	187b      	adds	r3, r7, r1
 8002d42:	22a0      	movs	r2, #160	; 0xa0
 8002d44:	709a      	strb	r2, [r3, #2]
	WriteDataBlock_cmd[3] = blockNumber;
 8002d46:	187b      	adds	r3, r7, r1
 8002d48:	1dfa      	adds	r2, r7, #7
 8002d4a:	7812      	ldrb	r2, [r2, #0]
 8002d4c:	70da      	strb	r2, [r3, #3]
	memcpy(WriteDataBlock_cmd + 4, data, 16);
 8002d4e:	000c      	movs	r4, r1
 8002d50:	187b      	adds	r3, r7, r1
 8002d52:	3304      	adds	r3, #4
 8002d54:	6839      	ldr	r1, [r7, #0]
 8002d56:	2210      	movs	r2, #16
 8002d58:	0018      	movs	r0, r3
 8002d5a:	f001 fcd6 	bl	800470a <memcpy>
	
	if(PN532_WriteCommand(WriteDataBlock_cmd, sizeof(WriteDataBlock_cmd)))
 8002d5e:	0021      	movs	r1, r4
 8002d60:	187b      	adds	r3, r7, r1
 8002d62:	2114      	movs	r1, #20
 8002d64:	0018      	movs	r0, r3
 8002d66:	f000 fe93 	bl	8003a90 <PN532_WriteCommand>
 8002d6a:	1e03      	subs	r3, r0, #0
 8002d6c:	d007      	beq.n	8002d7e <Mifare_Classic_WriteDataBlock+0x5a>
	{
		if(uart1_rx_data[13] != 0)
 8002d6e:	4b07      	ldr	r3, [pc, #28]	; (8002d8c <Mifare_Classic_WriteDataBlock+0x68>)
 8002d70:	7b5b      	ldrb	r3, [r3, #13]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d003      	beq.n	8002d7e <Mifare_Classic_WriteDataBlock+0x5a>
		{
			clean_uart1_rx_data();
 8002d76:	f001 fc0f 	bl	8004598 <clean_uart1_rx_data>
			return 0;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	e002      	b.n	8002d84 <Mifare_Classic_WriteDataBlock+0x60>
		}			
	}
	clean_uart1_rx_data();
 8002d7e:	f001 fc0b 	bl	8004598 <clean_uart1_rx_data>
	return 1;
 8002d82:	2301      	movs	r3, #1
}
 8002d84:	0018      	movs	r0, r3
 8002d86:	46bd      	mov	sp, r7
 8002d88:	b009      	add	sp, #36	; 0x24
 8002d8a:	bd90      	pop	{r4, r7, pc}
 8002d8c:	2000053c 	.word	0x2000053c

08002d90 <Mifare_Ultralight_Read>:
uint16_t messageLength;
uint16_t bufferSize;
uint16_t ndefStartIndex;

int Mifare_Ultralight_Read(NFC_Tag *tag)
{
 8002d90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d92:	b08d      	sub	sp, #52	; 0x34
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	61f8      	str	r0, [r7, #28]
 8002d98:	466b      	mov	r3, sp
 8002d9a:	61bb      	str	r3, [r7, #24]
	readCapabilityContainer();
 8002d9c:	f000 f922 	bl	8002fe4 <readCapabilityContainer>
	findNdefMessage();
 8002da0:	f000 f8d8 	bl	8002f54 <findNdefMessage>
	calculateBufferSize();
 8002da4:	f000 f936 	bl	8003014 <calculateBufferSize>
	
	int success;
	uint8_t page;
	uint8_t index = 0;
 8002da8:	2317      	movs	r3, #23
 8002daa:	2218      	movs	r2, #24
 8002dac:	4694      	mov	ip, r2
 8002dae:	44bc      	add	ip, r7
 8002db0:	4463      	add	r3, ip
 8002db2:	2200      	movs	r2, #0
 8002db4:	701a      	strb	r2, [r3, #0]
	uint8_t buffer[bufferSize];
 8002db6:	4b47      	ldr	r3, [pc, #284]	; (8002ed4 <Mifare_Ultralight_Read+0x144>)
 8002db8:	881b      	ldrh	r3, [r3, #0]
 8002dba:	001a      	movs	r2, r3
 8002dbc:	3a01      	subs	r2, #1
 8002dbe:	62ba      	str	r2, [r7, #40]	; 0x28
 8002dc0:	60bb      	str	r3, [r7, #8]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	60fa      	str	r2, [r7, #12]
 8002dc6:	68b8      	ldr	r0, [r7, #8]
 8002dc8:	68f9      	ldr	r1, [r7, #12]
 8002dca:	0002      	movs	r2, r0
 8002dcc:	0f52      	lsrs	r2, r2, #29
 8002dce:	000e      	movs	r6, r1
 8002dd0:	00f6      	lsls	r6, r6, #3
 8002dd2:	617e      	str	r6, [r7, #20]
 8002dd4:	697e      	ldr	r6, [r7, #20]
 8002dd6:	4316      	orrs	r6, r2
 8002dd8:	617e      	str	r6, [r7, #20]
 8002dda:	0002      	movs	r2, r0
 8002ddc:	00d2      	lsls	r2, r2, #3
 8002dde:	613a      	str	r2, [r7, #16]
 8002de0:	603b      	str	r3, [r7, #0]
 8002de2:	2200      	movs	r2, #0
 8002de4:	607a      	str	r2, [r7, #4]
 8002de6:	6838      	ldr	r0, [r7, #0]
 8002de8:	6879      	ldr	r1, [r7, #4]
 8002dea:	0002      	movs	r2, r0
 8002dec:	0f52      	lsrs	r2, r2, #29
 8002dee:	000e      	movs	r6, r1
 8002df0:	00f5      	lsls	r5, r6, #3
 8002df2:	4315      	orrs	r5, r2
 8002df4:	0002      	movs	r2, r0
 8002df6:	00d4      	lsls	r4, r2, #3
 8002df8:	3307      	adds	r3, #7
 8002dfa:	08db      	lsrs	r3, r3, #3
 8002dfc:	00db      	lsls	r3, r3, #3
 8002dfe:	466a      	mov	r2, sp
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	469d      	mov	sp, r3
 8002e04:	466b      	mov	r3, sp
 8002e06:	3300      	adds	r3, #0
 8002e08:	627b      	str	r3, [r7, #36]	; 0x24
	
	for(page = ULTRALIGHT_DATA_START_PAGE; page < ULTRALIGHT_MAX_PAGE; page++)
 8002e0a:	2316      	movs	r3, #22
 8002e0c:	2218      	movs	r2, #24
 8002e0e:	4694      	mov	ip, r2
 8002e10:	44bc      	add	ip, r7
 8002e12:	4463      	add	r3, ip
 8002e14:	2204      	movs	r2, #4
 8002e16:	701a      	strb	r2, [r3, #0]
 8002e18:	e03a      	b.n	8002e90 <Mifare_Ultralight_Read+0x100>
	{
		// read the data
		if(!Mifare_Ultralight_ReadPage(page, &buffer[index]))
 8002e1a:	2317      	movs	r3, #23
 8002e1c:	2218      	movs	r2, #24
 8002e1e:	4694      	mov	ip, r2
 8002e20:	44bc      	add	ip, r7
 8002e22:	4463      	add	r3, ip
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e28:	18d2      	adds	r2, r2, r3
 8002e2a:	2316      	movs	r3, #22
 8002e2c:	2118      	movs	r1, #24
 8002e2e:	468c      	mov	ip, r1
 8002e30:	44bc      	add	ip, r7
 8002e32:	4463      	add	r3, ip
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	0011      	movs	r1, r2
 8002e38:	0018      	movs	r0, r3
 8002e3a:	f000 f851 	bl	8002ee0 <Mifare_Ultralight_ReadPage>
 8002e3e:	1e03      	subs	r3, r0, #0
 8002e40:	d103      	bne.n	8002e4a <Mifare_Ultralight_Read+0xba>
		{
			messageLength = 0;
 8002e42:	4b25      	ldr	r3, [pc, #148]	; (8002ed8 <Mifare_Ultralight_Read+0x148>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	801a      	strh	r2, [r3, #0]
			break;
 8002e48:	e02c      	b.n	8002ea4 <Mifare_Ultralight_Read+0x114>
		}

		if (index >= (messageLength + ndefStartIndex))
 8002e4a:	2317      	movs	r3, #23
 8002e4c:	2218      	movs	r2, #24
 8002e4e:	4694      	mov	ip, r2
 8002e50:	44bc      	add	ip, r7
 8002e52:	4463      	add	r3, ip
 8002e54:	781a      	ldrb	r2, [r3, #0]
 8002e56:	4b20      	ldr	r3, [pc, #128]	; (8002ed8 <Mifare_Ultralight_Read+0x148>)
 8002e58:	881b      	ldrh	r3, [r3, #0]
 8002e5a:	0019      	movs	r1, r3
 8002e5c:	4b1f      	ldr	r3, [pc, #124]	; (8002edc <Mifare_Ultralight_Read+0x14c>)
 8002e5e:	881b      	ldrh	r3, [r3, #0]
 8002e60:	18cb      	adds	r3, r1, r3
 8002e62:	429a      	cmp	r2, r3
 8002e64:	da1d      	bge.n	8002ea2 <Mifare_Ultralight_Read+0x112>
		{
			break;
		}

		index += ULTRALIGHT_PAGE_SIZE;
 8002e66:	2217      	movs	r2, #23
 8002e68:	2318      	movs	r3, #24
 8002e6a:	18fb      	adds	r3, r7, r3
 8002e6c:	189b      	adds	r3, r3, r2
 8002e6e:	2118      	movs	r1, #24
 8002e70:	468c      	mov	ip, r1
 8002e72:	44bc      	add	ip, r7
 8002e74:	4462      	add	r2, ip
 8002e76:	7812      	ldrb	r2, [r2, #0]
 8002e78:	3204      	adds	r2, #4
 8002e7a:	701a      	strb	r2, [r3, #0]
	for(page = ULTRALIGHT_DATA_START_PAGE; page < ULTRALIGHT_MAX_PAGE; page++)
 8002e7c:	2116      	movs	r1, #22
 8002e7e:	2318      	movs	r3, #24
 8002e80:	18fb      	adds	r3, r7, r3
 8002e82:	185b      	adds	r3, r3, r1
 8002e84:	781a      	ldrb	r2, [r3, #0]
 8002e86:	2318      	movs	r3, #24
 8002e88:	18fb      	adds	r3, r7, r3
 8002e8a:	185b      	adds	r3, r3, r1
 8002e8c:	3201      	adds	r2, #1
 8002e8e:	701a      	strb	r2, [r3, #0]
 8002e90:	2316      	movs	r3, #22
 8002e92:	2218      	movs	r2, #24
 8002e94:	4694      	mov	ip, r2
 8002e96:	44bc      	add	ip, r7
 8002e98:	4463      	add	r3, ip
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	2b3e      	cmp	r3, #62	; 0x3e
 8002e9e:	d9bc      	bls.n	8002e1a <Mifare_Ultralight_Read+0x8a>
 8002ea0:	e000      	b.n	8002ea4 <Mifare_Ultralight_Read+0x114>
			break;
 8002ea2:	46c0      	nop			; (mov r8, r8)
	}
	
	if(Get_NDEF_Message(&buffer[ndefStartIndex], messageLength, &tag->ndefMessage))
 8002ea4:	4b0d      	ldr	r3, [pc, #52]	; (8002edc <Mifare_Ultralight_Read+0x14c>)
 8002ea6:	881b      	ldrh	r3, [r3, #0]
 8002ea8:	001a      	movs	r2, r3
 8002eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eac:	1898      	adds	r0, r3, r2
 8002eae:	4b0a      	ldr	r3, [pc, #40]	; (8002ed8 <Mifare_Ultralight_Read+0x148>)
 8002eb0:	881b      	ldrh	r3, [r3, #0]
 8002eb2:	b2d9      	uxtb	r1, r3
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	3309      	adds	r3, #9
 8002eb8:	001a      	movs	r2, r3
 8002eba:	f000 f9f6 	bl	80032aa <Get_NDEF_Message>
 8002ebe:	1e03      	subs	r3, r0, #0
 8002ec0:	d001      	beq.n	8002ec6 <Mifare_Ultralight_Read+0x136>
		return 1;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e000      	b.n	8002ec8 <Mifare_Ultralight_Read+0x138>
	
	else
		return 0;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	4695      	mov	sp, r2
}
 8002ecc:	0018      	movs	r0, r3
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	b00d      	add	sp, #52	; 0x34
 8002ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ed4:	20000028 	.word	0x20000028
 8002ed8:	2000002c 	.word	0x2000002c
 8002edc:	2000002e 	.word	0x2000002e

08002ee0 <Mifare_Ultralight_ReadPage>:

uint8_t Mifare_Ultralight_ReadPage(uint8_t page, uint8_t *buffer)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	0002      	movs	r2, r0
 8002ee8:	6039      	str	r1, [r7, #0]
 8002eea:	1dfb      	adds	r3, r7, #7
 8002eec:	701a      	strb	r2, [r3, #0]
	uint8_t readpage_cmd[4];
	readpage_cmd[0] = PN532_COMMAND_INDATAEXCHANGE;
 8002eee:	210c      	movs	r1, #12
 8002ef0:	187b      	adds	r3, r7, r1
 8002ef2:	2240      	movs	r2, #64	; 0x40
 8002ef4:	701a      	strb	r2, [r3, #0]
	readpage_cmd[1] = 1;
 8002ef6:	187b      	adds	r3, r7, r1
 8002ef8:	2201      	movs	r2, #1
 8002efa:	705a      	strb	r2, [r3, #1]
	readpage_cmd[2] = MIFARE_CMD_READ;
 8002efc:	187b      	adds	r3, r7, r1
 8002efe:	2230      	movs	r2, #48	; 0x30
 8002f00:	709a      	strb	r2, [r3, #2]
	readpage_cmd[3] = page;
 8002f02:	187b      	adds	r3, r7, r1
 8002f04:	1dfa      	adds	r2, r7, #7
 8002f06:	7812      	ldrb	r2, [r2, #0]
 8002f08:	70da      	strb	r2, [r3, #3]
	
	if(PN532_WriteCommand(readpage_cmd, sizeof(readpage_cmd)))
 8002f0a:	187b      	adds	r3, r7, r1
 8002f0c:	2104      	movs	r1, #4
 8002f0e:	0018      	movs	r0, r3
 8002f10:	f000 fdbe 	bl	8003a90 <PN532_WriteCommand>
 8002f14:	1e03      	subs	r3, r0, #0
 8002f16:	d011      	beq.n	8002f3c <Mifare_Ultralight_ReadPage+0x5c>
	{
		if(uart1_rx_data[12] == 0x41 && uart1_rx_data[13] == 0)//status 
 8002f18:	4b0c      	ldr	r3, [pc, #48]	; (8002f4c <Mifare_Ultralight_ReadPage+0x6c>)
 8002f1a:	7b1b      	ldrb	r3, [r3, #12]
 8002f1c:	2b41      	cmp	r3, #65	; 0x41
 8002f1e:	d10d      	bne.n	8002f3c <Mifare_Ultralight_ReadPage+0x5c>
 8002f20:	4b0a      	ldr	r3, [pc, #40]	; (8002f4c <Mifare_Ultralight_ReadPage+0x6c>)
 8002f22:	7b5b      	ldrb	r3, [r3, #13]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d109      	bne.n	8002f3c <Mifare_Ultralight_ReadPage+0x5c>
		{
			memcpy(buffer, &uart1_rx_data[14], 4);
 8002f28:	4909      	ldr	r1, [pc, #36]	; (8002f50 <Mifare_Ultralight_ReadPage+0x70>)
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	2204      	movs	r2, #4
 8002f2e:	0018      	movs	r0, r3
 8002f30:	f001 fbeb 	bl	800470a <memcpy>
			clean_uart1_rx_data();
 8002f34:	f001 fb30 	bl	8004598 <clean_uart1_rx_data>
			return 1;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e002      	b.n	8002f42 <Mifare_Ultralight_ReadPage+0x62>
		}
	}
	clean_uart1_rx_data();
 8002f3c:	f001 fb2c 	bl	8004598 <clean_uart1_rx_data>
	return 0;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	0018      	movs	r0, r3
 8002f44:	46bd      	mov	sp, r7
 8002f46:	b004      	add	sp, #16
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	46c0      	nop			; (mov r8, r8)
 8002f4c:	2000053c 	.word	0x2000053c
 8002f50:	2000054a 	.word	0x2000054a

08002f54 <findNdefMessage>:

void findNdefMessage(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b086      	sub	sp, #24
 8002f58:	af00      	add	r7, sp, #0
	int page;
  uint8_t data[12]; // 3 pages
	uint8_t *data_ptr = data;
 8002f5a:	003b      	movs	r3, r7
 8002f5c:	613b      	str	r3, [r7, #16]
	
	// the nxp read command reads 4 pages, unfortunately adafruit give me one page at a time
	int success = 1;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	60fb      	str	r3, [r7, #12]
	for (page = 4; page < 6; page++)
 8002f62:	2304      	movs	r3, #4
 8002f64:	617b      	str	r3, [r7, #20]
 8002f66:	e015      	b.n	8002f94 <findNdefMessage+0x40>
	{
			success = success && Mifare_Ultralight_ReadPage(page, data_ptr);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d00a      	beq.n	8002f84 <findNdefMessage+0x30>
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	693a      	ldr	r2, [r7, #16]
 8002f74:	0011      	movs	r1, r2
 8002f76:	0018      	movs	r0, r3
 8002f78:	f7ff ffb2 	bl	8002ee0 <Mifare_Ultralight_ReadPage>
 8002f7c:	1e03      	subs	r3, r0, #0
 8002f7e:	d001      	beq.n	8002f84 <findNdefMessage+0x30>
 8002f80:	2301      	movs	r3, #1
 8002f82:	e000      	b.n	8002f86 <findNdefMessage+0x32>
 8002f84:	2300      	movs	r3, #0
 8002f86:	60fb      	str	r3, [r7, #12]
			data_ptr += ULTRALIGHT_PAGE_SIZE;
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	3304      	adds	r3, #4
 8002f8c:	613b      	str	r3, [r7, #16]
	for (page = 4; page < 6; page++)
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	3301      	adds	r3, #1
 8002f92:	617b      	str	r3, [r7, #20]
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	2b05      	cmp	r3, #5
 8002f98:	dde6      	ble.n	8002f68 <findNdefMessage+0x14>
			
	}
	
	if (success)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d018      	beq.n	8002fd2 <findNdefMessage+0x7e>
	{
		if (data[0] == 0x03)
 8002fa0:	003b      	movs	r3, r7
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	2b03      	cmp	r3, #3
 8002fa6:	d108      	bne.n	8002fba <findNdefMessage+0x66>
		{
				messageLength = data[1];
 8002fa8:	003b      	movs	r3, r7
 8002faa:	785b      	ldrb	r3, [r3, #1]
 8002fac:	b29a      	uxth	r2, r3
 8002fae:	4b0b      	ldr	r3, [pc, #44]	; (8002fdc <findNdefMessage+0x88>)
 8002fb0:	801a      	strh	r2, [r3, #0]
				ndefStartIndex = 2;
 8002fb2:	4b0b      	ldr	r3, [pc, #44]	; (8002fe0 <findNdefMessage+0x8c>)
 8002fb4:	2202      	movs	r2, #2
 8002fb6:	801a      	strh	r2, [r3, #0]
				// TODO should really read the lock control TLV to ensure byte[5] is correct
				messageLength = data[6];
				ndefStartIndex = 7;
		}
	}
}
 8002fb8:	e00b      	b.n	8002fd2 <findNdefMessage+0x7e>
		else if (data[5] == 0x3) // page 5 byte 1
 8002fba:	003b      	movs	r3, r7
 8002fbc:	795b      	ldrb	r3, [r3, #5]
 8002fbe:	2b03      	cmp	r3, #3
 8002fc0:	d107      	bne.n	8002fd2 <findNdefMessage+0x7e>
				messageLength = data[6];
 8002fc2:	003b      	movs	r3, r7
 8002fc4:	799b      	ldrb	r3, [r3, #6]
 8002fc6:	b29a      	uxth	r2, r3
 8002fc8:	4b04      	ldr	r3, [pc, #16]	; (8002fdc <findNdefMessage+0x88>)
 8002fca:	801a      	strh	r2, [r3, #0]
				ndefStartIndex = 7;
 8002fcc:	4b04      	ldr	r3, [pc, #16]	; (8002fe0 <findNdefMessage+0x8c>)
 8002fce:	2207      	movs	r2, #7
 8002fd0:	801a      	strh	r2, [r3, #0]
}
 8002fd2:	46c0      	nop			; (mov r8, r8)
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	b006      	add	sp, #24
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	46c0      	nop			; (mov r8, r8)
 8002fdc:	2000002c 	.word	0x2000002c
 8002fe0:	2000002e 	.word	0x2000002e

08002fe4 <readCapabilityContainer>:

void readCapabilityContainer(void)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
	uint8_t data[4];
	
	if(Mifare_Ultralight_ReadPage(3, data) == 1)
 8002fea:	1d3b      	adds	r3, r7, #4
 8002fec:	0019      	movs	r1, r3
 8002fee:	2003      	movs	r0, #3
 8002ff0:	f7ff ff76 	bl	8002ee0 <Mifare_Ultralight_ReadPage>
 8002ff4:	0003      	movs	r3, r0
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d106      	bne.n	8003008 <readCapabilityContainer+0x24>
	{
		tagCapacity = data[2] * 8;
 8002ffa:	1d3b      	adds	r3, r7, #4
 8002ffc:	789b      	ldrb	r3, [r3, #2]
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	00db      	lsls	r3, r3, #3
 8003002:	b29a      	uxth	r2, r3
 8003004:	4b02      	ldr	r3, [pc, #8]	; (8003010 <readCapabilityContainer+0x2c>)
 8003006:	801a      	strh	r2, [r3, #0]
	}
}
 8003008:	46c0      	nop			; (mov r8, r8)
 800300a:	46bd      	mov	sp, r7
 800300c:	b002      	add	sp, #8
 800300e:	bd80      	pop	{r7, pc}
 8003010:	2000002a 	.word	0x2000002a

08003014 <calculateBufferSize>:

void calculateBufferSize(void)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	af00      	add	r7, sp, #0
	// TLV terminator 0xFE is 1 byte
	bufferSize = messageLength + ndefStartIndex + 1;
 8003018:	4b0e      	ldr	r3, [pc, #56]	; (8003054 <calculateBufferSize+0x40>)
 800301a:	881a      	ldrh	r2, [r3, #0]
 800301c:	4b0e      	ldr	r3, [pc, #56]	; (8003058 <calculateBufferSize+0x44>)
 800301e:	881b      	ldrh	r3, [r3, #0]
 8003020:	18d3      	adds	r3, r2, r3
 8003022:	b29b      	uxth	r3, r3
 8003024:	3301      	adds	r3, #1
 8003026:	b29a      	uxth	r2, r3
 8003028:	4b0c      	ldr	r3, [pc, #48]	; (800305c <calculateBufferSize+0x48>)
 800302a:	801a      	strh	r2, [r3, #0]

	if(bufferSize % ULTRALIGHT_READ_SIZE != 0)
 800302c:	4b0b      	ldr	r3, [pc, #44]	; (800305c <calculateBufferSize+0x48>)
 800302e:	881b      	ldrh	r3, [r3, #0]
 8003030:	2203      	movs	r2, #3
 8003032:	4013      	ands	r3, r2
 8003034:	b29b      	uxth	r3, r3
 8003036:	2b00      	cmp	r3, #0
 8003038:	d009      	beq.n	800304e <calculateBufferSize+0x3a>
	{
		// buffer must be an increment of page size
		bufferSize = ((bufferSize / ULTRALIGHT_READ_SIZE) + 1) * ULTRALIGHT_READ_SIZE;
 800303a:	4b08      	ldr	r3, [pc, #32]	; (800305c <calculateBufferSize+0x48>)
 800303c:	881b      	ldrh	r3, [r3, #0]
 800303e:	089b      	lsrs	r3, r3, #2
 8003040:	b29b      	uxth	r3, r3
 8003042:	3301      	adds	r3, #1
 8003044:	b29b      	uxth	r3, r3
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	b29a      	uxth	r2, r3
 800304a:	4b04      	ldr	r3, [pc, #16]	; (800305c <calculateBufferSize+0x48>)
 800304c:	801a      	strh	r2, [r3, #0]
	}
}
 800304e:	46c0      	nop			; (mov r8, r8)
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}
 8003054:	2000002c 	.word	0x2000002c
 8003058:	2000002e 	.word	0x2000002e
 800305c:	20000028 	.word	0x20000028

08003060 <Mifare_Ultralight_Write>:

int Mifare_Ultralight_Write(NFC_Tag *tag)
{
 8003060:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003062:	b08d      	sub	sp, #52	; 0x34
 8003064:	af00      	add	r7, sp, #0
 8003066:	61f8      	str	r0, [r7, #28]
 8003068:	466b      	mov	r3, sp
 800306a:	61bb      	str	r3, [r7, #24]
	readCapabilityContainer();
 800306c:	f7ff ffba 	bl	8002fe4 <readCapabilityContainer>
	messageLength = NDEF_Message_GetEncodeSize(&tag->ndefMessage);
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	3309      	adds	r3, #9
 8003074:	0018      	movs	r0, r3
 8003076:	f000 fa3e 	bl	80034f6 <NDEF_Message_GetEncodeSize>
 800307a:	0003      	movs	r3, r0
 800307c:	b29a      	uxth	r2, r3
 800307e:	4b60      	ldr	r3, [pc, #384]	; (8003200 <Mifare_Ultralight_Write+0x1a0>)
 8003080:	801a      	strh	r2, [r3, #0]
	ndefStartIndex = messageLength < 0xFF ? 2 : 4;
 8003082:	4b5f      	ldr	r3, [pc, #380]	; (8003200 <Mifare_Ultralight_Write+0x1a0>)
 8003084:	881b      	ldrh	r3, [r3, #0]
 8003086:	2bfe      	cmp	r3, #254	; 0xfe
 8003088:	d801      	bhi.n	800308e <Mifare_Ultralight_Write+0x2e>
 800308a:	2202      	movs	r2, #2
 800308c:	e000      	b.n	8003090 <Mifare_Ultralight_Write+0x30>
 800308e:	2204      	movs	r2, #4
 8003090:	4b5c      	ldr	r3, [pc, #368]	; (8003204 <Mifare_Ultralight_Write+0x1a4>)
 8003092:	801a      	strh	r2, [r3, #0]
	calculateBufferSize();
 8003094:	f7ff ffbe 	bl	8003014 <calculateBufferSize>
	
	if(bufferSize>tagCapacity) 
 8003098:	4b5b      	ldr	r3, [pc, #364]	; (8003208 <Mifare_Ultralight_Write+0x1a8>)
 800309a:	881a      	ldrh	r2, [r3, #0]
 800309c:	4b5b      	ldr	r3, [pc, #364]	; (800320c <Mifare_Ultralight_Write+0x1ac>)
 800309e:	881b      	ldrh	r3, [r3, #0]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d901      	bls.n	80030a8 <Mifare_Ultralight_Write+0x48>
		return 0;
 80030a4:	2300      	movs	r3, #0
 80030a6:	e0a5      	b.n	80031f4 <Mifare_Ultralight_Write+0x194>
	
	uint8_t encoded[bufferSize];
 80030a8:	4b57      	ldr	r3, [pc, #348]	; (8003208 <Mifare_Ultralight_Write+0x1a8>)
 80030aa:	881b      	ldrh	r3, [r3, #0]
 80030ac:	001a      	movs	r2, r3
 80030ae:	3a01      	subs	r2, #1
 80030b0:	62ba      	str	r2, [r7, #40]	; 0x28
 80030b2:	60bb      	str	r3, [r7, #8]
 80030b4:	2200      	movs	r2, #0
 80030b6:	60fa      	str	r2, [r7, #12]
 80030b8:	68b8      	ldr	r0, [r7, #8]
 80030ba:	68f9      	ldr	r1, [r7, #12]
 80030bc:	0002      	movs	r2, r0
 80030be:	0f52      	lsrs	r2, r2, #29
 80030c0:	000e      	movs	r6, r1
 80030c2:	00f6      	lsls	r6, r6, #3
 80030c4:	617e      	str	r6, [r7, #20]
 80030c6:	697e      	ldr	r6, [r7, #20]
 80030c8:	4316      	orrs	r6, r2
 80030ca:	617e      	str	r6, [r7, #20]
 80030cc:	0002      	movs	r2, r0
 80030ce:	00d2      	lsls	r2, r2, #3
 80030d0:	613a      	str	r2, [r7, #16]
 80030d2:	603b      	str	r3, [r7, #0]
 80030d4:	2200      	movs	r2, #0
 80030d6:	607a      	str	r2, [r7, #4]
 80030d8:	6838      	ldr	r0, [r7, #0]
 80030da:	6879      	ldr	r1, [r7, #4]
 80030dc:	0002      	movs	r2, r0
 80030de:	0f52      	lsrs	r2, r2, #29
 80030e0:	000e      	movs	r6, r1
 80030e2:	00f5      	lsls	r5, r6, #3
 80030e4:	4315      	orrs	r5, r2
 80030e6:	0002      	movs	r2, r0
 80030e8:	00d4      	lsls	r4, r2, #3
 80030ea:	3307      	adds	r3, #7
 80030ec:	08db      	lsrs	r3, r3, #3
 80030ee:	00db      	lsls	r3, r3, #3
 80030f0:	466a      	mov	r2, sp
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	469d      	mov	sp, r3
 80030f6:	466b      	mov	r3, sp
 80030f8:	3300      	adds	r3, #0
 80030fa:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t position = 0;
 80030fc:	2316      	movs	r3, #22
 80030fe:	2218      	movs	r2, #24
 8003100:	4694      	mov	ip, r2
 8003102:	44bc      	add	ip, r7
 8003104:	4463      	add	r3, ip
 8003106:	2200      	movs	r2, #0
 8003108:	701a      	strb	r2, [r3, #0]
  uint8_t page = ULTRALIGHT_DATA_START_PAGE;
 800310a:	2317      	movs	r3, #23
 800310c:	2218      	movs	r2, #24
 800310e:	4694      	mov	ip, r2
 8003110:	44bc      	add	ip, r7
 8003112:	4463      	add	r3, ip
 8003114:	2204      	movs	r2, #4
 8003116:	701a      	strb	r2, [r3, #0]
	
	// Set message size. With ultralight should always be less than 0xFF but who knows?
	
	encoded[0] = 0x3;
 8003118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311a:	2203      	movs	r2, #3
 800311c:	701a      	strb	r2, [r3, #0]
	if (messageLength < 0xFF)
 800311e:	4b38      	ldr	r3, [pc, #224]	; (8003200 <Mifare_Ultralight_Write+0x1a0>)
 8003120:	881b      	ldrh	r3, [r3, #0]
 8003122:	2bfe      	cmp	r3, #254	; 0xfe
 8003124:	d805      	bhi.n	8003132 <Mifare_Ultralight_Write+0xd2>
	{
		encoded[1] = messageLength;
 8003126:	4b36      	ldr	r3, [pc, #216]	; (8003200 <Mifare_Ultralight_Write+0x1a0>)
 8003128:	881b      	ldrh	r3, [r3, #0]
 800312a:	b2da      	uxtb	r2, r3
 800312c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312e:	705a      	strb	r2, [r3, #1]
 8003130:	e00e      	b.n	8003150 <Mifare_Ultralight_Write+0xf0>
	}
	else
	{
		encoded[1] = 0xFF;
 8003132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003134:	22ff      	movs	r2, #255	; 0xff
 8003136:	705a      	strb	r2, [r3, #1]
		encoded[2] = ((messageLength >> 8) & 0xFF);
 8003138:	4b31      	ldr	r3, [pc, #196]	; (8003200 <Mifare_Ultralight_Write+0x1a0>)
 800313a:	881b      	ldrh	r3, [r3, #0]
 800313c:	0a1b      	lsrs	r3, r3, #8
 800313e:	b29b      	uxth	r3, r3
 8003140:	b2da      	uxtb	r2, r3
 8003142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003144:	709a      	strb	r2, [r3, #2]
		encoded[3] = (messageLength & 0xFF);
 8003146:	4b2e      	ldr	r3, [pc, #184]	; (8003200 <Mifare_Ultralight_Write+0x1a0>)
 8003148:	881b      	ldrh	r3, [r3, #0]
 800314a:	b2da      	uxtb	r2, r3
 800314c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314e:	70da      	strb	r2, [r3, #3]
	}
	
	NDEF_Message_Encode(encoded+2, &tag->ndefMessage);
 8003150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003152:	1c9a      	adds	r2, r3, #2
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	3309      	adds	r3, #9
 8003158:	0019      	movs	r1, r3
 800315a:	0010      	movs	r0, r2
 800315c:	f000 f9f4 	bl	8003548 <NDEF_Message_Encode>
	memset(encoded+ndefStartIndex+messageLength, 0, bufferSize - ndefStartIndex - messageLength);
 8003160:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003162:	4b28      	ldr	r3, [pc, #160]	; (8003204 <Mifare_Ultralight_Write+0x1a4>)
 8003164:	881b      	ldrh	r3, [r3, #0]
 8003166:	0019      	movs	r1, r3
 8003168:	4b25      	ldr	r3, [pc, #148]	; (8003200 <Mifare_Ultralight_Write+0x1a0>)
 800316a:	881b      	ldrh	r3, [r3, #0]
 800316c:	18cb      	adds	r3, r1, r3
 800316e:	18d0      	adds	r0, r2, r3
 8003170:	4b25      	ldr	r3, [pc, #148]	; (8003208 <Mifare_Ultralight_Write+0x1a8>)
 8003172:	881b      	ldrh	r3, [r3, #0]
 8003174:	001a      	movs	r2, r3
 8003176:	4b23      	ldr	r3, [pc, #140]	; (8003204 <Mifare_Ultralight_Write+0x1a4>)
 8003178:	881b      	ldrh	r3, [r3, #0]
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	4a20      	ldr	r2, [pc, #128]	; (8003200 <Mifare_Ultralight_Write+0x1a0>)
 800317e:	8812      	ldrh	r2, [r2, #0]
 8003180:	1a9b      	subs	r3, r3, r2
 8003182:	001a      	movs	r2, r3
 8003184:	2100      	movs	r1, #0
 8003186:	f001 fac9 	bl	800471c <memset>
  encoded[ndefStartIndex+messageLength] = 0xFE; // terminator
 800318a:	4b1e      	ldr	r3, [pc, #120]	; (8003204 <Mifare_Ultralight_Write+0x1a4>)
 800318c:	881b      	ldrh	r3, [r3, #0]
 800318e:	001a      	movs	r2, r3
 8003190:	4b1b      	ldr	r3, [pc, #108]	; (8003200 <Mifare_Ultralight_Write+0x1a0>)
 8003192:	881b      	ldrh	r3, [r3, #0]
 8003194:	18d3      	adds	r3, r2, r3
 8003196:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003198:	21fe      	movs	r1, #254	; 0xfe
 800319a:	54d1      	strb	r1, [r2, r3]

	while(position < bufferSize)//bufferSize is always times pagesize so no "last chunk" check
 800319c:	e01e      	b.n	80031dc <Mifare_Ultralight_Write+0x17c>
	{ 
		// write page
		Mifare_Ultralight_WritePage(page++, &encoded[position]);
 800319e:	2217      	movs	r2, #23
 80031a0:	2318      	movs	r3, #24
 80031a2:	18fb      	adds	r3, r7, r3
 80031a4:	189b      	adds	r3, r3, r2
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	2118      	movs	r1, #24
 80031aa:	468c      	mov	ip, r1
 80031ac:	44bc      	add	ip, r7
 80031ae:	4462      	add	r2, ip
 80031b0:	1c59      	adds	r1, r3, #1
 80031b2:	7011      	strb	r1, [r2, #0]
 80031b4:	2416      	movs	r4, #22
 80031b6:	2218      	movs	r2, #24
 80031b8:	18ba      	adds	r2, r7, r2
 80031ba:	1912      	adds	r2, r2, r4
 80031bc:	7812      	ldrb	r2, [r2, #0]
 80031be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031c0:	188a      	adds	r2, r1, r2
 80031c2:	0011      	movs	r1, r2
 80031c4:	0018      	movs	r0, r3
 80031c6:	f000 f823 	bl	8003210 <Mifare_Ultralight_WritePage>
		position+=ULTRALIGHT_PAGE_SIZE;
 80031ca:	2318      	movs	r3, #24
 80031cc:	18fb      	adds	r3, r7, r3
 80031ce:	191b      	adds	r3, r3, r4
 80031d0:	2218      	movs	r2, #24
 80031d2:	18ba      	adds	r2, r7, r2
 80031d4:	1912      	adds	r2, r2, r4
 80031d6:	7812      	ldrb	r2, [r2, #0]
 80031d8:	3204      	adds	r2, #4
 80031da:	701a      	strb	r2, [r3, #0]
	while(position < bufferSize)//bufferSize is always times pagesize so no "last chunk" check
 80031dc:	2316      	movs	r3, #22
 80031de:	2218      	movs	r2, #24
 80031e0:	4694      	mov	ip, r2
 80031e2:	44bc      	add	ip, r7
 80031e4:	4463      	add	r3, ip
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	b29a      	uxth	r2, r3
 80031ea:	4b07      	ldr	r3, [pc, #28]	; (8003208 <Mifare_Ultralight_Write+0x1a8>)
 80031ec:	881b      	ldrh	r3, [r3, #0]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d3d5      	bcc.n	800319e <Mifare_Ultralight_Write+0x13e>
	}
  return 1;
 80031f2:	2301      	movs	r3, #1
 80031f4:	69ba      	ldr	r2, [r7, #24]
 80031f6:	4695      	mov	sp, r2
}
 80031f8:	0018      	movs	r0, r3
 80031fa:	46bd      	mov	sp, r7
 80031fc:	b00d      	add	sp, #52	; 0x34
 80031fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003200:	2000002c 	.word	0x2000002c
 8003204:	2000002e 	.word	0x2000002e
 8003208:	20000028 	.word	0x20000028
 800320c:	2000002a 	.word	0x2000002a

08003210 <Mifare_Ultralight_WritePage>:

int Mifare_Ultralight_WritePage(uint8_t page, uint8_t *buffer)
{
 8003210:	b590      	push	{r4, r7, lr}
 8003212:	b085      	sub	sp, #20
 8003214:	af00      	add	r7, sp, #0
 8003216:	0002      	movs	r2, r0
 8003218:	6039      	str	r1, [r7, #0]
 800321a:	1dfb      	adds	r3, r7, #7
 800321c:	701a      	strb	r2, [r3, #0]
	uint8_t write_page_cmd[8];
	write_page_cmd[0] = PN532_COMMAND_INDATAEXCHANGE;
 800321e:	2108      	movs	r1, #8
 8003220:	187b      	adds	r3, r7, r1
 8003222:	2240      	movs	r2, #64	; 0x40
 8003224:	701a      	strb	r2, [r3, #0]
	write_page_cmd[1] = 1;                           /* Card number */
 8003226:	187b      	adds	r3, r7, r1
 8003228:	2201      	movs	r2, #1
 800322a:	705a      	strb	r2, [r3, #1]
	write_page_cmd[2] = MIFARE_CMD_WRITE_ULTRALIGHT; /* Mifare UL Write cmd = 0xA2 */
 800322c:	187b      	adds	r3, r7, r1
 800322e:	22a2      	movs	r2, #162	; 0xa2
 8003230:	709a      	strb	r2, [r3, #2]
	write_page_cmd[3] = page;                        /* page Number (0..63) */
 8003232:	187b      	adds	r3, r7, r1
 8003234:	1dfa      	adds	r2, r7, #7
 8003236:	7812      	ldrb	r2, [r2, #0]
 8003238:	70da      	strb	r2, [r3, #3]
	memcpy (write_page_cmd + 4, buffer, 4);          /* Data Payload */
 800323a:	000c      	movs	r4, r1
 800323c:	187b      	adds	r3, r7, r1
 800323e:	3304      	adds	r3, #4
 8003240:	6839      	ldr	r1, [r7, #0]
 8003242:	2204      	movs	r2, #4
 8003244:	0018      	movs	r0, r3
 8003246:	f001 fa60 	bl	800470a <memcpy>

	if(PN532_WriteCommand(write_page_cmd, sizeof(write_page_cmd)))
 800324a:	0021      	movs	r1, r4
 800324c:	187b      	adds	r3, r7, r1
 800324e:	2108      	movs	r1, #8
 8003250:	0018      	movs	r0, r3
 8003252:	f000 fc1d 	bl	8003a90 <PN532_WriteCommand>
 8003256:	1e03      	subs	r3, r0, #0
 8003258:	d001      	beq.n	800325e <Mifare_Ultralight_WritePage+0x4e>
		return 1;
 800325a:	2301      	movs	r3, #1
 800325c:	e000      	b.n	8003260 <Mifare_Ultralight_WritePage+0x50>
	else
		return 0;
 800325e:	2300      	movs	r3, #0
}
 8003260:	0018      	movs	r0, r3
 8003262:	46bd      	mov	sp, r7
 8003264:	b005      	add	sp, #20
 8003266:	bd90      	pop	{r4, r7, pc}

08003268 <NDEF_Message_Init>:
#include "NDEF_Message.h"

void NDEF_Message_Init(NDEF_Message *message)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
	for(int i = 0; i<MAX_NDEF_RECORDS; i++)
 8003270:	2300      	movs	r3, #0
 8003272:	60fb      	str	r3, [r7, #12]
 8003274:	e00f      	b.n	8003296 <NDEF_Message_Init+0x2e>
		NDEF_Record_Init(&message->record[i]);
 8003276:	68fa      	ldr	r2, [r7, #12]
 8003278:	0013      	movs	r3, r2
 800327a:	011b      	lsls	r3, r3, #4
 800327c:	189b      	adds	r3, r3, r2
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	189b      	adds	r3, r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	18d3      	adds	r3, r2, r3
 8003288:	3301      	adds	r3, #1
 800328a:	0018      	movs	r0, r3
 800328c:	f000 f9a1 	bl	80035d2 <NDEF_Record_Init>
	for(int i = 0; i<MAX_NDEF_RECORDS; i++)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	3301      	adds	r3, #1
 8003294:	60fb      	str	r3, [r7, #12]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2b03      	cmp	r3, #3
 800329a:	ddec      	ble.n	8003276 <NDEF_Message_Init+0xe>
	message->record_Count = 0;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	701a      	strb	r2, [r3, #0]
}
 80032a2:	46c0      	nop			; (mov r8, r8)
 80032a4:	46bd      	mov	sp, r7
 80032a6:	b004      	add	sp, #16
 80032a8:	bd80      	pop	{r7, pc}

080032aa <Get_NDEF_Message>:

int Get_NDEF_Message(uint8_t *data, uint8_t numBytes, NDEF_Message *message)
{
 80032aa:	b590      	push	{r4, r7, lr}
 80032ac:	b091      	sub	sp, #68	; 0x44
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	60f8      	str	r0, [r7, #12]
 80032b2:	607a      	str	r2, [r7, #4]
 80032b4:	230b      	movs	r3, #11
 80032b6:	18fb      	adds	r3, r7, r3
 80032b8:	1c0a      	adds	r2, r1, #0
 80032ba:	701a      	strb	r2, [r3, #0]
	NDEF_Message_Init(message);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	0018      	movs	r0, r3
 80032c0:	f7ff ffd2 	bl	8003268 <NDEF_Message_Init>
	uint8_t index = 0;
 80032c4:	233f      	movs	r3, #63	; 0x3f
 80032c6:	18fb      	adds	r3, r7, r3
 80032c8:	2200      	movs	r2, #0
 80032ca:	701a      	strb	r2, [r3, #0]

	while (index <= numBytes)
 80032cc:	e103      	b.n	80034d6 <Get_NDEF_Message+0x22c>
	{
		uint8_t tnf_byte = data[index];
 80032ce:	203f      	movs	r0, #63	; 0x3f
 80032d0:	183b      	adds	r3, r7, r0
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	68fa      	ldr	r2, [r7, #12]
 80032d6:	18d2      	adds	r2, r2, r3
 80032d8:	2133      	movs	r1, #51	; 0x33
 80032da:	187b      	adds	r3, r7, r1
 80032dc:	7812      	ldrb	r2, [r2, #0]
 80032de:	701a      	strb	r2, [r3, #0]
		int mb = (tnf_byte & 0x80) != 0;
 80032e0:	187b      	adds	r3, r7, r1
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	b25b      	sxtb	r3, r3
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	09db      	lsrs	r3, r3, #7
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	62fb      	str	r3, [r7, #44]	; 0x2c
		int me = (tnf_byte & 0x40) != 0;
 80032ee:	187b      	adds	r3, r7, r1
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	2240      	movs	r2, #64	; 0x40
 80032f4:	4013      	ands	r3, r2
 80032f6:	1e5a      	subs	r2, r3, #1
 80032f8:	4193      	sbcs	r3, r2
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	62bb      	str	r3, [r7, #40]	; 0x28
		int cf = (tnf_byte & 0x20) != 0;
 80032fe:	187b      	adds	r3, r7, r1
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	2220      	movs	r2, #32
 8003304:	4013      	ands	r3, r2
 8003306:	1e5a      	subs	r2, r3, #1
 8003308:	4193      	sbcs	r3, r2
 800330a:	b2db      	uxtb	r3, r3
 800330c:	627b      	str	r3, [r7, #36]	; 0x24
		int sr = (tnf_byte & 0x10) != 0;
 800330e:	187b      	adds	r3, r7, r1
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	2210      	movs	r2, #16
 8003314:	4013      	ands	r3, r2
 8003316:	1e5a      	subs	r2, r3, #1
 8003318:	4193      	sbcs	r3, r2
 800331a:	b2db      	uxtb	r3, r3
 800331c:	623b      	str	r3, [r7, #32]
		int il = (tnf_byte & 0x8) != 0;
 800331e:	187b      	adds	r3, r7, r1
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	2208      	movs	r2, #8
 8003324:	4013      	ands	r3, r2
 8003326:	1e5a      	subs	r2, r3, #1
 8003328:	4193      	sbcs	r3, r2
 800332a:	b2db      	uxtb	r3, r3
 800332c:	61fb      	str	r3, [r7, #28]
		uint8_t tnf = (tnf_byte & 0x7);
 800332e:	231b      	movs	r3, #27
 8003330:	18fb      	adds	r3, r7, r3
 8003332:	187a      	adds	r2, r7, r1
 8003334:	7812      	ldrb	r2, [r2, #0]
 8003336:	2107      	movs	r1, #7
 8003338:	400a      	ands	r2, r1
 800333a:	701a      	strb	r2, [r3, #0]
		
		index++;
 800333c:	183b      	adds	r3, r7, r0
 800333e:	781a      	ldrb	r2, [r3, #0]
 8003340:	183b      	adds	r3, r7, r0
 8003342:	3201      	adds	r2, #1
 8003344:	701a      	strb	r2, [r3, #0]
    int typeLength = data[index];
 8003346:	183b      	adds	r3, r7, r0
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	68fa      	ldr	r2, [r7, #12]
 800334c:	18d3      	adds	r3, r2, r3
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	617b      	str	r3, [r7, #20]
		int payloadLength = 0;
 8003352:	2300      	movs	r3, #0
 8003354:	63bb      	str	r3, [r7, #56]	; 0x38
		
		if(sr)
 8003356:	6a3b      	ldr	r3, [r7, #32]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d00c      	beq.n	8003376 <Get_NDEF_Message+0xcc>
		{
			index++;
 800335c:	213f      	movs	r1, #63	; 0x3f
 800335e:	187b      	adds	r3, r7, r1
 8003360:	781a      	ldrb	r2, [r3, #0]
 8003362:	187b      	adds	r3, r7, r1
 8003364:	3201      	adds	r2, #1
 8003366:	701a      	strb	r2, [r3, #0]
			payloadLength = data[index];
 8003368:	187b      	adds	r3, r7, r1
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	68fa      	ldr	r2, [r7, #12]
 800336e:	18d3      	adds	r3, r2, r3
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	63bb      	str	r3, [r7, #56]	; 0x38
 8003374:	e02f      	b.n	80033d6 <Get_NDEF_Message+0x12c>
		}
		
		else
		{
			payloadLength =
 8003376:	203f      	movs	r0, #63	; 0x3f
 8003378:	183b      	adds	r3, r7, r0
 800337a:	183a      	adds	r2, r7, r0
 800337c:	7812      	ldrb	r2, [r2, #0]
 800337e:	3201      	adds	r2, #1
 8003380:	701a      	strb	r2, [r3, #0]
				((0xFF & data[++index]) << 24)
 8003382:	183b      	adds	r3, r7, r0
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	68fa      	ldr	r2, [r7, #12]
 8003388:	18d3      	adds	r3, r2, r3
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	061a      	lsls	r2, r3, #24
			payloadLength =
 800338e:	183b      	adds	r3, r7, r0
 8003390:	1839      	adds	r1, r7, r0
 8003392:	7809      	ldrb	r1, [r1, #0]
 8003394:	3101      	adds	r1, #1
 8003396:	7019      	strb	r1, [r3, #0]
			| ((0xFF & data[++index]) << 16)
 8003398:	183b      	adds	r3, r7, r0
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	68f9      	ldr	r1, [r7, #12]
 800339e:	18cb      	adds	r3, r1, r3
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	041b      	lsls	r3, r3, #16
 80033a4:	431a      	orrs	r2, r3
			payloadLength =
 80033a6:	183b      	adds	r3, r7, r0
 80033a8:	1839      	adds	r1, r7, r0
 80033aa:	7809      	ldrb	r1, [r1, #0]
 80033ac:	3101      	adds	r1, #1
 80033ae:	7019      	strb	r1, [r3, #0]
			| ((0xFF & data[++index]) << 8)
 80033b0:	183b      	adds	r3, r7, r0
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	68f9      	ldr	r1, [r7, #12]
 80033b6:	18cb      	adds	r3, r1, r3
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	021b      	lsls	r3, r3, #8
 80033bc:	4313      	orrs	r3, r2
			payloadLength =
 80033be:	183a      	adds	r2, r7, r0
 80033c0:	1839      	adds	r1, r7, r0
 80033c2:	7809      	ldrb	r1, [r1, #0]
 80033c4:	3101      	adds	r1, #1
 80033c6:	7011      	strb	r1, [r2, #0]
			| (0xFF & data[++index]);
 80033c8:	183a      	adds	r2, r7, r0
 80033ca:	7812      	ldrb	r2, [r2, #0]
 80033cc:	68f9      	ldr	r1, [r7, #12]
 80033ce:	188a      	adds	r2, r1, r2
 80033d0:	7812      	ldrb	r2, [r2, #0]
			payloadLength =
 80033d2:	4313      	orrs	r3, r2
 80033d4:	63bb      	str	r3, [r7, #56]	; 0x38
		}

		int idLength = 0;
 80033d6:	2300      	movs	r3, #0
 80033d8:	637b      	str	r3, [r7, #52]	; 0x34
		if(il)
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d00b      	beq.n	80033f8 <Get_NDEF_Message+0x14e>
		{
			index++;
 80033e0:	213f      	movs	r1, #63	; 0x3f
 80033e2:	187b      	adds	r3, r7, r1
 80033e4:	781a      	ldrb	r2, [r3, #0]
 80033e6:	187b      	adds	r3, r7, r1
 80033e8:	3201      	adds	r2, #1
 80033ea:	701a      	strb	r2, [r3, #0]
			idLength = data[index];
 80033ec:	187b      	adds	r3, r7, r1
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	68fa      	ldr	r2, [r7, #12]
 80033f2:	18d3      	adds	r3, r2, r3
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	637b      	str	r3, [r7, #52]	; 0x34
		}

		index++;
 80033f8:	243f      	movs	r4, #63	; 0x3f
 80033fa:	193b      	adds	r3, r7, r4
 80033fc:	781a      	ldrb	r2, [r3, #0]
 80033fe:	193b      	adds	r3, r7, r4
 8003400:	3201      	adds	r2, #1
 8003402:	701a      	strb	r2, [r3, #0]
		NDEF_Record_SetType(&data[index], typeLength, &message->record[message->record_Count]);
 8003404:	193b      	adds	r3, r7, r4
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	68fa      	ldr	r2, [r7, #12]
 800340a:	18d0      	adds	r0, r2, r3
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	b2d9      	uxtb	r1, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	001a      	movs	r2, r3
 8003416:	0013      	movs	r3, r2
 8003418:	011b      	lsls	r3, r3, #4
 800341a:	189b      	adds	r3, r3, r2
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	189b      	adds	r3, r3, r2
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	18d3      	adds	r3, r2, r3
 8003426:	3301      	adds	r3, #1
 8003428:	001a      	movs	r2, r3
 800342a:	f000 f8fd 	bl	8003628 <NDEF_Record_SetType>
		index += typeLength;
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	b2d9      	uxtb	r1, r3
 8003432:	193b      	adds	r3, r7, r4
 8003434:	193a      	adds	r2, r7, r4
 8003436:	7812      	ldrb	r2, [r2, #0]
 8003438:	188a      	adds	r2, r1, r2
 800343a:	701a      	strb	r2, [r3, #0]
		
		if(il)
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d01c      	beq.n	800347c <Get_NDEF_Message+0x1d2>
		{
			NDEF_Record_SetId(&data[index], idLength, &message->record[message->record_Count]);
 8003442:	243f      	movs	r4, #63	; 0x3f
 8003444:	193b      	adds	r3, r7, r4
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	68fa      	ldr	r2, [r7, #12]
 800344a:	18d0      	adds	r0, r2, r3
 800344c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800344e:	b2d9      	uxtb	r1, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	001a      	movs	r2, r3
 8003456:	0013      	movs	r3, r2
 8003458:	011b      	lsls	r3, r3, #4
 800345a:	189b      	adds	r3, r3, r2
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	189b      	adds	r3, r3, r2
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	18d3      	adds	r3, r2, r3
 8003466:	3301      	adds	r3, #1
 8003468:	001a      	movs	r2, r3
 800346a:	f000 f8f6 	bl	800365a <NDEF_Record_SetId>
			index += idLength;
 800346e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003470:	b2d9      	uxtb	r1, r3
 8003472:	193b      	adds	r3, r7, r4
 8003474:	193a      	adds	r2, r7, r4
 8003476:	7812      	ldrb	r2, [r2, #0]
 8003478:	188a      	adds	r2, r1, r2
 800347a:	701a      	strb	r2, [r3, #0]
		}
		
		NDEF_Record_SetPayload(&data[index], payloadLength, &message->record[message->record_Count]);
 800347c:	243f      	movs	r4, #63	; 0x3f
 800347e:	193b      	adds	r3, r7, r4
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	68fa      	ldr	r2, [r7, #12]
 8003484:	18d0      	adds	r0, r2, r3
 8003486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003488:	b2d9      	uxtb	r1, r3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	001a      	movs	r2, r3
 8003490:	0013      	movs	r3, r2
 8003492:	011b      	lsls	r3, r3, #4
 8003494:	189b      	adds	r3, r3, r2
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	189b      	adds	r3, r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	18d3      	adds	r3, r2, r3
 80034a0:	3301      	adds	r3, #1
 80034a2:	001a      	movs	r2, r3
 80034a4:	f000 f8f3 	bl	800368e <NDEF_Record_SetPayload>
		index += payloadLength;
 80034a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034aa:	b2d9      	uxtb	r1, r3
 80034ac:	193b      	adds	r3, r7, r4
 80034ae:	193a      	adds	r2, r7, r4
 80034b0:	7812      	ldrb	r2, [r2, #0]
 80034b2:	188a      	adds	r2, r1, r2
 80034b4:	701a      	strb	r2, [r3, #0]
		
		if(message->record_Count < MAX_NDEF_RECORDS)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	2b03      	cmp	r3, #3
 80034bc:	d806      	bhi.n	80034cc <Get_NDEF_Message+0x222>
		{
			message->record_Count++;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	3301      	adds	r3, #1
 80034c4:	b2da      	uxtb	r2, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	701a      	strb	r2, [r3, #0]
 80034ca:	e001      	b.n	80034d0 <Get_NDEF_Message+0x226>
		}
		else
			return 0;
 80034cc:	2300      	movs	r3, #0
 80034ce:	e00e      	b.n	80034ee <Get_NDEF_Message+0x244>
		
		if(me)
 80034d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d109      	bne.n	80034ea <Get_NDEF_Message+0x240>
	while (index <= numBytes)
 80034d6:	233f      	movs	r3, #63	; 0x3f
 80034d8:	18fa      	adds	r2, r7, r3
 80034da:	230b      	movs	r3, #11
 80034dc:	18fb      	adds	r3, r7, r3
 80034de:	7812      	ldrb	r2, [r2, #0]
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d800      	bhi.n	80034e8 <Get_NDEF_Message+0x23e>
 80034e6:	e6f2      	b.n	80032ce <Get_NDEF_Message+0x24>
 80034e8:	e000      	b.n	80034ec <Get_NDEF_Message+0x242>
			break;
 80034ea:	46c0      	nop			; (mov r8, r8)
	}
	return 1;
 80034ec:	2301      	movs	r3, #1
}
 80034ee:	0018      	movs	r0, r3
 80034f0:	46bd      	mov	sp, r7
 80034f2:	b011      	add	sp, #68	; 0x44
 80034f4:	bd90      	pop	{r4, r7, pc}

080034f6 <NDEF_Message_GetEncodeSize>:

int NDEF_Message_GetEncodeSize(NDEF_Message *message)
{
 80034f6:	b580      	push	{r7, lr}
 80034f8:	b084      	sub	sp, #16
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6078      	str	r0, [r7, #4]
	int size = 0;
 80034fe:	2300      	movs	r3, #0
 8003500:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < message->record_Count; i++)	
 8003502:	2300      	movs	r3, #0
 8003504:	60bb      	str	r3, [r7, #8]
 8003506:	e014      	b.n	8003532 <NDEF_Message_GetEncodeSize+0x3c>
		size += NDEF_Record_GetEncodedSize(&message->record[i]);
 8003508:	68ba      	ldr	r2, [r7, #8]
 800350a:	0013      	movs	r3, r2
 800350c:	011b      	lsls	r3, r3, #4
 800350e:	189b      	adds	r3, r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	189b      	adds	r3, r3, r2
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	18d3      	adds	r3, r2, r3
 800351a:	3301      	adds	r3, #1
 800351c:	0018      	movs	r0, r3
 800351e:	f000 f8d0 	bl	80036c2 <NDEF_Record_GetEncodedSize>
 8003522:	0003      	movs	r3, r0
 8003524:	001a      	movs	r2, r3
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	189b      	adds	r3, r3, r2
 800352a:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < message->record_Count; i++)	
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	3301      	adds	r3, #1
 8003530:	60bb      	str	r3, [r7, #8]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	001a      	movs	r2, r3
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	4293      	cmp	r3, r2
 800353c:	dbe4      	blt.n	8003508 <NDEF_Message_GetEncodeSize+0x12>
	
	return size;
 800353e:	68fb      	ldr	r3, [r7, #12]
}
 8003540:	0018      	movs	r0, r3
 8003542:	46bd      	mov	sp, r7
 8003544:	b004      	add	sp, #16
 8003546:	bd80      	pop	{r7, pc}

08003548 <NDEF_Message_Encode>:

void NDEF_Message_Encode(uint8_t *data, NDEF_Message *message) 
{
 8003548:	b590      	push	{r4, r7, lr}
 800354a:	b085      	sub	sp, #20
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
	uint8_t *data_ptr = &data[0];
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < message->record_Count; i++)
 8003556:	2300      	movs	r3, #0
 8003558:	60bb      	str	r3, [r7, #8]
 800355a:	e030      	b.n	80035be <NDEF_Message_Encode+0x76>
	{
		NDEF_Record_Encode(data_ptr, i == 0, (i + 1) == message->record_Count, &message->record[i]);
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	425a      	negs	r2, r3
 8003560:	4153      	adcs	r3, r2
 8003562:	b2db      	uxtb	r3, r3
 8003564:	0019      	movs	r1, r3
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	3301      	adds	r3, #1
 800356a:	683a      	ldr	r2, [r7, #0]
 800356c:	7812      	ldrb	r2, [r2, #0]
 800356e:	1a9b      	subs	r3, r3, r2
 8003570:	425a      	negs	r2, r3
 8003572:	4153      	adcs	r3, r2
 8003574:	b2db      	uxtb	r3, r3
 8003576:	001c      	movs	r4, r3
 8003578:	68ba      	ldr	r2, [r7, #8]
 800357a:	0013      	movs	r3, r2
 800357c:	011b      	lsls	r3, r3, #4
 800357e:	189b      	adds	r3, r3, r2
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	189b      	adds	r3, r3, r2
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	683a      	ldr	r2, [r7, #0]
 8003588:	18d3      	adds	r3, r2, r3
 800358a:	3301      	adds	r3, #1
 800358c:	68f8      	ldr	r0, [r7, #12]
 800358e:	0022      	movs	r2, r4
 8003590:	f000 f8c4 	bl	800371c <NDEF_Record_Encode>
		data_ptr += NDEF_Record_GetEncodedSize(&message->record[i]);
 8003594:	68ba      	ldr	r2, [r7, #8]
 8003596:	0013      	movs	r3, r2
 8003598:	011b      	lsls	r3, r3, #4
 800359a:	189b      	adds	r3, r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	189b      	adds	r3, r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	683a      	ldr	r2, [r7, #0]
 80035a4:	18d3      	adds	r3, r2, r3
 80035a6:	3301      	adds	r3, #1
 80035a8:	0018      	movs	r0, r3
 80035aa:	f000 f88a 	bl	80036c2 <NDEF_Record_GetEncodedSize>
 80035ae:	0003      	movs	r3, r0
 80035b0:	001a      	movs	r2, r3
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	189b      	adds	r3, r3, r2
 80035b6:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < message->record_Count; i++)
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	3301      	adds	r3, #1
 80035bc:	60bb      	str	r3, [r7, #8]
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	001a      	movs	r2, r3
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	4293      	cmp	r3, r2
 80035c8:	dbc8      	blt.n	800355c <NDEF_Message_Encode+0x14>
	}
}
 80035ca:	46c0      	nop			; (mov r8, r8)
 80035cc:	46bd      	mov	sp, r7
 80035ce:	b005      	add	sp, #20
 80035d0:	bd90      	pop	{r4, r7, pc}

080035d2 <NDEF_Record_Init>:
#include "NDEF_Record.h"

void NDEF_Record_Init(NDEF_Record *record)
{
 80035d2:	b580      	push	{r7, lr}
 80035d4:	b082      	sub	sp, #8
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
	record->tnf = 0;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	701a      	strb	r2, [r3, #0]
	record->typeLength = 0;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	705a      	strb	r2, [r3, #1]
	record->idLength = 0;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	70da      	strb	r2, [r3, #3]
	record->payloadLength = 0;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	709a      	strb	r2, [r3, #2]
	memset(record->type, 0, sizeof(record->type));
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	3304      	adds	r3, #4
 80035f6:	2208      	movs	r2, #8
 80035f8:	2100      	movs	r1, #0
 80035fa:	0018      	movs	r0, r3
 80035fc:	f001 f88e 	bl	800471c <memset>
	memset(record->id, 0, sizeof(record->id));
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	330c      	adds	r3, #12
 8003604:	2208      	movs	r2, #8
 8003606:	2100      	movs	r1, #0
 8003608:	0018      	movs	r0, r3
 800360a:	f001 f887 	bl	800471c <memset>
	memset(record->payload, 0, sizeof(record->payload));
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	3314      	adds	r3, #20
 8003612:	0018      	movs	r0, r3
 8003614:	2380      	movs	r3, #128	; 0x80
 8003616:	005b      	lsls	r3, r3, #1
 8003618:	001a      	movs	r2, r3
 800361a:	2100      	movs	r1, #0
 800361c:	f001 f87e 	bl	800471c <memset>
}
 8003620:	46c0      	nop			; (mov r8, r8)
 8003622:	46bd      	mov	sp, r7
 8003624:	b002      	add	sp, #8
 8003626:	bd80      	pop	{r7, pc}

08003628 <NDEF_Record_SetType>:

void NDEF_Record_SetType(uint8_t *type, uint8_t numBytes, NDEF_Record *record)
{
 8003628:	b590      	push	{r4, r7, lr}
 800362a:	b085      	sub	sp, #20
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	607a      	str	r2, [r7, #4]
 8003632:	240b      	movs	r4, #11
 8003634:	193b      	adds	r3, r7, r4
 8003636:	1c0a      	adds	r2, r1, #0
 8003638:	701a      	strb	r2, [r3, #0]
	memcpy(record->type, type, numBytes);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	1d18      	adds	r0, r3, #4
 800363e:	193b      	adds	r3, r7, r4
 8003640:	781a      	ldrb	r2, [r3, #0]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	0019      	movs	r1, r3
 8003646:	f001 f860 	bl	800470a <memcpy>
	record->typeLength = numBytes;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	193a      	adds	r2, r7, r4
 800364e:	7812      	ldrb	r2, [r2, #0]
 8003650:	705a      	strb	r2, [r3, #1]
}
 8003652:	46c0      	nop			; (mov r8, r8)
 8003654:	46bd      	mov	sp, r7
 8003656:	b005      	add	sp, #20
 8003658:	bd90      	pop	{r4, r7, pc}

0800365a <NDEF_Record_SetId>:

void NDEF_Record_SetId(uint8_t *id, uint8_t numBytes, NDEF_Record *record)
{
 800365a:	b590      	push	{r4, r7, lr}
 800365c:	b085      	sub	sp, #20
 800365e:	af00      	add	r7, sp, #0
 8003660:	60f8      	str	r0, [r7, #12]
 8003662:	607a      	str	r2, [r7, #4]
 8003664:	240b      	movs	r4, #11
 8003666:	193b      	adds	r3, r7, r4
 8003668:	1c0a      	adds	r2, r1, #0
 800366a:	701a      	strb	r2, [r3, #0]
	memcpy(record->id, id, numBytes);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	330c      	adds	r3, #12
 8003670:	0018      	movs	r0, r3
 8003672:	193b      	adds	r3, r7, r4
 8003674:	781a      	ldrb	r2, [r3, #0]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	0019      	movs	r1, r3
 800367a:	f001 f846 	bl	800470a <memcpy>
	record->idLength = numBytes;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	193a      	adds	r2, r7, r4
 8003682:	7812      	ldrb	r2, [r2, #0]
 8003684:	70da      	strb	r2, [r3, #3]
}
 8003686:	46c0      	nop			; (mov r8, r8)
 8003688:	46bd      	mov	sp, r7
 800368a:	b005      	add	sp, #20
 800368c:	bd90      	pop	{r4, r7, pc}

0800368e <NDEF_Record_SetPayload>:

void NDEF_Record_SetPayload(uint8_t* payload, uint8_t numBytes, NDEF_Record *record)
{
 800368e:	b590      	push	{r4, r7, lr}
 8003690:	b085      	sub	sp, #20
 8003692:	af00      	add	r7, sp, #0
 8003694:	60f8      	str	r0, [r7, #12]
 8003696:	607a      	str	r2, [r7, #4]
 8003698:	240b      	movs	r4, #11
 800369a:	193b      	adds	r3, r7, r4
 800369c:	1c0a      	adds	r2, r1, #0
 800369e:	701a      	strb	r2, [r3, #0]
	memcpy(record->payload, payload, numBytes);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	3314      	adds	r3, #20
 80036a4:	0018      	movs	r0, r3
 80036a6:	193b      	adds	r3, r7, r4
 80036a8:	781a      	ldrb	r2, [r3, #0]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	0019      	movs	r1, r3
 80036ae:	f001 f82c 	bl	800470a <memcpy>
	record->payloadLength = numBytes;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	193a      	adds	r2, r7, r4
 80036b6:	7812      	ldrb	r2, [r2, #0]
 80036b8:	709a      	strb	r2, [r3, #2]
}
 80036ba:	46c0      	nop			; (mov r8, r8)
 80036bc:	46bd      	mov	sp, r7
 80036be:	b005      	add	sp, #20
 80036c0:	bd90      	pop	{r4, r7, pc}

080036c2 <NDEF_Record_GetEncodedSize>:

uint8_t NDEF_Record_GetEncodedSize(NDEF_Record *record)
{
 80036c2:	b580      	push	{r7, lr}
 80036c4:	b084      	sub	sp, #16
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	6078      	str	r0, [r7, #4]
	uint8_t size = 2;
 80036ca:	210f      	movs	r1, #15
 80036cc:	187b      	adds	r3, r7, r1
 80036ce:	2202      	movs	r2, #2
 80036d0:	701a      	strb	r2, [r3, #0]

	if(record->payloadLength > 0xFF)
		size += 4;		
	else
		size += 1;
 80036d2:	187b      	adds	r3, r7, r1
 80036d4:	187a      	adds	r2, r7, r1
 80036d6:	7812      	ldrb	r2, [r2, #0]
 80036d8:	3201      	adds	r2, #1
 80036da:	701a      	strb	r2, [r3, #0]
		
	if(record->idLength)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	78db      	ldrb	r3, [r3, #3]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d005      	beq.n	80036f0 <NDEF_Record_GetEncodedSize+0x2e>
		size += 1;
 80036e4:	220f      	movs	r2, #15
 80036e6:	18bb      	adds	r3, r7, r2
 80036e8:	18ba      	adds	r2, r7, r2
 80036ea:	7812      	ldrb	r2, [r2, #0]
 80036ec:	3201      	adds	r2, #1
 80036ee:	701a      	strb	r2, [r3, #0]
	
	size += (record->typeLength + record->payloadLength + record->idLength); 
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	785a      	ldrb	r2, [r3, #1]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	789b      	ldrb	r3, [r3, #2]
 80036f8:	18d3      	adds	r3, r2, r3
 80036fa:	b2da      	uxtb	r2, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	78db      	ldrb	r3, [r3, #3]
 8003700:	18d3      	adds	r3, r2, r3
 8003702:	b2d9      	uxtb	r1, r3
 8003704:	200f      	movs	r0, #15
 8003706:	183b      	adds	r3, r7, r0
 8003708:	183a      	adds	r2, r7, r0
 800370a:	7812      	ldrb	r2, [r2, #0]
 800370c:	188a      	adds	r2, r1, r2
 800370e:	701a      	strb	r2, [r3, #0]
	return size;
 8003710:	183b      	adds	r3, r7, r0
 8003712:	781b      	ldrb	r3, [r3, #0]
}
 8003714:	0018      	movs	r0, r3
 8003716:	46bd      	mov	sp, r7
 8003718:	b004      	add	sp, #16
 800371a:	bd80      	pop	{r7, pc}

0800371c <NDEF_Record_Encode>:

void NDEF_Record_Encode(uint8_t *data, int firstRecord, int lastRecord, NDEF_Record *record)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b086      	sub	sp, #24
 8003720:	af00      	add	r7, sp, #0
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	607a      	str	r2, [r7, #4]
 8003728:	603b      	str	r3, [r7, #0]
	uint8_t *data_ptr = &data[0];
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	617b      	str	r3, [r7, #20]
	
	*data_ptr = NDEF_Record_GetTnfByte(firstRecord, lastRecord, record);
 800372e:	683a      	ldr	r2, [r7, #0]
 8003730:	6879      	ldr	r1, [r7, #4]
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	0018      	movs	r0, r3
 8003736:	f000 f857 	bl	80037e8 <NDEF_Record_GetTnfByte>
 800373a:	0003      	movs	r3, r0
 800373c:	001a      	movs	r2, r3
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	701a      	strb	r2, [r3, #0]
  data_ptr += 1;
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	3301      	adds	r3, #1
 8003746:	617b      	str	r3, [r7, #20]
	
	*data_ptr = record->typeLength;
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	785a      	ldrb	r2, [r3, #1]
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	701a      	strb	r2, [r3, #0]
	data_ptr += 1;
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	3301      	adds	r3, #1
 8003754:	617b      	str	r3, [r7, #20]
	
	if (record->payloadLength <= 0xFF) 
	{  // short record
		*data_ptr = record->payloadLength;
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	789a      	ldrb	r2, [r3, #2]
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	701a      	strb	r2, [r3, #0]
		data_ptr += 1;
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	3301      	adds	r3, #1
 8003762:	617b      	str	r3, [r7, #20]
		data_ptr[2] = (record->payloadLength >> 8) & 0xFF;
		data_ptr[3] = record->payloadLength & 0xFF;
		data_ptr += 4;
	}
	
	if (record->idLength)
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	78db      	ldrb	r3, [r3, #3]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d006      	beq.n	800377a <NDEF_Record_Encode+0x5e>
	{
		*data_ptr = record->idLength;
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	78da      	ldrb	r2, [r3, #3]
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	701a      	strb	r2, [r3, #0]
		data_ptr += 1;
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	3301      	adds	r3, #1
 8003778:	617b      	str	r3, [r7, #20]
	}
    
	memcpy(data_ptr, record->type, record->typeLength);
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	1d19      	adds	r1, r3, #4
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	785b      	ldrb	r3, [r3, #1]
 8003782:	001a      	movs	r2, r3
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	0018      	movs	r0, r3
 8003788:	f000 ffbf 	bl	800470a <memcpy>
	data_ptr += record->typeLength;
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	785b      	ldrb	r3, [r3, #1]
 8003790:	001a      	movs	r2, r3
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	189b      	adds	r3, r3, r2
 8003796:	617b      	str	r3, [r7, #20]

	memcpy(data_ptr, record->payload, record->payloadLength);
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	3314      	adds	r3, #20
 800379c:	0019      	movs	r1, r3
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	789b      	ldrb	r3, [r3, #2]
 80037a2:	001a      	movs	r2, r3
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	0018      	movs	r0, r3
 80037a8:	f000 ffaf 	bl	800470a <memcpy>
	data_ptr += record->payloadLength;
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	789b      	ldrb	r3, [r3, #2]
 80037b0:	001a      	movs	r2, r3
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	189b      	adds	r3, r3, r2
 80037b6:	617b      	str	r3, [r7, #20]

	if (record->idLength)
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	78db      	ldrb	r3, [r3, #3]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d00f      	beq.n	80037e0 <NDEF_Record_Encode+0xc4>
	{
		memcpy(data_ptr, record->id, record->idLength);
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	330c      	adds	r3, #12
 80037c4:	0019      	movs	r1, r3
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	78db      	ldrb	r3, [r3, #3]
 80037ca:	001a      	movs	r2, r3
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	0018      	movs	r0, r3
 80037d0:	f000 ff9b 	bl	800470a <memcpy>
		data_ptr += record->idLength;
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	78db      	ldrb	r3, [r3, #3]
 80037d8:	001a      	movs	r2, r3
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	189b      	adds	r3, r3, r2
 80037de:	617b      	str	r3, [r7, #20]
	}
}
 80037e0:	46c0      	nop			; (mov r8, r8)
 80037e2:	46bd      	mov	sp, r7
 80037e4:	b006      	add	sp, #24
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <NDEF_Record_GetTnfByte>:

uint8_t NDEF_Record_GetTnfByte(int firstRecord, int lastRecord, NDEF_Record *record)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b086      	sub	sp, #24
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	607a      	str	r2, [r7, #4]
	uint8_t value = record->tnf;
 80037f4:	2317      	movs	r3, #23
 80037f6:	18fb      	adds	r3, r7, r3
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	7812      	ldrb	r2, [r2, #0]
 80037fc:	701a      	strb	r2, [r3, #0]
	
	if(firstRecord) 
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d007      	beq.n	8003814 <NDEF_Record_GetTnfByte+0x2c>
		value = value | 0x80;
 8003804:	2217      	movs	r2, #23
 8003806:	18bb      	adds	r3, r7, r2
 8003808:	18ba      	adds	r2, r7, r2
 800380a:	7812      	ldrb	r2, [r2, #0]
 800380c:	2180      	movs	r1, #128	; 0x80
 800380e:	4249      	negs	r1, r1
 8003810:	430a      	orrs	r2, r1
 8003812:	701a      	strb	r2, [r3, #0]

  if(lastRecord) 
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d006      	beq.n	8003828 <NDEF_Record_GetTnfByte+0x40>
		value = value | 0x40;
 800381a:	2217      	movs	r2, #23
 800381c:	18bb      	adds	r3, r7, r2
 800381e:	18ba      	adds	r2, r7, r2
 8003820:	7812      	ldrb	r2, [r2, #0]
 8003822:	2140      	movs	r1, #64	; 0x40
 8003824:	430a      	orrs	r2, r1
 8003826:	701a      	strb	r2, [r3, #0]

	if(record->payloadLength <= 0xFF) 
    value = value | 0x10;
 8003828:	2217      	movs	r2, #23
 800382a:	18bb      	adds	r3, r7, r2
 800382c:	18ba      	adds	r2, r7, r2
 800382e:	7812      	ldrb	r2, [r2, #0]
 8003830:	2110      	movs	r1, #16
 8003832:	430a      	orrs	r2, r1
 8003834:	701a      	strb	r2, [r3, #0]

  if(record->idLength)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	78db      	ldrb	r3, [r3, #3]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d006      	beq.n	800384c <NDEF_Record_GetTnfByte+0x64>
    value = value | 0x8;
 800383e:	2217      	movs	r2, #23
 8003840:	18bb      	adds	r3, r7, r2
 8003842:	18ba      	adds	r2, r7, r2
 8003844:	7812      	ldrb	r2, [r2, #0]
 8003846:	2108      	movs	r1, #8
 8003848:	430a      	orrs	r2, r1
 800384a:	701a      	strb	r2, [r3, #0]

  return value;
 800384c:	2317      	movs	r3, #23
 800384e:	18fb      	adds	r3, r7, r3
 8003850:	781b      	ldrb	r3, [r3, #0]
}
 8003852:	0018      	movs	r0, r3
 8003854:	46bd      	mov	sp, r7
 8003856:	b006      	add	sp, #24
 8003858:	bd80      	pop	{r7, pc}
	...

0800385c <NDEF_Record_Create_TextRecord>:

void NDEF_Record_Create_TextRecord(char *fileName, uint8_t len, NDEF_Record *record)
{
 800385c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800385e:	b08f      	sub	sp, #60	; 0x3c
 8003860:	af00      	add	r7, sp, #0
 8003862:	6278      	str	r0, [r7, #36]	; 0x24
 8003864:	61fa      	str	r2, [r7, #28]
 8003866:	260b      	movs	r6, #11
 8003868:	2018      	movs	r0, #24
 800386a:	183b      	adds	r3, r7, r0
 800386c:	199b      	adds	r3, r3, r6
 800386e:	1c0a      	adds	r2, r1, #0
 8003870:	701a      	strb	r2, [r3, #0]
 8003872:	466b      	mov	r3, sp
 8003874:	61bb      	str	r3, [r7, #24]
	
	NDEF_Record_Init(record);
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	0018      	movs	r0, r3
 800387a:	f7ff feaa 	bl	80035d2 <NDEF_Record_Init>
	record->tnf = TNF_WELL_KNOWN;
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	2201      	movs	r2, #1
 8003882:	701a      	strb	r2, [r3, #0]
	uint8_t RTD_TEXT[1] = { 0x54 };
 8003884:	2114      	movs	r1, #20
 8003886:	2018      	movs	r0, #24
 8003888:	183b      	adds	r3, r7, r0
 800388a:	185b      	adds	r3, r3, r1
 800388c:	2254      	movs	r2, #84	; 0x54
 800388e:	701a      	strb	r2, [r3, #0]
	NDEF_Record_SetType(RTD_TEXT, sizeof(RTD_TEXT), record);
 8003890:	69fa      	ldr	r2, [r7, #28]
 8003892:	0003      	movs	r3, r0
 8003894:	18f8      	adds	r0, r7, r3
 8003896:	1843      	adds	r3, r0, r1
 8003898:	2101      	movs	r1, #1
 800389a:	0018      	movs	r0, r3
 800389c:	f7ff fec4 	bl	8003628 <NDEF_Record_SetType>
	
	uint8_t payload[1+2+len];
 80038a0:	2318      	movs	r3, #24
 80038a2:	18fa      	adds	r2, r7, r3
 80038a4:	1993      	adds	r3, r2, r6
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	1cde      	adds	r6, r3, #3
 80038aa:	1e73      	subs	r3, r6, #1
 80038ac:	637b      	str	r3, [r7, #52]	; 0x34
 80038ae:	0033      	movs	r3, r6
 80038b0:	60bb      	str	r3, [r7, #8]
 80038b2:	2300      	movs	r3, #0
 80038b4:	60fb      	str	r3, [r7, #12]
 80038b6:	68b9      	ldr	r1, [r7, #8]
 80038b8:	68fa      	ldr	r2, [r7, #12]
 80038ba:	0008      	movs	r0, r1
 80038bc:	0f43      	lsrs	r3, r0, #29
 80038be:	0010      	movs	r0, r2
 80038c0:	00c0      	lsls	r0, r0, #3
 80038c2:	6178      	str	r0, [r7, #20]
 80038c4:	6978      	ldr	r0, [r7, #20]
 80038c6:	4318      	orrs	r0, r3
 80038c8:	6178      	str	r0, [r7, #20]
 80038ca:	00c9      	lsls	r1, r1, #3
 80038cc:	6139      	str	r1, [r7, #16]
 80038ce:	0033      	movs	r3, r6
 80038d0:	603b      	str	r3, [r7, #0]
 80038d2:	2300      	movs	r3, #0
 80038d4:	607b      	str	r3, [r7, #4]
 80038d6:	6839      	ldr	r1, [r7, #0]
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	0008      	movs	r0, r1
 80038dc:	0f43      	lsrs	r3, r0, #29
 80038de:	0010      	movs	r0, r2
 80038e0:	00c5      	lsls	r5, r0, #3
 80038e2:	431d      	orrs	r5, r3
 80038e4:	00cc      	lsls	r4, r1, #3
 80038e6:	0033      	movs	r3, r6
 80038e8:	3307      	adds	r3, #7
 80038ea:	08db      	lsrs	r3, r3, #3
 80038ec:	00db      	lsls	r3, r3, #3
 80038ee:	4669      	mov	r1, sp
 80038f0:	1ac9      	subs	r1, r1, r3
 80038f2:	468d      	mov	sp, r1
 80038f4:	466b      	mov	r3, sp
 80038f6:	3300      	adds	r3, #0
 80038f8:	633b      	str	r3, [r7, #48]	; 0x30
	
	memset(payload,0x02,1);
 80038fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038fc:	2201      	movs	r2, #1
 80038fe:	2102      	movs	r1, #2
 8003900:	0018      	movs	r0, r3
 8003902:	f000 ff0b 	bl	800471c <memset>
	memcpy(payload+1,"en",2);
 8003906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003908:	3301      	adds	r3, #1
 800390a:	490e      	ldr	r1, [pc, #56]	; (8003944 <NDEF_Record_Create_TextRecord+0xe8>)
 800390c:	2202      	movs	r2, #2
 800390e:	0018      	movs	r0, r3
 8003910:	f000 fefb 	bl	800470a <memcpy>
	memcpy(payload+3,fileName,len);
 8003914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003916:	1cd8      	adds	r0, r3, #3
 8003918:	220b      	movs	r2, #11
 800391a:	2318      	movs	r3, #24
 800391c:	18fb      	adds	r3, r7, r3
 800391e:	189b      	adds	r3, r3, r2
 8003920:	781a      	ldrb	r2, [r3, #0]
 8003922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003924:	0019      	movs	r1, r3
 8003926:	f000 fef0 	bl	800470a <memcpy>
	
	NDEF_Record_SetPayload(payload,sizeof(payload),record);	
 800392a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800392c:	b2f1      	uxtb	r1, r6
 800392e:	69fa      	ldr	r2, [r7, #28]
 8003930:	0018      	movs	r0, r3
 8003932:	f7ff feac 	bl	800368e <NDEF_Record_SetPayload>
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	469d      	mov	sp, r3
}
 800393a:	46c0      	nop			; (mov r8, r8)
 800393c:	46bd      	mov	sp, r7
 800393e:	b00f      	add	sp, #60	; 0x3c
 8003940:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003942:	46c0      	nop			; (mov r8, r8)
 8003944:	0800476c 	.word	0x0800476c

08003948 <NFC_Clear_Tag>:
//		}
//	}
//}

void NFC_Clear_Tag(NFC_Tag *tag)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
	tag->type = 0;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	701a      	strb	r2, [r3, #0]
	tag->uid_len = 0;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	721a      	strb	r2, [r3, #8]
	memset(tag->uid, 0, sizeof(tag->uid));
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	3301      	adds	r3, #1
 8003960:	2207      	movs	r2, #7
 8003962:	2100      	movs	r1, #0
 8003964:	0018      	movs	r0, r3
 8003966:	f000 fed9 	bl	800471c <memset>
	
	tag->ndefMessage.record_Count = 0;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	725a      	strb	r2, [r3, #9]
	
	for(int i=0; i<4; i++)
 8003970:	2300      	movs	r3, #0
 8003972:	60fb      	str	r3, [r7, #12]
 8003974:	e063      	b.n	8003a3e <NFC_Clear_Tag+0xf6>
	{
		tag->ndefMessage.record[i].tnf = 0;
 8003976:	6879      	ldr	r1, [r7, #4]
 8003978:	68fa      	ldr	r2, [r7, #12]
 800397a:	0013      	movs	r3, r2
 800397c:	011b      	lsls	r3, r3, #4
 800397e:	189b      	adds	r3, r3, r2
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	189b      	adds	r3, r3, r2
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	18cb      	adds	r3, r1, r3
 8003988:	330a      	adds	r3, #10
 800398a:	2200      	movs	r2, #0
 800398c:	701a      	strb	r2, [r3, #0]
		tag->ndefMessage.record[i].typeLength = 0;
 800398e:	6879      	ldr	r1, [r7, #4]
 8003990:	68fa      	ldr	r2, [r7, #12]
 8003992:	0013      	movs	r3, r2
 8003994:	011b      	lsls	r3, r3, #4
 8003996:	189b      	adds	r3, r3, r2
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	189b      	adds	r3, r3, r2
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	18cb      	adds	r3, r1, r3
 80039a0:	330b      	adds	r3, #11
 80039a2:	2200      	movs	r2, #0
 80039a4:	701a      	strb	r2, [r3, #0]
		tag->ndefMessage.record[i].payloadLength = 0;
 80039a6:	6879      	ldr	r1, [r7, #4]
 80039a8:	68fa      	ldr	r2, [r7, #12]
 80039aa:	0013      	movs	r3, r2
 80039ac:	011b      	lsls	r3, r3, #4
 80039ae:	189b      	adds	r3, r3, r2
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	189b      	adds	r3, r3, r2
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	18cb      	adds	r3, r1, r3
 80039b8:	330c      	adds	r3, #12
 80039ba:	2200      	movs	r2, #0
 80039bc:	701a      	strb	r2, [r3, #0]
		tag->ndefMessage.record[i].idLength = 0;
 80039be:	6879      	ldr	r1, [r7, #4]
 80039c0:	68fa      	ldr	r2, [r7, #12]
 80039c2:	0013      	movs	r3, r2
 80039c4:	011b      	lsls	r3, r3, #4
 80039c6:	189b      	adds	r3, r3, r2
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	189b      	adds	r3, r3, r2
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	18cb      	adds	r3, r1, r3
 80039d0:	330d      	adds	r3, #13
 80039d2:	2200      	movs	r2, #0
 80039d4:	701a      	strb	r2, [r3, #0]
		memset(tag->ndefMessage.record[i].type, 0, sizeof(tag->ndefMessage.record[i].type));
 80039d6:	68fa      	ldr	r2, [r7, #12]
 80039d8:	0013      	movs	r3, r2
 80039da:	011b      	lsls	r3, r3, #4
 80039dc:	189b      	adds	r3, r3, r2
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	189b      	adds	r3, r3, r2
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	3308      	adds	r3, #8
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	18d3      	adds	r3, r2, r3
 80039ea:	3306      	adds	r3, #6
 80039ec:	2208      	movs	r2, #8
 80039ee:	2100      	movs	r1, #0
 80039f0:	0018      	movs	r0, r3
 80039f2:	f000 fe93 	bl	800471c <memset>
		memset(tag->ndefMessage.record[i].id, 0, sizeof(tag->ndefMessage.record[i].id));
 80039f6:	68fa      	ldr	r2, [r7, #12]
 80039f8:	0013      	movs	r3, r2
 80039fa:	011b      	lsls	r3, r3, #4
 80039fc:	189b      	adds	r3, r3, r2
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	189b      	adds	r3, r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	3310      	adds	r3, #16
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	18d3      	adds	r3, r2, r3
 8003a0a:	3306      	adds	r3, #6
 8003a0c:	2208      	movs	r2, #8
 8003a0e:	2100      	movs	r1, #0
 8003a10:	0018      	movs	r0, r3
 8003a12:	f000 fe83 	bl	800471c <memset>
		memset(tag->ndefMessage.record[i].payload, 0, sizeof(tag->ndefMessage.record[i].payload));
 8003a16:	68fa      	ldr	r2, [r7, #12]
 8003a18:	0013      	movs	r3, r2
 8003a1a:	011b      	lsls	r3, r3, #4
 8003a1c:	189b      	adds	r3, r3, r2
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	189b      	adds	r3, r3, r2
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	3318      	adds	r3, #24
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	18d3      	adds	r3, r2, r3
 8003a2a:	1d98      	adds	r0, r3, #6
 8003a2c:	2380      	movs	r3, #128	; 0x80
 8003a2e:	005b      	lsls	r3, r3, #1
 8003a30:	001a      	movs	r2, r3
 8003a32:	2100      	movs	r1, #0
 8003a34:	f000 fe72 	bl	800471c <memset>
	for(int i=0; i<4; i++)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	3301      	adds	r3, #1
 8003a3c:	60fb      	str	r3, [r7, #12]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2b03      	cmp	r3, #3
 8003a42:	dd98      	ble.n	8003976 <NFC_Clear_Tag+0x2e>
	}
}
 8003a44:	46c0      	nop			; (mov r8, r8)
 8003a46:	46bd      	mov	sp, r7
 8003a48:	b004      	add	sp, #16
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <PN532_WakeUp>:
#include "PN532.h"
#include "Mifare_Classic.h"
#include "Mifare_Ultralight.h"

void PN532_WakeUp(void)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
	uint8_t wakeup_cmd[]={0x55,0x55,0x00,0x00,0x00,0x00}; 
 8003a52:	003b      	movs	r3, r7
 8003a54:	4a0b      	ldr	r2, [pc, #44]	; (8003a84 <PN532_WakeUp+0x38>)
 8003a56:	6811      	ldr	r1, [r2, #0]
 8003a58:	6019      	str	r1, [r3, #0]
 8003a5a:	8892      	ldrh	r2, [r2, #4]
 8003a5c:	809a      	strh	r2, [r3, #4]
	 
	HAL_UART_Transmit(&huart1,wakeup_cmd,sizeof(wakeup_cmd),0xffff);
 8003a5e:	4b0a      	ldr	r3, [pc, #40]	; (8003a88 <PN532_WakeUp+0x3c>)
 8003a60:	0039      	movs	r1, r7
 8003a62:	480a      	ldr	r0, [pc, #40]	; (8003a8c <PN532_WakeUp+0x40>)
 8003a64:	2206      	movs	r2, #6
 8003a66:	f7fd fdbb 	bl	80015e0 <HAL_UART_Transmit>
  while(__HAL_UART_GET_FLAG(&huart1,UART_FLAG_TXE)==0);
 8003a6a:	46c0      	nop			; (mov r8, r8)
 8003a6c:	4b07      	ldr	r3, [pc, #28]	; (8003a8c <PN532_WakeUp+0x40>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	69db      	ldr	r3, [r3, #28]
 8003a72:	2280      	movs	r2, #128	; 0x80
 8003a74:	4013      	ands	r3, r2
 8003a76:	2b80      	cmp	r3, #128	; 0x80
 8003a78:	d1f8      	bne.n	8003a6c <PN532_WakeUp+0x20>
}
 8003a7a:	46c0      	nop			; (mov r8, r8)
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	b002      	add	sp, #8
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	46c0      	nop			; (mov r8, r8)
 8003a84:	08004770 	.word	0x08004770
 8003a88:	0000ffff 	.word	0x0000ffff
 8003a8c:	200004cc 	.word	0x200004cc

08003a90 <PN532_WriteCommand>:

int PN532_WriteCommand(uint8_t* cmd_data, uint8_t len)
{
 8003a90:	b590      	push	{r4, r7, lr}
 8003a92:	b0a1      	sub	sp, #132	; 0x84
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	000a      	movs	r2, r1
 8003a9a:	1cfb      	adds	r3, r7, #3
 8003a9c:	701a      	strb	r2, [r3, #0]
	uint8_t cmd[100];
	uint8_t cmd_len = 0;
 8003a9e:	2077      	movs	r0, #119	; 0x77
 8003aa0:	183b      	adds	r3, r7, r0
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	701a      	strb	r2, [r3, #0]
	uint8_t checksum = 0;
 8003aa6:	237f      	movs	r3, #127	; 0x7f
 8003aa8:	18fb      	adds	r3, r7, r3
 8003aaa:	2200      	movs	r2, #0
 8003aac:	701a      	strb	r2, [r3, #0]
	uint8_t data_return_len = 0;
 8003aae:	230f      	movs	r3, #15
 8003ab0:	18fb      	adds	r3, r7, r3
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	701a      	strb	r2, [r3, #0]
	cmd[0] = PN532_PREAMBLE;
 8003ab6:	2110      	movs	r1, #16
 8003ab8:	187b      	adds	r3, r7, r1
 8003aba:	2200      	movs	r2, #0
 8003abc:	701a      	strb	r2, [r3, #0]
	cmd[1] = PN532_STARTCODE1;
 8003abe:	187b      	adds	r3, r7, r1
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	705a      	strb	r2, [r3, #1]
	cmd[2] = PN532_STARTCODE2;
 8003ac4:	187b      	adds	r3, r7, r1
 8003ac6:	22ff      	movs	r2, #255	; 0xff
 8003ac8:	709a      	strb	r2, [r3, #2]
	cmd[3] = len + 1;
 8003aca:	1cfb      	adds	r3, r7, #3
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	3301      	adds	r3, #1
 8003ad0:	b2da      	uxtb	r2, r3
 8003ad2:	187b      	adds	r3, r7, r1
 8003ad4:	70da      	strb	r2, [r3, #3]
	cmd[4] = 0x100 - cmd[3];
 8003ad6:	187b      	adds	r3, r7, r1
 8003ad8:	78db      	ldrb	r3, [r3, #3]
 8003ada:	425b      	negs	r3, r3
 8003adc:	b2da      	uxtb	r2, r3
 8003ade:	187b      	adds	r3, r7, r1
 8003ae0:	711a      	strb	r2, [r3, #4]
	cmd[5] = PN532_HOSTTOPN532;
 8003ae2:	187b      	adds	r3, r7, r1
 8003ae4:	22d4      	movs	r2, #212	; 0xd4
 8003ae6:	715a      	strb	r2, [r3, #5]
	cmd_len += 6;
 8003ae8:	183b      	adds	r3, r7, r0
 8003aea:	0004      	movs	r4, r0
 8003aec:	183a      	adds	r2, r7, r0
 8003aee:	7812      	ldrb	r2, [r2, #0]
 8003af0:	3206      	adds	r2, #6
 8003af2:	701a      	strb	r2, [r3, #0]
	
	memcpy(cmd+6,cmd_data,len);
 8003af4:	187b      	adds	r3, r7, r1
 8003af6:	3306      	adds	r3, #6
 8003af8:	1cfa      	adds	r2, r7, #3
 8003afa:	7812      	ldrb	r2, [r2, #0]
 8003afc:	6879      	ldr	r1, [r7, #4]
 8003afe:	0018      	movs	r0, r3
 8003b00:	f000 fe03 	bl	800470a <memcpy>
	cmd_len += len;
 8003b04:	0020      	movs	r0, r4
 8003b06:	183b      	adds	r3, r7, r0
 8003b08:	1839      	adds	r1, r7, r0
 8003b0a:	1cfa      	adds	r2, r7, #3
 8003b0c:	7809      	ldrb	r1, [r1, #0]
 8003b0e:	7812      	ldrb	r2, [r2, #0]
 8003b10:	188a      	adds	r2, r1, r2
 8003b12:	701a      	strb	r2, [r3, #0]
	
	for(int i=0; i<len+1; i++)
 8003b14:	2300      	movs	r3, #0
 8003b16:	67bb      	str	r3, [r7, #120]	; 0x78
 8003b18:	e00d      	b.n	8003b36 <PN532_WriteCommand+0xa6>
		checksum += cmd[5 + i];
 8003b1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b1c:	3305      	adds	r3, #5
 8003b1e:	2210      	movs	r2, #16
 8003b20:	18ba      	adds	r2, r7, r2
 8003b22:	5cd1      	ldrb	r1, [r2, r3]
 8003b24:	227f      	movs	r2, #127	; 0x7f
 8003b26:	18bb      	adds	r3, r7, r2
 8003b28:	18ba      	adds	r2, r7, r2
 8003b2a:	7812      	ldrb	r2, [r2, #0]
 8003b2c:	188a      	adds	r2, r1, r2
 8003b2e:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<len+1; i++)
 8003b30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b32:	3301      	adds	r3, #1
 8003b34:	67bb      	str	r3, [r7, #120]	; 0x78
 8003b36:	1cfb      	adds	r3, r7, #3
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	dbeb      	blt.n	8003b1a <PN532_WriteCommand+0x8a>
	
	cmd[cmd_len++] = 0x100 - checksum;
 8003b42:	2077      	movs	r0, #119	; 0x77
 8003b44:	183b      	adds	r3, r7, r0
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	183a      	adds	r2, r7, r0
 8003b4a:	1c59      	adds	r1, r3, #1
 8003b4c:	7011      	strb	r1, [r2, #0]
 8003b4e:	001a      	movs	r2, r3
 8003b50:	237f      	movs	r3, #127	; 0x7f
 8003b52:	18fb      	adds	r3, r7, r3
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	425b      	negs	r3, r3
 8003b58:	b2d9      	uxtb	r1, r3
 8003b5a:	2410      	movs	r4, #16
 8003b5c:	193b      	adds	r3, r7, r4
 8003b5e:	5499      	strb	r1, [r3, r2]
	cmd[cmd_len++] = 0x00;
 8003b60:	183b      	adds	r3, r7, r0
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	183a      	adds	r2, r7, r0
 8003b66:	1c59      	adds	r1, r3, #1
 8003b68:	7011      	strb	r1, [r2, #0]
 8003b6a:	001a      	movs	r2, r3
 8003b6c:	193b      	adds	r3, r7, r4
 8003b6e:	2100      	movs	r1, #0
 8003b70:	5499      	strb	r1, [r3, r2]
	
	HAL_UART_Transmit(&huart1,&cmd[0],cmd_len,1000);
 8003b72:	183b      	adds	r3, r7, r0
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	b29a      	uxth	r2, r3
 8003b78:	23fa      	movs	r3, #250	; 0xfa
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	1939      	adds	r1, r7, r4
 8003b7e:	4813      	ldr	r0, [pc, #76]	; (8003bcc <PN532_WriteCommand+0x13c>)
 8003b80:	f7fd fd2e 	bl	80015e0 <HAL_UART_Transmit>
	HAL_Delay(100);
 8003b84:	2064      	movs	r0, #100	; 0x64
 8003b86:	f7fc fc7b 	bl	8000480 <HAL_Delay>
	
	get_rx_data_len(&data_return_len); 
 8003b8a:	240f      	movs	r4, #15
 8003b8c:	193b      	adds	r3, r7, r4
 8003b8e:	0018      	movs	r0, r3
 8003b90:	f000 fcf4 	bl	800457c <get_rx_data_len>
	if(data_return_len == 0)
 8003b94:	193b      	adds	r3, r7, r4
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d101      	bne.n	8003ba0 <PN532_WriteCommand+0x110>
		return 0;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	e011      	b.n	8003bc4 <PN532_WriteCommand+0x134>
	if(!PN532_Correct_AckFrame() || !PN532_Correct_CheckSum(data_return_len))
 8003ba0:	f000 f816 	bl	8003bd0 <PN532_Correct_AckFrame>
 8003ba4:	1e03      	subs	r3, r0, #0
 8003ba6:	d008      	beq.n	8003bba <PN532_WriteCommand+0x12a>
 8003ba8:	230f      	movs	r3, #15
 8003baa:	18fb      	adds	r3, r7, r3
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	0018      	movs	r0, r3
 8003bb2:	f000 f829 	bl	8003c08 <PN532_Correct_CheckSum>
 8003bb6:	1e03      	subs	r3, r0, #0
 8003bb8:	d103      	bne.n	8003bc2 <PN532_WriteCommand+0x132>
	{
		clean_uart1_rx_data();
 8003bba:	f000 fced 	bl	8004598 <clean_uart1_rx_data>
		return 0;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	e000      	b.n	8003bc4 <PN532_WriteCommand+0x134>
	}	
	return 1;
 8003bc2:	2301      	movs	r3, #1
}
 8003bc4:	0018      	movs	r0, r3
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	b021      	add	sp, #132	; 0x84
 8003bca:	bd90      	pop	{r4, r7, pc}
 8003bcc:	200004cc 	.word	0x200004cc

08003bd0 <PN532_Correct_AckFrame>:

int PN532_Correct_AckFrame(void)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
	uint8_t ack_frame[] = {0x00,0x00,0xFF,0x00,0xFF,0x00};
 8003bd6:	003b      	movs	r3, r7
 8003bd8:	4a09      	ldr	r2, [pc, #36]	; (8003c00 <PN532_Correct_AckFrame+0x30>)
 8003bda:	6811      	ldr	r1, [r2, #0]
 8003bdc:	6019      	str	r1, [r3, #0]
 8003bde:	8892      	ldrh	r2, [r2, #4]
 8003be0:	809a      	strh	r2, [r3, #4]
	
	if(memcmp(ack_frame,uart1_rx_data,6) != 0)
 8003be2:	4908      	ldr	r1, [pc, #32]	; (8003c04 <PN532_Correct_AckFrame+0x34>)
 8003be4:	003b      	movs	r3, r7
 8003be6:	2206      	movs	r2, #6
 8003be8:	0018      	movs	r0, r3
 8003bea:	f000 fd7f 	bl	80046ec <memcmp>
 8003bee:	1e03      	subs	r3, r0, #0
 8003bf0:	d001      	beq.n	8003bf6 <PN532_Correct_AckFrame+0x26>
		return 0;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	e000      	b.n	8003bf8 <PN532_Correct_AckFrame+0x28>
	
	return 1;
 8003bf6:	2301      	movs	r3, #1
}
 8003bf8:	0018      	movs	r0, r3
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	b002      	add	sp, #8
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	08004778 	.word	0x08004778
 8003c04:	2000053c 	.word	0x2000053c

08003c08 <PN532_Correct_CheckSum>:

int PN532_Correct_CheckSum(uint16_t len)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	0002      	movs	r2, r0
 8003c10:	1dbb      	adds	r3, r7, #6
 8003c12:	801a      	strh	r2, [r3, #0]
	uint8_t checkcode = 0;
 8003c14:	230f      	movs	r3, #15
 8003c16:	18fb      	adds	r3, r7, r3
 8003c18:	2200      	movs	r2, #0
 8003c1a:	701a      	strb	r2, [r3, #0]
	for(int i=11; i<len-2; i++)
 8003c1c:	230b      	movs	r3, #11
 8003c1e:	60bb      	str	r3, [r7, #8]
 8003c20:	e00c      	b.n	8003c3c <PN532_Correct_CheckSum+0x34>
		checkcode+=uart1_rx_data[i];
 8003c22:	4a14      	ldr	r2, [pc, #80]	; (8003c74 <PN532_Correct_CheckSum+0x6c>)
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	18d3      	adds	r3, r2, r3
 8003c28:	7819      	ldrb	r1, [r3, #0]
 8003c2a:	220f      	movs	r2, #15
 8003c2c:	18bb      	adds	r3, r7, r2
 8003c2e:	18ba      	adds	r2, r7, r2
 8003c30:	7812      	ldrb	r2, [r2, #0]
 8003c32:	188a      	adds	r2, r1, r2
 8003c34:	701a      	strb	r2, [r3, #0]
	for(int i=11; i<len-2; i++)
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	3301      	adds	r3, #1
 8003c3a:	60bb      	str	r3, [r7, #8]
 8003c3c:	1dbb      	adds	r3, r7, #6
 8003c3e:	881b      	ldrh	r3, [r3, #0]
 8003c40:	3b02      	subs	r3, #2
 8003c42:	68ba      	ldr	r2, [r7, #8]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	dbec      	blt.n	8003c22 <PN532_Correct_CheckSum+0x1a>
	checkcode = 0x100-checkcode;
 8003c48:	210f      	movs	r1, #15
 8003c4a:	187b      	adds	r3, r7, r1
 8003c4c:	187a      	adds	r2, r7, r1
 8003c4e:	7812      	ldrb	r2, [r2, #0]
 8003c50:	4252      	negs	r2, r2
 8003c52:	701a      	strb	r2, [r3, #0]
	if(checkcode != uart1_rx_data[len-2])
 8003c54:	1dbb      	adds	r3, r7, #6
 8003c56:	881b      	ldrh	r3, [r3, #0]
 8003c58:	3b02      	subs	r3, #2
 8003c5a:	4a06      	ldr	r2, [pc, #24]	; (8003c74 <PN532_Correct_CheckSum+0x6c>)
 8003c5c:	5cd3      	ldrb	r3, [r2, r3]
 8003c5e:	187a      	adds	r2, r7, r1
 8003c60:	7812      	ldrb	r2, [r2, #0]
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d001      	beq.n	8003c6a <PN532_Correct_CheckSum+0x62>
		return 0;
 8003c66:	2300      	movs	r3, #0
 8003c68:	e000      	b.n	8003c6c <PN532_Correct_CheckSum+0x64>
	
	return 1;
 8003c6a:	2301      	movs	r3, #1
}
 8003c6c:	0018      	movs	r0, r3
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	b004      	add	sp, #16
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	2000053c 	.word	0x2000053c

08003c78 <PN532_SAMConfig>:

void PN532_SAMConfig(void)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b082      	sub	sp, #8
 8003c7c:	af00      	add	r7, sp, #0
	uint8_t cmd[4];
	
	cmd[0]=0x14;
 8003c7e:	1d3b      	adds	r3, r7, #4
 8003c80:	2214      	movs	r2, #20
 8003c82:	701a      	strb	r2, [r3, #0]
	cmd[1]=0x01;//Mode
 8003c84:	1d3b      	adds	r3, r7, #4
 8003c86:	2201      	movs	r2, #1
 8003c88:	705a      	strb	r2, [r3, #1]
	cmd[2]=0x14;//timeout
 8003c8a:	1d3b      	adds	r3, r7, #4
 8003c8c:	2214      	movs	r2, #20
 8003c8e:	709a      	strb	r2, [r3, #2]
	cmd[3]=0x01;//IRQ
 8003c90:	1d3b      	adds	r3, r7, #4
 8003c92:	2201      	movs	r2, #1
 8003c94:	70da      	strb	r2, [r3, #3]

	while(1)
	{

		if(PN532_WriteCommand(cmd, sizeof(cmd)))
 8003c96:	1d3b      	adds	r3, r7, #4
 8003c98:	2104      	movs	r1, #4
 8003c9a:	0018      	movs	r0, r3
 8003c9c:	f7ff fef8 	bl	8003a90 <PN532_WriteCommand>
 8003ca0:	1e03      	subs	r3, r0, #0
 8003ca2:	d0f8      	beq.n	8003c96 <PN532_SAMConfig+0x1e>
		{
			clean_uart1_rx_data();
 8003ca4:	f000 fc78 	bl	8004598 <clean_uart1_rx_data>
			break;
 8003ca8:	46c0      	nop			; (mov r8, r8)
		}			
	}
}
 8003caa:	46c0      	nop			; (mov r8, r8)
 8003cac:	46bd      	mov	sp, r7
 8003cae:	b002      	add	sp, #8
 8003cb0:	bd80      	pop	{r7, pc}
	...

08003cb4 <PN532_InListPassiveTarget>:


int PN532_InListPassiveTarget(uint8_t cardbaudrate, NFC_Tag *tag)
{	
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	0002      	movs	r2, r0
 8003cbc:	6039      	str	r1, [r7, #0]
 8003cbe:	1dfb      	adds	r3, r7, #7
 8003cc0:	701a      	strb	r2, [r3, #0]
	PN532_WakeUp();
 8003cc2:	f7ff fec3 	bl	8003a4c <PN532_WakeUp>
	PN532_SAMConfig();
 8003cc6:	f7ff ffd7 	bl	8003c78 <PN532_SAMConfig>
	
	uint8_t list_passive_device_cmd[3];
	list_passive_device_cmd[0] = PN532_COMMAND_INLISTPASSIVETARGET;
 8003cca:	210c      	movs	r1, #12
 8003ccc:	187b      	adds	r3, r7, r1
 8003cce:	224a      	movs	r2, #74	; 0x4a
 8003cd0:	701a      	strb	r2, [r3, #0]
	list_passive_device_cmd[1] = 0x01;
 8003cd2:	187b      	adds	r3, r7, r1
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	705a      	strb	r2, [r3, #1]
	list_passive_device_cmd[2] = cardbaudrate;
 8003cd8:	187b      	adds	r3, r7, r1
 8003cda:	1dfa      	adds	r2, r7, #7
 8003cdc:	7812      	ldrb	r2, [r2, #0]
 8003cde:	709a      	strb	r2, [r3, #2]
	
	if(PN532_WriteCommand(list_passive_device_cmd,sizeof(list_passive_device_cmd)))
 8003ce0:	187b      	adds	r3, r7, r1
 8003ce2:	2103      	movs	r1, #3
 8003ce4:	0018      	movs	r0, r3
 8003ce6:	f7ff fed3 	bl	8003a90 <PN532_WriteCommand>
 8003cea:	1e03      	subs	r3, r0, #0
 8003cec:	d020      	beq.n	8003d30 <PN532_InListPassiveTarget+0x7c>
	{
		// UID length : 4
		if(uart1_rx_data[9] == 12)
 8003cee:	4b14      	ldr	r3, [pc, #80]	; (8003d40 <PN532_InListPassiveTarget+0x8c>)
 8003cf0:	7a5b      	ldrb	r3, [r3, #9]
 8003cf2:	2b0c      	cmp	r3, #12
 8003cf4:	d105      	bne.n	8003d02 <PN532_InListPassiveTarget+0x4e>
		{
			tag->uid_len = 4;
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	2204      	movs	r2, #4
 8003cfa:	721a      	strb	r2, [r3, #8]
			tag->type = TAG_TYPE_MIFARE_CLASSIC;
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	701a      	strb	r2, [r3, #0]
		}				
			
		// UID length : 7
		if(uart1_rx_data[9] == 15)
 8003d02:	4b0f      	ldr	r3, [pc, #60]	; (8003d40 <PN532_InListPassiveTarget+0x8c>)
 8003d04:	7a5b      	ldrb	r3, [r3, #9]
 8003d06:	2b0f      	cmp	r3, #15
 8003d08:	d105      	bne.n	8003d16 <PN532_InListPassiveTarget+0x62>
		{
			tag->uid_len = 7;			
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	2207      	movs	r2, #7
 8003d0e:	721a      	strb	r2, [r3, #8]
			tag->type = TAG_TYPE_MIFARE_ULTRALIGHT;
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	2202      	movs	r2, #2
 8003d14:	701a      	strb	r2, [r3, #0]
		}	
				
		memcpy(tag->uid,&uart1_rx_data[19],tag->uid_len);
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	1c58      	adds	r0, r3, #1
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	7a1b      	ldrb	r3, [r3, #8]
 8003d1e:	001a      	movs	r2, r3
 8003d20:	4b08      	ldr	r3, [pc, #32]	; (8003d44 <PN532_InListPassiveTarget+0x90>)
 8003d22:	0019      	movs	r1, r3
 8003d24:	f000 fcf1 	bl	800470a <memcpy>
		clean_uart1_rx_data();
 8003d28:	f000 fc36 	bl	8004598 <clean_uart1_rx_data>
		return 1;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e002      	b.n	8003d36 <PN532_InListPassiveTarget+0x82>
	}	
	clean_uart1_rx_data();
 8003d30:	f000 fc32 	bl	8004598 <clean_uart1_rx_data>
	return 0;	
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	0018      	movs	r0, r3
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	b004      	add	sp, #16
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	46c0      	nop			; (mov r8, r8)
 8003d40:	2000053c 	.word	0x2000053c
 8003d44:	2000054f 	.word	0x2000054f

08003d48 <PN532_Read_Tag>:

int PN532_Read_Tag(NFC_Tag *tag)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
	int sucess = 0;
 8003d50:	2300      	movs	r3, #0
 8003d52:	60fb      	str	r3, [r7, #12]
	switch(tag->type)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d002      	beq.n	8003d62 <PN532_Read_Tag+0x1a>
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d007      	beq.n	8003d70 <PN532_Read_Tag+0x28>
 8003d60:	e00d      	b.n	8003d7e <PN532_Read_Tag+0x36>
	{
		case TAG_TYPE_MIFARE_CLASSIC:
		{
			sucess = Mifare_Classic_Read(tag);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	0018      	movs	r0, r3
 8003d66:	f7fe fc05 	bl	8002574 <Mifare_Classic_Read>
 8003d6a:	0003      	movs	r3, r0
 8003d6c:	60fb      	str	r3, [r7, #12]
			break;
 8003d6e:	e006      	b.n	8003d7e <PN532_Read_Tag+0x36>
		}
		case TAG_TYPE_MIFARE_ULTRALIGHT:
		{
			sucess = Mifare_Ultralight_Read(tag);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	0018      	movs	r0, r3
 8003d74:	f7ff f80c 	bl	8002d90 <Mifare_Ultralight_Read>
 8003d78:	0003      	movs	r3, r0
 8003d7a:	60fb      	str	r3, [r7, #12]
			break;
 8003d7c:	46c0      	nop			; (mov r8, r8)
		}
	}
	
	if(sucess == 1)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d101      	bne.n	8003d88 <PN532_Read_Tag+0x40>
		return 1;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e000      	b.n	8003d8a <PN532_Read_Tag+0x42>
	else 
		return 0;
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	0018      	movs	r0, r3
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	b004      	add	sp, #16
 8003d90:	bd80      	pop	{r7, pc}

08003d92 <PN532_Write_Tag>:

int PN532_Write_Tag(NFC_Tag *tag)
{
 8003d92:	b580      	push	{r7, lr}
 8003d94:	b084      	sub	sp, #16
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
	int sucess = 0;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	60fb      	str	r3, [r7, #12]
	switch(tag->type)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	781b      	ldrb	r3, [r3, #0]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d002      	beq.n	8003dac <PN532_Write_Tag+0x1a>
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d007      	beq.n	8003dba <PN532_Write_Tag+0x28>
 8003daa:	e00d      	b.n	8003dc8 <PN532_Write_Tag+0x36>
	{
		case TAG_TYPE_MIFARE_CLASSIC:
		{
			sucess = Mifare_Classic_Write(tag);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	0018      	movs	r0, r3
 8003db0:	f7fe fe62 	bl	8002a78 <Mifare_Classic_Write>
 8003db4:	0003      	movs	r3, r0
 8003db6:	60fb      	str	r3, [r7, #12]
			break;
 8003db8:	e006      	b.n	8003dc8 <PN532_Write_Tag+0x36>
		}
		
		case TAG_TYPE_MIFARE_ULTRALIGHT:
		{
			sucess = Mifare_Ultralight_Write(tag);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	0018      	movs	r0, r3
 8003dbe:	f7ff f94f 	bl	8003060 <Mifare_Ultralight_Write>
 8003dc2:	0003      	movs	r3, r0
 8003dc4:	60fb      	str	r3, [r7, #12]
			break;
 8003dc6:	46c0      	nop			; (mov r8, r8)
		}
	}
	
	if(sucess == 1)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d101      	bne.n	8003dd2 <PN532_Write_Tag+0x40>
		return 1;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e000      	b.n	8003dd4 <PN532_Write_Tag+0x42>
	else 
		return 0;
 8003dd2:	2300      	movs	r3, #0
}
 8003dd4:	0018      	movs	r0, r3
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	b004      	add	sp, #16
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8003ddc:	b590      	push	{r4, r7, lr}
 8003dde:	b089      	sub	sp, #36	; 0x24
 8003de0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003de2:	240c      	movs	r4, #12
 8003de4:	193b      	adds	r3, r7, r4
 8003de6:	0018      	movs	r0, r3
 8003de8:	2314      	movs	r3, #20
 8003dea:	001a      	movs	r2, r3
 8003dec:	2100      	movs	r1, #0
 8003dee:	f000 fc95 	bl	800471c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003df2:	4b3a      	ldr	r3, [pc, #232]	; (8003edc <MX_GPIO_Init+0x100>)
 8003df4:	695a      	ldr	r2, [r3, #20]
 8003df6:	4b39      	ldr	r3, [pc, #228]	; (8003edc <MX_GPIO_Init+0x100>)
 8003df8:	2180      	movs	r1, #128	; 0x80
 8003dfa:	03c9      	lsls	r1, r1, #15
 8003dfc:	430a      	orrs	r2, r1
 8003dfe:	615a      	str	r2, [r3, #20]
 8003e00:	4b36      	ldr	r3, [pc, #216]	; (8003edc <MX_GPIO_Init+0x100>)
 8003e02:	695a      	ldr	r2, [r3, #20]
 8003e04:	2380      	movs	r3, #128	; 0x80
 8003e06:	03db      	lsls	r3, r3, #15
 8003e08:	4013      	ands	r3, r2
 8003e0a:	60bb      	str	r3, [r7, #8]
 8003e0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e0e:	4b33      	ldr	r3, [pc, #204]	; (8003edc <MX_GPIO_Init+0x100>)
 8003e10:	695a      	ldr	r2, [r3, #20]
 8003e12:	4b32      	ldr	r3, [pc, #200]	; (8003edc <MX_GPIO_Init+0x100>)
 8003e14:	2180      	movs	r1, #128	; 0x80
 8003e16:	0289      	lsls	r1, r1, #10
 8003e18:	430a      	orrs	r2, r1
 8003e1a:	615a      	str	r2, [r3, #20]
 8003e1c:	4b2f      	ldr	r3, [pc, #188]	; (8003edc <MX_GPIO_Init+0x100>)
 8003e1e:	695a      	ldr	r2, [r3, #20]
 8003e20:	2380      	movs	r3, #128	; 0x80
 8003e22:	029b      	lsls	r3, r3, #10
 8003e24:	4013      	ands	r3, r2
 8003e26:	607b      	str	r3, [r7, #4]
 8003e28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e2a:	4b2c      	ldr	r3, [pc, #176]	; (8003edc <MX_GPIO_Init+0x100>)
 8003e2c:	695a      	ldr	r2, [r3, #20]
 8003e2e:	4b2b      	ldr	r3, [pc, #172]	; (8003edc <MX_GPIO_Init+0x100>)
 8003e30:	2180      	movs	r1, #128	; 0x80
 8003e32:	02c9      	lsls	r1, r1, #11
 8003e34:	430a      	orrs	r2, r1
 8003e36:	615a      	str	r2, [r3, #20]
 8003e38:	4b28      	ldr	r3, [pc, #160]	; (8003edc <MX_GPIO_Init+0x100>)
 8003e3a:	695a      	ldr	r2, [r3, #20]
 8003e3c:	2380      	movs	r3, #128	; 0x80
 8003e3e:	02db      	lsls	r3, r3, #11
 8003e40:	4013      	ands	r3, r2
 8003e42:	603b      	str	r3, [r7, #0]
 8003e44:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003e46:	193b      	adds	r3, r7, r4
 8003e48:	2203      	movs	r2, #3
 8003e4a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003e4c:	193b      	adds	r3, r7, r4
 8003e4e:	2203      	movs	r2, #3
 8003e50:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e52:	193b      	adds	r3, r7, r4
 8003e54:	2200      	movs	r2, #0
 8003e56:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003e58:	193b      	adds	r3, r7, r4
 8003e5a:	4a21      	ldr	r2, [pc, #132]	; (8003ee0 <MX_GPIO_Init+0x104>)
 8003e5c:	0019      	movs	r1, r3
 8003e5e:	0010      	movs	r0, r2
 8003e60:	f7fc fc74 	bl	800074c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA5 PA6 
                           PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_6 
 8003e64:	193b      	adds	r3, r7, r4
 8003e66:	22e3      	movs	r2, #227	; 0xe3
 8003e68:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003e6a:	193b      	adds	r3, r7, r4
 8003e6c:	2203      	movs	r2, #3
 8003e6e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e70:	193b      	adds	r3, r7, r4
 8003e72:	2200      	movs	r2, #0
 8003e74:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e76:	193a      	adds	r2, r7, r4
 8003e78:	2390      	movs	r3, #144	; 0x90
 8003e7a:	05db      	lsls	r3, r3, #23
 8003e7c:	0011      	movs	r1, r2
 8003e7e:	0018      	movs	r0, r3
 8003e80:	f7fc fc64 	bl	800074c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003e84:	193b      	adds	r3, r7, r4
 8003e86:	2210      	movs	r2, #16
 8003e88:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003e8a:	193b      	adds	r3, r7, r4
 8003e8c:	4a15      	ldr	r2, [pc, #84]	; (8003ee4 <MX_GPIO_Init+0x108>)
 8003e8e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e90:	193b      	adds	r3, r7, r4
 8003e92:	2200      	movs	r2, #0
 8003e94:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e96:	193a      	adds	r2, r7, r4
 8003e98:	2390      	movs	r3, #144	; 0x90
 8003e9a:	05db      	lsls	r3, r3, #23
 8003e9c:	0011      	movs	r1, r2
 8003e9e:	0018      	movs	r0, r3
 8003ea0:	f7fc fc54 	bl	800074c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003ea4:	193b      	adds	r3, r7, r4
 8003ea6:	2202      	movs	r2, #2
 8003ea8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003eaa:	193b      	adds	r3, r7, r4
 8003eac:	2203      	movs	r2, #3
 8003eae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eb0:	193b      	adds	r3, r7, r4
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003eb6:	193b      	adds	r3, r7, r4
 8003eb8:	4a0b      	ldr	r2, [pc, #44]	; (8003ee8 <MX_GPIO_Init+0x10c>)
 8003eba:	0019      	movs	r1, r3
 8003ebc:	0010      	movs	r0, r2
 8003ebe:	f7fc fc45 	bl	800074c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 2, 0);
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	2102      	movs	r1, #2
 8003ec6:	2007      	movs	r0, #7
 8003ec8:	f7fc fbb8 	bl	800063c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8003ecc:	2007      	movs	r0, #7
 8003ece:	f7fc fbca 	bl	8000666 <HAL_NVIC_EnableIRQ>

}
 8003ed2:	46c0      	nop			; (mov r8, r8)
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	b009      	add	sp, #36	; 0x24
 8003ed8:	bd90      	pop	{r4, r7, pc}
 8003eda:	46c0      	nop			; (mov r8, r8)
 8003edc:	40021000 	.word	0x40021000
 8003ee0:	48001400 	.word	0x48001400
 8003ee4:	10210000 	.word	0x10210000
 8003ee8:	48000400 	.word	0x48000400

08003eec <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	0002      	movs	r2, r0
 8003ef4:	1dbb      	adds	r3, r7, #6
 8003ef6:	801a      	strh	r2, [r3, #0]
	HAL_NVIC_DisableIRQ(EXTI4_15_IRQn);
 8003ef8:	2007      	movs	r0, #7
 8003efa:	f7fc fbc4 	bl	8000686 <HAL_NVIC_DisableIRQ>
//			is_recording = 0;
//		}
//	}


	if(PN532_InListPassiveTarget(PN532_MIFARE_ISO14443A, &tag))
 8003efe:	4b37      	ldr	r3, [pc, #220]	; (8003fdc <HAL_GPIO_EXTI_Callback+0xf0>)
 8003f00:	0019      	movs	r1, r3
 8003f02:	2000      	movs	r0, #0
 8003f04:	f7ff fed6 	bl	8003cb4 <PN532_InListPassiveTarget>
 8003f08:	1e03      	subs	r3, r0, #0
 8003f0a:	d062      	beq.n	8003fd2 <HAL_GPIO_EXTI_Callback+0xe6>
	{
		FN_RM01_Get_FileName(file_num, file_name);
 8003f0c:	4b34      	ldr	r3, [pc, #208]	; (8003fe0 <HAL_GPIO_EXTI_Callback+0xf4>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a34      	ldr	r2, [pc, #208]	; (8003fe4 <HAL_GPIO_EXTI_Callback+0xf8>)
 8003f12:	0011      	movs	r1, r2
 8003f14:	0018      	movs	r0, r3
 8003f16:	f7fe fae1 	bl	80024dc <FN_RM01_Get_FileName>

		NDEF_Record_Create_TextRecord(file_name, sizeof(file_name), &tag.ndefMessage.record[0]);
 8003f1a:	4a33      	ldr	r2, [pc, #204]	; (8003fe8 <HAL_GPIO_EXTI_Callback+0xfc>)
 8003f1c:	4b31      	ldr	r3, [pc, #196]	; (8003fe4 <HAL_GPIO_EXTI_Callback+0xf8>)
 8003f1e:	2104      	movs	r1, #4
 8003f20:	0018      	movs	r0, r3
 8003f22:	f7ff fc9b 	bl	800385c <NDEF_Record_Create_TextRecord>
		tag.ndefMessage.record_Count++;
 8003f26:	4b2d      	ldr	r3, [pc, #180]	; (8003fdc <HAL_GPIO_EXTI_Callback+0xf0>)
 8003f28:	7a5b      	ldrb	r3, [r3, #9]
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	b2da      	uxtb	r2, r3
 8003f2e:	4b2b      	ldr	r3, [pc, #172]	; (8003fdc <HAL_GPIO_EXTI_Callback+0xf0>)
 8003f30:	725a      	strb	r2, [r3, #9]

		if(PN532_Write_Tag(&tag))
 8003f32:	4b2a      	ldr	r3, [pc, #168]	; (8003fdc <HAL_GPIO_EXTI_Callback+0xf0>)
 8003f34:	0018      	movs	r0, r3
 8003f36:	f7ff ff2c 	bl	8003d92 <PN532_Write_Tag>
 8003f3a:	1e03      	subs	r3, r0, #0
 8003f3c:	d046      	beq.n	8003fcc <HAL_GPIO_EXTI_Callback+0xe0>
		{
			FN_RM01_Play_Sound("reco");
 8003f3e:	4b2b      	ldr	r3, [pc, #172]	; (8003fec <HAL_GPIO_EXTI_Callback+0x100>)
 8003f40:	0018      	movs	r0, r3
 8003f42:	f7fe f987 	bl	8002254 <FN_RM01_Play_Sound>
			HAL_Delay(750);
 8003f46:	4b2a      	ldr	r3, [pc, #168]	; (8003ff0 <HAL_GPIO_EXTI_Callback+0x104>)
 8003f48:	0018      	movs	r0, r3
 8003f4a:	f7fc fa99 	bl	8000480 <HAL_Delay>
			FN_RM01_Record_Sound(file_name);
 8003f4e:	4b25      	ldr	r3, [pc, #148]	; (8003fe4 <HAL_GPIO_EXTI_Callback+0xf8>)
 8003f50:	0018      	movs	r0, r3
 8003f52:	f7fe f9e1 	bl	8002318 <FN_RM01_Record_Sound>

			NFC_Clear_Tag(&tag);
 8003f56:	4b21      	ldr	r3, [pc, #132]	; (8003fdc <HAL_GPIO_EXTI_Callback+0xf0>)
 8003f58:	0018      	movs	r0, r3
 8003f5a:	f7ff fcf5 	bl	8003948 <NFC_Clear_Tag>

			while(!HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4));
 8003f5e:	46c0      	nop			; (mov r8, r8)
 8003f60:	2390      	movs	r3, #144	; 0x90
 8003f62:	05db      	lsls	r3, r3, #23
 8003f64:	2110      	movs	r1, #16
 8003f66:	0018      	movs	r0, r3
 8003f68:	f7fc fd64 	bl	8000a34 <HAL_GPIO_ReadPin>
 8003f6c:	1e03      	subs	r3, r0, #0
 8003f6e:	d0f7      	beq.n	8003f60 <HAL_GPIO_EXTI_Callback+0x74>

			FN_RM01_Stop_Record();
 8003f70:	f7fe fa2c 	bl	80023cc <FN_RM01_Stop_Record>

			if(PN532_InListPassiveTarget(PN532_MIFARE_ISO14443A, &tag))
 8003f74:	4b19      	ldr	r3, [pc, #100]	; (8003fdc <HAL_GPIO_EXTI_Callback+0xf0>)
 8003f76:	0019      	movs	r1, r3
 8003f78:	2000      	movs	r0, #0
 8003f7a:	f7ff fe9b 	bl	8003cb4 <PN532_InListPassiveTarget>
 8003f7e:	1e03      	subs	r3, r0, #0
 8003f80:	d020      	beq.n	8003fc4 <HAL_GPIO_EXTI_Callback+0xd8>
			{
				if(PN532_Read_Tag(&tag))
 8003f82:	4b16      	ldr	r3, [pc, #88]	; (8003fdc <HAL_GPIO_EXTI_Callback+0xf0>)
 8003f84:	0018      	movs	r0, r3
 8003f86:	f7ff fedf 	bl	8003d48 <PN532_Read_Tag>
 8003f8a:	1e03      	subs	r3, r0, #0
 8003f8c:	d015      	beq.n	8003fba <HAL_GPIO_EXTI_Callback+0xce>
				{
					if(memcmp(tag.ndefMessage.record[0].payload+3, file_name, 4) == 0)
 8003f8e:	4b19      	ldr	r3, [pc, #100]	; (8003ff4 <HAL_GPIO_EXTI_Callback+0x108>)
 8003f90:	4914      	ldr	r1, [pc, #80]	; (8003fe4 <HAL_GPIO_EXTI_Callback+0xf8>)
 8003f92:	2204      	movs	r2, #4
 8003f94:	0018      	movs	r0, r3
 8003f96:	f000 fba9 	bl	80046ec <memcmp>
 8003f9a:	1e03      	subs	r3, r0, #0
 8003f9c:	d109      	bne.n	8003fb2 <HAL_GPIO_EXTI_Callback+0xc6>
					{
						FN_RM01_Play_Sound("done");
 8003f9e:	4b16      	ldr	r3, [pc, #88]	; (8003ff8 <HAL_GPIO_EXTI_Callback+0x10c>)
 8003fa0:	0018      	movs	r0, r3
 8003fa2:	f7fe f957 	bl	8002254 <FN_RM01_Play_Sound>
						file_num++;
 8003fa6:	4b0e      	ldr	r3, [pc, #56]	; (8003fe0 <HAL_GPIO_EXTI_Callback+0xf4>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	1c5a      	adds	r2, r3, #1
 8003fac:	4b0c      	ldr	r3, [pc, #48]	; (8003fe0 <HAL_GPIO_EXTI_Callback+0xf4>)
 8003fae:	601a      	str	r2, [r3, #0]
 8003fb0:	e003      	b.n	8003fba <HAL_GPIO_EXTI_Callback+0xce>
					}
					else
						FN_RM01_Remove_Sound(file_name);
 8003fb2:	4b0c      	ldr	r3, [pc, #48]	; (8003fe4 <HAL_GPIO_EXTI_Callback+0xf8>)
 8003fb4:	0018      	movs	r0, r3
 8003fb6:	f7fe fa37 	bl	8002428 <FN_RM01_Remove_Sound>
				}
				NFC_Clear_Tag(&tag);
 8003fba:	4b08      	ldr	r3, [pc, #32]	; (8003fdc <HAL_GPIO_EXTI_Callback+0xf0>)
 8003fbc:	0018      	movs	r0, r3
 8003fbe:	f7ff fcc3 	bl	8003948 <NFC_Clear_Tag>
 8003fc2:	e003      	b.n	8003fcc <HAL_GPIO_EXTI_Callback+0xe0>
			}
			else
				FN_RM01_Remove_Sound(file_name);
 8003fc4:	4b07      	ldr	r3, [pc, #28]	; (8003fe4 <HAL_GPIO_EXTI_Callback+0xf8>)
 8003fc6:	0018      	movs	r0, r3
 8003fc8:	f7fe fa2e 	bl	8002428 <FN_RM01_Remove_Sound>
		}
		HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8003fcc:	2007      	movs	r0, #7
 8003fce:	f7fc fb4a 	bl	8000666 <HAL_NVIC_EnableIRQ>
	}
}
 8003fd2:	46c0      	nop			; (mov r8, r8)
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	b002      	add	sp, #8
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	46c0      	nop			; (mov r8, r8)
 8003fdc:	20000034 	.word	0x20000034
 8003fe0:	20000030 	.word	0x20000030
 8003fe4:	20000490 	.word	0x20000490
 8003fe8:	2000003e 	.word	0x2000003e
 8003fec:	08004780 	.word	0x08004780
 8003ff0:	000002ee 	.word	0x000002ee
 8003ff4:	20000055 	.word	0x20000055
 8003ff8:	08004788 	.word	0x08004788

08003ffc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004000:	f7fc f9f8 	bl	80003f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004004:	f000 f86a 	bl	80040dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004008:	f7ff fee8 	bl	8003ddc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800400c:	f000 f976 	bl	80042fc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8004010:	f000 f9a4 	bl	800435c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&huart1,&uart1_rx_temp,1);
 8004014:	4927      	ldr	r1, [pc, #156]	; (80040b4 <main+0xb8>)
 8004016:	4b28      	ldr	r3, [pc, #160]	; (80040b8 <main+0xbc>)
 8004018:	2201      	movs	r2, #1
 800401a:	0018      	movs	r0, r3
 800401c:	f7fd fb84 	bl	8001728 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart2,&uart2_rx_temp,1);
 8004020:	4926      	ldr	r1, [pc, #152]	; (80040bc <main+0xc0>)
 8004022:	4b27      	ldr	r3, [pc, #156]	; (80040c0 <main+0xc4>)
 8004024:	2201      	movs	r2, #1
 8004026:	0018      	movs	r0, r3
 8004028:	f7fd fb7e 	bl	8001728 <HAL_UART_Receive_IT>

	FN_RM01_Get_File_Num(&file_num);
 800402c:	4b25      	ldr	r3, [pc, #148]	; (80040c4 <main+0xc8>)
 800402e:	0018      	movs	r0, r3
 8004030:	f7fe f8d2 	bl	80021d8 <FN_RM01_Get_File_Num>
	HAL_Delay(250);
 8004034:	20fa      	movs	r0, #250	; 0xfa
 8004036:	f7fc fa23 	bl	8000480 <HAL_Delay>
	FN_RM01_Play_Sound("powe");
 800403a:	4b23      	ldr	r3, [pc, #140]	; (80040c8 <main+0xcc>)
 800403c:	0018      	movs	r0, r3
 800403e:	f7fe f909 	bl	8002254 <FN_RM01_Play_Sound>
	HAL_Delay(500);
 8004042:	23fa      	movs	r3, #250	; 0xfa
 8004044:	005b      	lsls	r3, r3, #1
 8004046:	0018      	movs	r0, r3
 8004048:	f7fc fa1a 	bl	8000480 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(300);
 800404c:	2396      	movs	r3, #150	; 0x96
 800404e:	005b      	lsls	r3, r3, #1
 8004050:	0018      	movs	r0, r3
 8004052:	f7fc fa15 	bl	8000480 <HAL_Delay>
		if(!is_recording)
 8004056:	4b1d      	ldr	r3, [pc, #116]	; (80040cc <main+0xd0>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d1f6      	bne.n	800404c <main+0x50>
		{
			HAL_NVIC_DisableIRQ(EXTI4_15_IRQn);
 800405e:	2007      	movs	r0, #7
 8004060:	f7fc fb11 	bl	8000686 <HAL_NVIC_DisableIRQ>
			if(PN532_InListPassiveTarget(PN532_MIFARE_ISO14443A, &tag))
 8004064:	4b1a      	ldr	r3, [pc, #104]	; (80040d0 <main+0xd4>)
 8004066:	0019      	movs	r1, r3
 8004068:	2000      	movs	r0, #0
 800406a:	f7ff fe23 	bl	8003cb4 <PN532_InListPassiveTarget>
 800406e:	1e03      	subs	r3, r0, #0
 8004070:	d01b      	beq.n	80040aa <main+0xae>
			{
				if(PN532_Read_Tag(&tag))
 8004072:	4b17      	ldr	r3, [pc, #92]	; (80040d0 <main+0xd4>)
 8004074:	0018      	movs	r0, r3
 8004076:	f7ff fe67 	bl	8003d48 <PN532_Read_Tag>
 800407a:	1e03      	subs	r3, r0, #0
 800407c:	d00b      	beq.n	8004096 <main+0x9a>
				{
					memcpy(file_name, tag.ndefMessage.record[0].payload+3,4);
 800407e:	4b15      	ldr	r3, [pc, #84]	; (80040d4 <main+0xd8>)
 8004080:	4a15      	ldr	r2, [pc, #84]	; (80040d8 <main+0xdc>)
 8004082:	0010      	movs	r0, r2
 8004084:	0019      	movs	r1, r3
 8004086:	2304      	movs	r3, #4
 8004088:	001a      	movs	r2, r3
 800408a:	f000 fb3e 	bl	800470a <memcpy>
					FN_RM01_Play_Sound(file_name);
 800408e:	4b12      	ldr	r3, [pc, #72]	; (80040d8 <main+0xdc>)
 8004090:	0018      	movs	r0, r3
 8004092:	f7fe f8df 	bl	8002254 <FN_RM01_Play_Sound>
				}
				memset(file_name, 0, 4);
 8004096:	4b10      	ldr	r3, [pc, #64]	; (80040d8 <main+0xdc>)
 8004098:	2204      	movs	r2, #4
 800409a:	2100      	movs	r1, #0
 800409c:	0018      	movs	r0, r3
 800409e:	f000 fb3d 	bl	800471c <memset>
				NFC_Clear_Tag(&tag);
 80040a2:	4b0b      	ldr	r3, [pc, #44]	; (80040d0 <main+0xd4>)
 80040a4:	0018      	movs	r0, r3
 80040a6:	f7ff fc4f 	bl	8003948 <NFC_Clear_Tag>
			}
			HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80040aa:	2007      	movs	r0, #7
 80040ac:	f7fc fadb 	bl	8000666 <HAL_NVIC_EnableIRQ>
	  HAL_Delay(300);
 80040b0:	e7cc      	b.n	800404c <main+0x50>
 80040b2:	46c0      	nop			; (mov r8, r8)
 80040b4:	20000495 	.word	0x20000495
 80040b8:	200004cc 	.word	0x200004cc
 80040bc:	200004ca 	.word	0x200004ca
 80040c0:	20000570 	.word	0x20000570
 80040c4:	20000030 	.word	0x20000030
 80040c8:	08004790 	.word	0x08004790
 80040cc:	20000020 	.word	0x20000020
 80040d0:	20000034 	.word	0x20000034
 80040d4:	20000055 	.word	0x20000055
 80040d8:	20000490 	.word	0x20000490

080040dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80040dc:	b590      	push	{r4, r7, lr}
 80040de:	b097      	sub	sp, #92	; 0x5c
 80040e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80040e2:	2428      	movs	r4, #40	; 0x28
 80040e4:	193b      	adds	r3, r7, r4
 80040e6:	0018      	movs	r0, r3
 80040e8:	2330      	movs	r3, #48	; 0x30
 80040ea:	001a      	movs	r2, r3
 80040ec:	2100      	movs	r1, #0
 80040ee:	f000 fb15 	bl	800471c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80040f2:	2318      	movs	r3, #24
 80040f4:	18fb      	adds	r3, r7, r3
 80040f6:	0018      	movs	r0, r3
 80040f8:	2310      	movs	r3, #16
 80040fa:	001a      	movs	r2, r3
 80040fc:	2100      	movs	r1, #0
 80040fe:	f000 fb0d 	bl	800471c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004102:	1d3b      	adds	r3, r7, #4
 8004104:	0018      	movs	r0, r3
 8004106:	2314      	movs	r3, #20
 8004108:	001a      	movs	r2, r3
 800410a:	2100      	movs	r1, #0
 800410c:	f000 fb06 	bl	800471c <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004110:	0021      	movs	r1, r4
 8004112:	187b      	adds	r3, r7, r1
 8004114:	2202      	movs	r2, #2
 8004116:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004118:	187b      	adds	r3, r7, r1
 800411a:	2201      	movs	r2, #1
 800411c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800411e:	187b      	adds	r3, r7, r1
 8004120:	2210      	movs	r2, #16
 8004122:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004124:	187b      	adds	r3, r7, r1
 8004126:	2202      	movs	r2, #2
 8004128:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800412a:	187b      	adds	r3, r7, r1
 800412c:	2280      	movs	r2, #128	; 0x80
 800412e:	0212      	lsls	r2, r2, #8
 8004130:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8004132:	187b      	adds	r3, r7, r1
 8004134:	2280      	movs	r2, #128	; 0x80
 8004136:	0352      	lsls	r2, r2, #13
 8004138:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800413a:	187b      	adds	r3, r7, r1
 800413c:	2200      	movs	r2, #0
 800413e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004140:	187b      	adds	r3, r7, r1
 8004142:	0018      	movs	r0, r3
 8004144:	f7fc fcb0 	bl	8000aa8 <HAL_RCC_OscConfig>
 8004148:	1e03      	subs	r3, r0, #0
 800414a:	d001      	beq.n	8004150 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800414c:	f000 f828 	bl	80041a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004150:	2118      	movs	r1, #24
 8004152:	187b      	adds	r3, r7, r1
 8004154:	2207      	movs	r2, #7
 8004156:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004158:	187b      	adds	r3, r7, r1
 800415a:	2202      	movs	r2, #2
 800415c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800415e:	187b      	adds	r3, r7, r1
 8004160:	2200      	movs	r2, #0
 8004162:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004164:	187b      	adds	r3, r7, r1
 8004166:	2200      	movs	r2, #0
 8004168:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800416a:	187b      	adds	r3, r7, r1
 800416c:	2101      	movs	r1, #1
 800416e:	0018      	movs	r0, r3
 8004170:	f7fc ff92 	bl	8001098 <HAL_RCC_ClockConfig>
 8004174:	1e03      	subs	r3, r0, #0
 8004176:	d001      	beq.n	800417c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8004178:	f000 f812 	bl	80041a0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800417c:	1d3b      	adds	r3, r7, #4
 800417e:	2201      	movs	r2, #1
 8004180:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8004182:	1d3b      	adds	r3, r7, #4
 8004184:	2200      	movs	r2, #0
 8004186:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004188:	1d3b      	adds	r3, r7, #4
 800418a:	0018      	movs	r0, r3
 800418c:	f7fd f8f2 	bl	8001374 <HAL_RCCEx_PeriphCLKConfig>
 8004190:	1e03      	subs	r3, r0, #0
 8004192:	d001      	beq.n	8004198 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8004194:	f000 f804 	bl	80041a0 <Error_Handler>
  }
}
 8004198:	46c0      	nop			; (mov r8, r8)
 800419a:	46bd      	mov	sp, r7
 800419c:	b017      	add	sp, #92	; 0x5c
 800419e:	bd90      	pop	{r4, r7, pc}

080041a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80041a4:	46c0      	nop			; (mov r8, r8)
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
	...

080041ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b082      	sub	sp, #8
 80041b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041b2:	4b0f      	ldr	r3, [pc, #60]	; (80041f0 <HAL_MspInit+0x44>)
 80041b4:	699a      	ldr	r2, [r3, #24]
 80041b6:	4b0e      	ldr	r3, [pc, #56]	; (80041f0 <HAL_MspInit+0x44>)
 80041b8:	2101      	movs	r1, #1
 80041ba:	430a      	orrs	r2, r1
 80041bc:	619a      	str	r2, [r3, #24]
 80041be:	4b0c      	ldr	r3, [pc, #48]	; (80041f0 <HAL_MspInit+0x44>)
 80041c0:	699b      	ldr	r3, [r3, #24]
 80041c2:	2201      	movs	r2, #1
 80041c4:	4013      	ands	r3, r2
 80041c6:	607b      	str	r3, [r7, #4]
 80041c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80041ca:	4b09      	ldr	r3, [pc, #36]	; (80041f0 <HAL_MspInit+0x44>)
 80041cc:	69da      	ldr	r2, [r3, #28]
 80041ce:	4b08      	ldr	r3, [pc, #32]	; (80041f0 <HAL_MspInit+0x44>)
 80041d0:	2180      	movs	r1, #128	; 0x80
 80041d2:	0549      	lsls	r1, r1, #21
 80041d4:	430a      	orrs	r2, r1
 80041d6:	61da      	str	r2, [r3, #28]
 80041d8:	4b05      	ldr	r3, [pc, #20]	; (80041f0 <HAL_MspInit+0x44>)
 80041da:	69da      	ldr	r2, [r3, #28]
 80041dc:	2380      	movs	r3, #128	; 0x80
 80041de:	055b      	lsls	r3, r3, #21
 80041e0:	4013      	ands	r3, r2
 80041e2:	603b      	str	r3, [r7, #0]
 80041e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80041e6:	46c0      	nop			; (mov r8, r8)
 80041e8:	46bd      	mov	sp, r7
 80041ea:	b002      	add	sp, #8
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	46c0      	nop			; (mov r8, r8)
 80041f0:	40021000 	.word	0x40021000

080041f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80041f8:	46c0      	nop			; (mov r8, r8)
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}

080041fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80041fe:	b580      	push	{r7, lr}
 8004200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004202:	e7fe      	b.n	8004202 <HardFault_Handler+0x4>

08004204 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004208:	46c0      	nop			; (mov r8, r8)
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}

0800420e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800420e:	b580      	push	{r7, lr}
 8004210:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004212:	46c0      	nop			; (mov r8, r8)
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}

08004218 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800421c:	f7fc f91a 	bl	8000454 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004220:	46c0      	nop			; (mov r8, r8)
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}

08004226 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8004226:	b580      	push	{r7, lr}
 8004228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800422a:	2010      	movs	r0, #16
 800422c:	f7fc fc20 	bl	8000a70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8004230:	46c0      	nop			; (mov r8, r8)
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
	...

08004238 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800423c:	4b03      	ldr	r3, [pc, #12]	; (800424c <USART1_IRQHandler+0x14>)
 800423e:	0018      	movs	r0, r3
 8004240:	f7fd fb10 	bl	8001864 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004244:	46c0      	nop			; (mov r8, r8)
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	46c0      	nop			; (mov r8, r8)
 800424c:	200004cc 	.word	0x200004cc

08004250 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004254:	4b03      	ldr	r3, [pc, #12]	; (8004264 <USART2_IRQHandler+0x14>)
 8004256:	0018      	movs	r0, r3
 8004258:	f7fd fb04 	bl	8001864 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800425c:	46c0      	nop			; (mov r8, r8)
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	46c0      	nop			; (mov r8, r8)
 8004264:	20000570 	.word	0x20000570

08004268 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 800426c:	4b1d      	ldr	r3, [pc, #116]	; (80042e4 <SystemInit+0x7c>)
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	4b1c      	ldr	r3, [pc, #112]	; (80042e4 <SystemInit+0x7c>)
 8004272:	2101      	movs	r1, #1
 8004274:	430a      	orrs	r2, r1
 8004276:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8004278:	4b1a      	ldr	r3, [pc, #104]	; (80042e4 <SystemInit+0x7c>)
 800427a:	685a      	ldr	r2, [r3, #4]
 800427c:	4b19      	ldr	r3, [pc, #100]	; (80042e4 <SystemInit+0x7c>)
 800427e:	491a      	ldr	r1, [pc, #104]	; (80042e8 <SystemInit+0x80>)
 8004280:	400a      	ands	r2, r1
 8004282:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8004284:	4b17      	ldr	r3, [pc, #92]	; (80042e4 <SystemInit+0x7c>)
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	4b16      	ldr	r3, [pc, #88]	; (80042e4 <SystemInit+0x7c>)
 800428a:	4918      	ldr	r1, [pc, #96]	; (80042ec <SystemInit+0x84>)
 800428c:	400a      	ands	r2, r1
 800428e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8004290:	4b14      	ldr	r3, [pc, #80]	; (80042e4 <SystemInit+0x7c>)
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	4b13      	ldr	r3, [pc, #76]	; (80042e4 <SystemInit+0x7c>)
 8004296:	4916      	ldr	r1, [pc, #88]	; (80042f0 <SystemInit+0x88>)
 8004298:	400a      	ands	r2, r1
 800429a:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 800429c:	4b11      	ldr	r3, [pc, #68]	; (80042e4 <SystemInit+0x7c>)
 800429e:	685a      	ldr	r2, [r3, #4]
 80042a0:	4b10      	ldr	r3, [pc, #64]	; (80042e4 <SystemInit+0x7c>)
 80042a2:	4914      	ldr	r1, [pc, #80]	; (80042f4 <SystemInit+0x8c>)
 80042a4:	400a      	ands	r2, r1
 80042a6:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 80042a8:	4b0e      	ldr	r3, [pc, #56]	; (80042e4 <SystemInit+0x7c>)
 80042aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042ac:	4b0d      	ldr	r3, [pc, #52]	; (80042e4 <SystemInit+0x7c>)
 80042ae:	210f      	movs	r1, #15
 80042b0:	438a      	bics	r2, r1
 80042b2:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F042x6) || defined (STM32F048xx)
  /* Reset USART1SW[1:0], I2C1SW, CECSW, USBSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFE2CU;
#elif defined (STM32F070x6) || defined (STM32F070xB)
  /* Reset USART1SW[1:0], I2C1SW, USBSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFE6CU;
 80042b4:	4b0b      	ldr	r3, [pc, #44]	; (80042e4 <SystemInit+0x7c>)
 80042b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042b8:	4b0a      	ldr	r3, [pc, #40]	; (80042e4 <SystemInit+0x7c>)
 80042ba:	490f      	ldr	r1, [pc, #60]	; (80042f8 <SystemInit+0x90>)
 80042bc:	400a      	ands	r2, r1
 80042be:	631a      	str	r2, [r3, #48]	; 0x30
  /* Set default USB clock to PLLCLK, since there is no HSI48 */
  RCC->CFGR3 |= (uint32_t)0x00000080U;  
 80042c0:	4b08      	ldr	r3, [pc, #32]	; (80042e4 <SystemInit+0x7c>)
 80042c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042c4:	4b07      	ldr	r3, [pc, #28]	; (80042e4 <SystemInit+0x7c>)
 80042c6:	2180      	movs	r1, #128	; 0x80
 80042c8:	430a      	orrs	r2, r1
 80042ca:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 80042cc:	4b05      	ldr	r3, [pc, #20]	; (80042e4 <SystemInit+0x7c>)
 80042ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042d0:	4b04      	ldr	r3, [pc, #16]	; (80042e4 <SystemInit+0x7c>)
 80042d2:	2101      	movs	r1, #1
 80042d4:	438a      	bics	r2, r1
 80042d6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80042d8:	4b02      	ldr	r3, [pc, #8]	; (80042e4 <SystemInit+0x7c>)
 80042da:	2200      	movs	r2, #0
 80042dc:	609a      	str	r2, [r3, #8]

}
 80042de:	46c0      	nop			; (mov r8, r8)
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	40021000 	.word	0x40021000
 80042e8:	08ffb80c 	.word	0x08ffb80c
 80042ec:	fef6ffff 	.word	0xfef6ffff
 80042f0:	fffbffff 	.word	0xfffbffff
 80042f4:	ffc0ffff 	.word	0xffc0ffff
 80042f8:	fffffe6c 	.word	0xfffffe6c

080042fc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8004300:	4b14      	ldr	r3, [pc, #80]	; (8004354 <MX_USART1_UART_Init+0x58>)
 8004302:	4a15      	ldr	r2, [pc, #84]	; (8004358 <MX_USART1_UART_Init+0x5c>)
 8004304:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004306:	4b13      	ldr	r3, [pc, #76]	; (8004354 <MX_USART1_UART_Init+0x58>)
 8004308:	22e1      	movs	r2, #225	; 0xe1
 800430a:	0252      	lsls	r2, r2, #9
 800430c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800430e:	4b11      	ldr	r3, [pc, #68]	; (8004354 <MX_USART1_UART_Init+0x58>)
 8004310:	2200      	movs	r2, #0
 8004312:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004314:	4b0f      	ldr	r3, [pc, #60]	; (8004354 <MX_USART1_UART_Init+0x58>)
 8004316:	2200      	movs	r2, #0
 8004318:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800431a:	4b0e      	ldr	r3, [pc, #56]	; (8004354 <MX_USART1_UART_Init+0x58>)
 800431c:	2200      	movs	r2, #0
 800431e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004320:	4b0c      	ldr	r3, [pc, #48]	; (8004354 <MX_USART1_UART_Init+0x58>)
 8004322:	220c      	movs	r2, #12
 8004324:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004326:	4b0b      	ldr	r3, [pc, #44]	; (8004354 <MX_USART1_UART_Init+0x58>)
 8004328:	2200      	movs	r2, #0
 800432a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800432c:	4b09      	ldr	r3, [pc, #36]	; (8004354 <MX_USART1_UART_Init+0x58>)
 800432e:	2200      	movs	r2, #0
 8004330:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004332:	4b08      	ldr	r3, [pc, #32]	; (8004354 <MX_USART1_UART_Init+0x58>)
 8004334:	2200      	movs	r2, #0
 8004336:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004338:	4b06      	ldr	r3, [pc, #24]	; (8004354 <MX_USART1_UART_Init+0x58>)
 800433a:	2200      	movs	r2, #0
 800433c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800433e:	4b05      	ldr	r3, [pc, #20]	; (8004354 <MX_USART1_UART_Init+0x58>)
 8004340:	0018      	movs	r0, r3
 8004342:	f7fd f8f5 	bl	8001530 <HAL_UART_Init>
 8004346:	1e03      	subs	r3, r0, #0
 8004348:	d001      	beq.n	800434e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800434a:	f7ff ff29 	bl	80041a0 <Error_Handler>
  }

}
 800434e:	46c0      	nop			; (mov r8, r8)
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}
 8004354:	200004cc 	.word	0x200004cc
 8004358:	40013800 	.word	0x40013800

0800435c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8004360:	4b14      	ldr	r3, [pc, #80]	; (80043b4 <MX_USART2_UART_Init+0x58>)
 8004362:	4a15      	ldr	r2, [pc, #84]	; (80043b8 <MX_USART2_UART_Init+0x5c>)
 8004364:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8004366:	4b13      	ldr	r3, [pc, #76]	; (80043b4 <MX_USART2_UART_Init+0x58>)
 8004368:	2296      	movs	r2, #150	; 0x96
 800436a:	0192      	lsls	r2, r2, #6
 800436c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800436e:	4b11      	ldr	r3, [pc, #68]	; (80043b4 <MX_USART2_UART_Init+0x58>)
 8004370:	2200      	movs	r2, #0
 8004372:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004374:	4b0f      	ldr	r3, [pc, #60]	; (80043b4 <MX_USART2_UART_Init+0x58>)
 8004376:	2200      	movs	r2, #0
 8004378:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800437a:	4b0e      	ldr	r3, [pc, #56]	; (80043b4 <MX_USART2_UART_Init+0x58>)
 800437c:	2200      	movs	r2, #0
 800437e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004380:	4b0c      	ldr	r3, [pc, #48]	; (80043b4 <MX_USART2_UART_Init+0x58>)
 8004382:	220c      	movs	r2, #12
 8004384:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004386:	4b0b      	ldr	r3, [pc, #44]	; (80043b4 <MX_USART2_UART_Init+0x58>)
 8004388:	2200      	movs	r2, #0
 800438a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800438c:	4b09      	ldr	r3, [pc, #36]	; (80043b4 <MX_USART2_UART_Init+0x58>)
 800438e:	2200      	movs	r2, #0
 8004390:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004392:	4b08      	ldr	r3, [pc, #32]	; (80043b4 <MX_USART2_UART_Init+0x58>)
 8004394:	2200      	movs	r2, #0
 8004396:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004398:	4b06      	ldr	r3, [pc, #24]	; (80043b4 <MX_USART2_UART_Init+0x58>)
 800439a:	2200      	movs	r2, #0
 800439c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800439e:	4b05      	ldr	r3, [pc, #20]	; (80043b4 <MX_USART2_UART_Init+0x58>)
 80043a0:	0018      	movs	r0, r3
 80043a2:	f7fd f8c5 	bl	8001530 <HAL_UART_Init>
 80043a6:	1e03      	subs	r3, r0, #0
 80043a8:	d001      	beq.n	80043ae <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80043aa:	f7ff fef9 	bl	80041a0 <Error_Handler>
  }

}
 80043ae:	46c0      	nop			; (mov r8, r8)
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	20000570 	.word	0x20000570
 80043b8:	40004400 	.word	0x40004400

080043bc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b08c      	sub	sp, #48	; 0x30
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043c4:	231c      	movs	r3, #28
 80043c6:	18fb      	adds	r3, r7, r3
 80043c8:	0018      	movs	r0, r3
 80043ca:	2314      	movs	r3, #20
 80043cc:	001a      	movs	r2, r3
 80043ce:	2100      	movs	r1, #0
 80043d0:	f000 f9a4 	bl	800471c <memset>
  if(uartHandle->Instance==USART1)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a41      	ldr	r2, [pc, #260]	; (80044e0 <HAL_UART_MspInit+0x124>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d13c      	bne.n	8004458 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80043de:	4b41      	ldr	r3, [pc, #260]	; (80044e4 <HAL_UART_MspInit+0x128>)
 80043e0:	699a      	ldr	r2, [r3, #24]
 80043e2:	4b40      	ldr	r3, [pc, #256]	; (80044e4 <HAL_UART_MspInit+0x128>)
 80043e4:	2180      	movs	r1, #128	; 0x80
 80043e6:	01c9      	lsls	r1, r1, #7
 80043e8:	430a      	orrs	r2, r1
 80043ea:	619a      	str	r2, [r3, #24]
 80043ec:	4b3d      	ldr	r3, [pc, #244]	; (80044e4 <HAL_UART_MspInit+0x128>)
 80043ee:	699a      	ldr	r2, [r3, #24]
 80043f0:	2380      	movs	r3, #128	; 0x80
 80043f2:	01db      	lsls	r3, r3, #7
 80043f4:	4013      	ands	r3, r2
 80043f6:	61bb      	str	r3, [r7, #24]
 80043f8:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043fa:	4b3a      	ldr	r3, [pc, #232]	; (80044e4 <HAL_UART_MspInit+0x128>)
 80043fc:	695a      	ldr	r2, [r3, #20]
 80043fe:	4b39      	ldr	r3, [pc, #228]	; (80044e4 <HAL_UART_MspInit+0x128>)
 8004400:	2180      	movs	r1, #128	; 0x80
 8004402:	0289      	lsls	r1, r1, #10
 8004404:	430a      	orrs	r2, r1
 8004406:	615a      	str	r2, [r3, #20]
 8004408:	4b36      	ldr	r3, [pc, #216]	; (80044e4 <HAL_UART_MspInit+0x128>)
 800440a:	695a      	ldr	r2, [r3, #20]
 800440c:	2380      	movs	r3, #128	; 0x80
 800440e:	029b      	lsls	r3, r3, #10
 8004410:	4013      	ands	r3, r2
 8004412:	617b      	str	r3, [r7, #20]
 8004414:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004416:	211c      	movs	r1, #28
 8004418:	187b      	adds	r3, r7, r1
 800441a:	22c0      	movs	r2, #192	; 0xc0
 800441c:	00d2      	lsls	r2, r2, #3
 800441e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004420:	187b      	adds	r3, r7, r1
 8004422:	2202      	movs	r2, #2
 8004424:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004426:	187b      	adds	r3, r7, r1
 8004428:	2200      	movs	r2, #0
 800442a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800442c:	187b      	adds	r3, r7, r1
 800442e:	2203      	movs	r2, #3
 8004430:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8004432:	187b      	adds	r3, r7, r1
 8004434:	2201      	movs	r2, #1
 8004436:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004438:	187a      	adds	r2, r7, r1
 800443a:	2390      	movs	r3, #144	; 0x90
 800443c:	05db      	lsls	r3, r3, #23
 800443e:	0011      	movs	r1, r2
 8004440:	0018      	movs	r0, r3
 8004442:	f7fc f983 	bl	800074c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004446:	2200      	movs	r2, #0
 8004448:	2100      	movs	r1, #0
 800444a:	201b      	movs	r0, #27
 800444c:	f7fc f8f6 	bl	800063c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004450:	201b      	movs	r0, #27
 8004452:	f7fc f908 	bl	8000666 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004456:	e03f      	b.n	80044d8 <HAL_UART_MspInit+0x11c>
  else if(uartHandle->Instance==USART2)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a22      	ldr	r2, [pc, #136]	; (80044e8 <HAL_UART_MspInit+0x12c>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d13a      	bne.n	80044d8 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004462:	4b20      	ldr	r3, [pc, #128]	; (80044e4 <HAL_UART_MspInit+0x128>)
 8004464:	69da      	ldr	r2, [r3, #28]
 8004466:	4b1f      	ldr	r3, [pc, #124]	; (80044e4 <HAL_UART_MspInit+0x128>)
 8004468:	2180      	movs	r1, #128	; 0x80
 800446a:	0289      	lsls	r1, r1, #10
 800446c:	430a      	orrs	r2, r1
 800446e:	61da      	str	r2, [r3, #28]
 8004470:	4b1c      	ldr	r3, [pc, #112]	; (80044e4 <HAL_UART_MspInit+0x128>)
 8004472:	69da      	ldr	r2, [r3, #28]
 8004474:	2380      	movs	r3, #128	; 0x80
 8004476:	029b      	lsls	r3, r3, #10
 8004478:	4013      	ands	r3, r2
 800447a:	613b      	str	r3, [r7, #16]
 800447c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800447e:	4b19      	ldr	r3, [pc, #100]	; (80044e4 <HAL_UART_MspInit+0x128>)
 8004480:	695a      	ldr	r2, [r3, #20]
 8004482:	4b18      	ldr	r3, [pc, #96]	; (80044e4 <HAL_UART_MspInit+0x128>)
 8004484:	2180      	movs	r1, #128	; 0x80
 8004486:	0289      	lsls	r1, r1, #10
 8004488:	430a      	orrs	r2, r1
 800448a:	615a      	str	r2, [r3, #20]
 800448c:	4b15      	ldr	r3, [pc, #84]	; (80044e4 <HAL_UART_MspInit+0x128>)
 800448e:	695a      	ldr	r2, [r3, #20]
 8004490:	2380      	movs	r3, #128	; 0x80
 8004492:	029b      	lsls	r3, r3, #10
 8004494:	4013      	ands	r3, r2
 8004496:	60fb      	str	r3, [r7, #12]
 8004498:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800449a:	211c      	movs	r1, #28
 800449c:	187b      	adds	r3, r7, r1
 800449e:	220c      	movs	r2, #12
 80044a0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044a2:	187b      	adds	r3, r7, r1
 80044a4:	2202      	movs	r2, #2
 80044a6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044a8:	187b      	adds	r3, r7, r1
 80044aa:	2200      	movs	r2, #0
 80044ac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80044ae:	187b      	adds	r3, r7, r1
 80044b0:	2203      	movs	r2, #3
 80044b2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80044b4:	187b      	adds	r3, r7, r1
 80044b6:	2201      	movs	r2, #1
 80044b8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044ba:	187a      	adds	r2, r7, r1
 80044bc:	2390      	movs	r3, #144	; 0x90
 80044be:	05db      	lsls	r3, r3, #23
 80044c0:	0011      	movs	r1, r2
 80044c2:	0018      	movs	r0, r3
 80044c4:	f7fc f942 	bl	800074c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 80044c8:	2200      	movs	r2, #0
 80044ca:	2101      	movs	r1, #1
 80044cc:	201c      	movs	r0, #28
 80044ce:	f7fc f8b5 	bl	800063c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80044d2:	201c      	movs	r0, #28
 80044d4:	f7fc f8c7 	bl	8000666 <HAL_NVIC_EnableIRQ>
}
 80044d8:	46c0      	nop			; (mov r8, r8)
 80044da:	46bd      	mov	sp, r7
 80044dc:	b00c      	add	sp, #48	; 0x30
 80044de:	bd80      	pop	{r7, pc}
 80044e0:	40013800 	.word	0x40013800
 80044e4:	40021000 	.word	0x40021000
 80044e8:	40004400 	.word	0x40004400

080044ec <HAL_UART_RxCpltCallback>:
  }
} 

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  if(UartHandle->Instance == USART1)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a16      	ldr	r2, [pc, #88]	; (8004554 <HAL_UART_RxCpltCallback+0x68>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d110      	bne.n	8004520 <HAL_UART_RxCpltCallback+0x34>
	{
		uart1_rx_data[uart1_rx_len++] = uart1_rx_temp;
 80044fe:	4b16      	ldr	r3, [pc, #88]	; (8004558 <HAL_UART_RxCpltCallback+0x6c>)
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	1c5a      	adds	r2, r3, #1
 8004504:	b2d1      	uxtb	r1, r2
 8004506:	4a14      	ldr	r2, [pc, #80]	; (8004558 <HAL_UART_RxCpltCallback+0x6c>)
 8004508:	7011      	strb	r1, [r2, #0]
 800450a:	001a      	movs	r2, r3
 800450c:	4b13      	ldr	r3, [pc, #76]	; (800455c <HAL_UART_RxCpltCallback+0x70>)
 800450e:	7819      	ldrb	r1, [r3, #0]
 8004510:	4b13      	ldr	r3, [pc, #76]	; (8004560 <HAL_UART_RxCpltCallback+0x74>)
 8004512:	5499      	strb	r1, [r3, r2]
		HAL_UART_Receive_IT(&huart1,&uart1_rx_temp,1);
 8004514:	4911      	ldr	r1, [pc, #68]	; (800455c <HAL_UART_RxCpltCallback+0x70>)
 8004516:	4b13      	ldr	r3, [pc, #76]	; (8004564 <HAL_UART_RxCpltCallback+0x78>)
 8004518:	2201      	movs	r2, #1
 800451a:	0018      	movs	r0, r3
 800451c:	f7fd f904 	bl	8001728 <HAL_UART_Receive_IT>
	}

	if(UartHandle->Instance == USART2)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a10      	ldr	r2, [pc, #64]	; (8004568 <HAL_UART_RxCpltCallback+0x7c>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d110      	bne.n	800454c <HAL_UART_RxCpltCallback+0x60>
	{
		uart2_rx_data[uart2_rx_len++] = uart2_rx_temp;
 800452a:	4b10      	ldr	r3, [pc, #64]	; (800456c <HAL_UART_RxCpltCallback+0x80>)
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	1c5a      	adds	r2, r3, #1
 8004530:	b2d1      	uxtb	r1, r2
 8004532:	4a0e      	ldr	r2, [pc, #56]	; (800456c <HAL_UART_RxCpltCallback+0x80>)
 8004534:	7011      	strb	r1, [r2, #0]
 8004536:	001a      	movs	r2, r3
 8004538:	4b0d      	ldr	r3, [pc, #52]	; (8004570 <HAL_UART_RxCpltCallback+0x84>)
 800453a:	7819      	ldrb	r1, [r3, #0]
 800453c:	4b0d      	ldr	r3, [pc, #52]	; (8004574 <HAL_UART_RxCpltCallback+0x88>)
 800453e:	5499      	strb	r1, [r3, r2]
		HAL_UART_Receive_IT(&huart2,&uart2_rx_temp,1);
 8004540:	490b      	ldr	r1, [pc, #44]	; (8004570 <HAL_UART_RxCpltCallback+0x84>)
 8004542:	4b0d      	ldr	r3, [pc, #52]	; (8004578 <HAL_UART_RxCpltCallback+0x8c>)
 8004544:	2201      	movs	r2, #1
 8004546:	0018      	movs	r0, r3
 8004548:	f7fd f8ee 	bl	8001728 <HAL_UART_Receive_IT>
	}
}
 800454c:	46c0      	nop			; (mov r8, r8)
 800454e:	46bd      	mov	sp, r7
 8004550:	b002      	add	sp, #8
 8004552:	bd80      	pop	{r7, pc}
 8004554:	40013800 	.word	0x40013800
 8004558:	200005e0 	.word	0x200005e0
 800455c:	20000495 	.word	0x20000495
 8004560:	2000053c 	.word	0x2000053c
 8004564:	200004cc 	.word	0x200004cc
 8004568:	40004400 	.word	0x40004400
 800456c:	20000494 	.word	0x20000494
 8004570:	200004ca 	.word	0x200004ca
 8004574:	20000498 	.word	0x20000498
 8004578:	20000570 	.word	0x20000570

0800457c <get_rx_data_len>:

void get_rx_data_len(uint8_t *len)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b082      	sub	sp, #8
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
	*len = uart1_rx_len;
 8004584:	4b03      	ldr	r3, [pc, #12]	; (8004594 <get_rx_data_len+0x18>)
 8004586:	781a      	ldrb	r2, [r3, #0]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	701a      	strb	r2, [r3, #0]
}
 800458c:	46c0      	nop			; (mov r8, r8)
 800458e:	46bd      	mov	sp, r7
 8004590:	b002      	add	sp, #8
 8004592:	bd80      	pop	{r7, pc}
 8004594:	200005e0 	.word	0x200005e0

08004598 <clean_uart1_rx_data>:

void clean_uart1_rx_data(void)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b082      	sub	sp, #8
 800459c:	af00      	add	r7, sp, #0
  uint8_t i = uart1_rx_len;
 800459e:	1dfb      	adds	r3, r7, #7
 80045a0:	4a0c      	ldr	r2, [pc, #48]	; (80045d4 <clean_uart1_rx_data+0x3c>)
 80045a2:	7812      	ldrb	r2, [r2, #0]
 80045a4:	701a      	strb	r2, [r3, #0]
  uart1_rx_len = 0;
 80045a6:	4b0b      	ldr	r3, [pc, #44]	; (80045d4 <clean_uart1_rx_data+0x3c>)
 80045a8:	2200      	movs	r2, #0
 80045aa:	701a      	strb	r2, [r3, #0]

	while(i)
 80045ac:	e009      	b.n	80045c2 <clean_uart1_rx_data+0x2a>
		uart1_rx_data[--i]=0;
 80045ae:	1dfb      	adds	r3, r7, #7
 80045b0:	1dfa      	adds	r2, r7, #7
 80045b2:	7812      	ldrb	r2, [r2, #0]
 80045b4:	3a01      	subs	r2, #1
 80045b6:	701a      	strb	r2, [r3, #0]
 80045b8:	1dfb      	adds	r3, r7, #7
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	4a06      	ldr	r2, [pc, #24]	; (80045d8 <clean_uart1_rx_data+0x40>)
 80045be:	2100      	movs	r1, #0
 80045c0:	54d1      	strb	r1, [r2, r3]
	while(i)
 80045c2:	1dfb      	adds	r3, r7, #7
 80045c4:	781b      	ldrb	r3, [r3, #0]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d1f1      	bne.n	80045ae <clean_uart1_rx_data+0x16>
}
 80045ca:	46c0      	nop			; (mov r8, r8)
 80045cc:	46bd      	mov	sp, r7
 80045ce:	b002      	add	sp, #8
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	46c0      	nop			; (mov r8, r8)
 80045d4:	200005e0 	.word	0x200005e0
 80045d8:	2000053c 	.word	0x2000053c

080045dc <clean_uart2_rx_data>:

void clean_uart2_rx_data(void)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b082      	sub	sp, #8
 80045e0:	af00      	add	r7, sp, #0
  uint8_t i = uart2_rx_len;
 80045e2:	1dfb      	adds	r3, r7, #7
 80045e4:	4a0c      	ldr	r2, [pc, #48]	; (8004618 <clean_uart2_rx_data+0x3c>)
 80045e6:	7812      	ldrb	r2, [r2, #0]
 80045e8:	701a      	strb	r2, [r3, #0]
  uart2_rx_len = 0;
 80045ea:	4b0b      	ldr	r3, [pc, #44]	; (8004618 <clean_uart2_rx_data+0x3c>)
 80045ec:	2200      	movs	r2, #0
 80045ee:	701a      	strb	r2, [r3, #0]

	while(i)
 80045f0:	e009      	b.n	8004606 <clean_uart2_rx_data+0x2a>
		uart2_rx_data[--i]=0;
 80045f2:	1dfb      	adds	r3, r7, #7
 80045f4:	1dfa      	adds	r2, r7, #7
 80045f6:	7812      	ldrb	r2, [r2, #0]
 80045f8:	3a01      	subs	r2, #1
 80045fa:	701a      	strb	r2, [r3, #0]
 80045fc:	1dfb      	adds	r3, r7, #7
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	4a06      	ldr	r2, [pc, #24]	; (800461c <clean_uart2_rx_data+0x40>)
 8004602:	2100      	movs	r1, #0
 8004604:	54d1      	strb	r1, [r2, r3]
	while(i)
 8004606:	1dfb      	adds	r3, r7, #7
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d1f1      	bne.n	80045f2 <clean_uart2_rx_data+0x16>
}
 800460e:	46c0      	nop			; (mov r8, r8)
 8004610:	46bd      	mov	sp, r7
 8004612:	b002      	add	sp, #8
 8004614:	bd80      	pop	{r7, pc}
 8004616:	46c0      	nop			; (mov r8, r8)
 8004618:	20000494 	.word	0x20000494
 800461c:	20000498 	.word	0x20000498

08004620 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004620:	4813      	ldr	r0, [pc, #76]	; (8004670 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004622:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8004624:	4813      	ldr	r0, [pc, #76]	; (8004674 <LoopForever+0x6>)
    LDR R1, [R0]
 8004626:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8004628:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 800462a:	4a13      	ldr	r2, [pc, #76]	; (8004678 <LoopForever+0xa>)
    CMP R1, R2
 800462c:	4291      	cmp	r1, r2
    BNE ApplicationStart
 800462e:	d105      	bne.n	800463c <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8004630:	4812      	ldr	r0, [pc, #72]	; (800467c <LoopForever+0xe>)
    LDR R1,=0x00000001
 8004632:	4913      	ldr	r1, [pc, #76]	; (8004680 <LoopForever+0x12>)
    STR R1, [R0]
 8004634:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8004636:	4813      	ldr	r0, [pc, #76]	; (8004684 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8004638:	4913      	ldr	r1, [pc, #76]	; (8004688 <LoopForever+0x1a>)
    STR R1, [R0]
 800463a:	6001      	str	r1, [r0, #0]

0800463c <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800463c:	4813      	ldr	r0, [pc, #76]	; (800468c <LoopForever+0x1e>)
  ldr r1, =_edata
 800463e:	4914      	ldr	r1, [pc, #80]	; (8004690 <LoopForever+0x22>)
  ldr r2, =_sidata
 8004640:	4a14      	ldr	r2, [pc, #80]	; (8004694 <LoopForever+0x26>)
  movs r3, #0
 8004642:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004644:	e002      	b.n	800464c <LoopCopyDataInit>

08004646 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004646:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004648:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800464a:	3304      	adds	r3, #4

0800464c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800464c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800464e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004650:	d3f9      	bcc.n	8004646 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004652:	4a11      	ldr	r2, [pc, #68]	; (8004698 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8004654:	4c11      	ldr	r4, [pc, #68]	; (800469c <LoopForever+0x2e>)
  movs r3, #0
 8004656:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004658:	e001      	b.n	800465e <LoopFillZerobss>

0800465a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800465a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800465c:	3204      	adds	r2, #4

0800465e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800465e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004660:	d3fb      	bcc.n	800465a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004662:	f7ff fe01 	bl	8004268 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8004666:	f000 f81d 	bl	80046a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800466a:	f7ff fcc7 	bl	8003ffc <main>

0800466e <LoopForever>:

LoopForever:
    b LoopForever
 800466e:	e7fe      	b.n	800466e <LoopForever>
  ldr   r0, =_estack
 8004670:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8004674:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8004678:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 800467c:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8004680:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8004684:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8004688:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 800468c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004690:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8004694:	080047b8 	.word	0x080047b8
  ldr r2, =_sbss
 8004698:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800469c:	200005e4 	.word	0x200005e4

080046a0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80046a0:	e7fe      	b.n	80046a0 <ADC1_IRQHandler>
	...

080046a4 <__libc_init_array>:
 80046a4:	b570      	push	{r4, r5, r6, lr}
 80046a6:	2600      	movs	r6, #0
 80046a8:	4d0c      	ldr	r5, [pc, #48]	; (80046dc <__libc_init_array+0x38>)
 80046aa:	4c0d      	ldr	r4, [pc, #52]	; (80046e0 <__libc_init_array+0x3c>)
 80046ac:	1b64      	subs	r4, r4, r5
 80046ae:	10a4      	asrs	r4, r4, #2
 80046b0:	42a6      	cmp	r6, r4
 80046b2:	d109      	bne.n	80046c8 <__libc_init_array+0x24>
 80046b4:	2600      	movs	r6, #0
 80046b6:	f000 f839 	bl	800472c <_init>
 80046ba:	4d0a      	ldr	r5, [pc, #40]	; (80046e4 <__libc_init_array+0x40>)
 80046bc:	4c0a      	ldr	r4, [pc, #40]	; (80046e8 <__libc_init_array+0x44>)
 80046be:	1b64      	subs	r4, r4, r5
 80046c0:	10a4      	asrs	r4, r4, #2
 80046c2:	42a6      	cmp	r6, r4
 80046c4:	d105      	bne.n	80046d2 <__libc_init_array+0x2e>
 80046c6:	bd70      	pop	{r4, r5, r6, pc}
 80046c8:	00b3      	lsls	r3, r6, #2
 80046ca:	58eb      	ldr	r3, [r5, r3]
 80046cc:	4798      	blx	r3
 80046ce:	3601      	adds	r6, #1
 80046d0:	e7ee      	b.n	80046b0 <__libc_init_array+0xc>
 80046d2:	00b3      	lsls	r3, r6, #2
 80046d4:	58eb      	ldr	r3, [r5, r3]
 80046d6:	4798      	blx	r3
 80046d8:	3601      	adds	r6, #1
 80046da:	e7f2      	b.n	80046c2 <__libc_init_array+0x1e>
 80046dc:	080047b0 	.word	0x080047b0
 80046e0:	080047b0 	.word	0x080047b0
 80046e4:	080047b0 	.word	0x080047b0
 80046e8:	080047b4 	.word	0x080047b4

080046ec <memcmp>:
 80046ec:	b530      	push	{r4, r5, lr}
 80046ee:	2400      	movs	r4, #0
 80046f0:	42a2      	cmp	r2, r4
 80046f2:	d101      	bne.n	80046f8 <memcmp+0xc>
 80046f4:	2000      	movs	r0, #0
 80046f6:	e005      	b.n	8004704 <memcmp+0x18>
 80046f8:	5d03      	ldrb	r3, [r0, r4]
 80046fa:	1c65      	adds	r5, r4, #1
 80046fc:	5d0c      	ldrb	r4, [r1, r4]
 80046fe:	42a3      	cmp	r3, r4
 8004700:	d001      	beq.n	8004706 <memcmp+0x1a>
 8004702:	1b18      	subs	r0, r3, r4
 8004704:	bd30      	pop	{r4, r5, pc}
 8004706:	002c      	movs	r4, r5
 8004708:	e7f2      	b.n	80046f0 <memcmp+0x4>

0800470a <memcpy>:
 800470a:	2300      	movs	r3, #0
 800470c:	b510      	push	{r4, lr}
 800470e:	429a      	cmp	r2, r3
 8004710:	d100      	bne.n	8004714 <memcpy+0xa>
 8004712:	bd10      	pop	{r4, pc}
 8004714:	5ccc      	ldrb	r4, [r1, r3]
 8004716:	54c4      	strb	r4, [r0, r3]
 8004718:	3301      	adds	r3, #1
 800471a:	e7f8      	b.n	800470e <memcpy+0x4>

0800471c <memset>:
 800471c:	0003      	movs	r3, r0
 800471e:	1812      	adds	r2, r2, r0
 8004720:	4293      	cmp	r3, r2
 8004722:	d100      	bne.n	8004726 <memset+0xa>
 8004724:	4770      	bx	lr
 8004726:	7019      	strb	r1, [r3, #0]
 8004728:	3301      	adds	r3, #1
 800472a:	e7f9      	b.n	8004720 <memset+0x4>

0800472c <_init>:
 800472c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800472e:	46c0      	nop			; (mov r8, r8)
 8004730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004732:	bc08      	pop	{r3}
 8004734:	469e      	mov	lr, r3
 8004736:	4770      	bx	lr

08004738 <_fini>:
 8004738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800473a:	46c0      	nop			; (mov r8, r8)
 800473c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800473e:	bc08      	pop	{r3}
 8004740:	469e      	mov	lr, r3
 8004742:	4770      	bx	lr
